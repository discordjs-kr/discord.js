{"meta":{"generator":"0.9.0","format":20,"date":1587866821781},"custom":{"general":{"name":"일반","files":{"welcome":{"name":"환영합니다","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"/static/logo.svg\" width=\"546\" alt=\"discord.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# 환영합니다!\n\ndiscord.js v12 문서에 오신 걸을 환영합니다!\n\n## 머릿말\n\ndiscord.js 는 강력한 [Node.js](https://nodejs.org) 모듈로써 [디스코드 API](https://discordapp.com/developers/docs/intro)와 쉽게 상호작용하게 해줍니다.\n\n- 객체 지향적\n- 빠르고 효율적\n- 다양한 기능\n- 유연함\n- 100% Promise 기반\n\n## 설치\n\n**12.0.0 버전 이상의 Node.js 가 요구됩니다**\n모두 선택 사항이기 때문에 비적합한 동위 종속성(unmet peer dependencies)에 대한 모든 경고를 무시하시길 바랍니다.\n음성 기능이 필요 없다면: `npm install discord.js`\n음성 기능과 함께: ([@discordjs/opus](https://www.npmjs.com/package/@discordjs/opus)): `npm install discord.js @discordjs/opus`\n음성 기능과 함께: ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discord.js opusscript`\n\n### 오디오 엔진\n\n추천하는 opus 엔진은 @discordjs/opus입니다. opusscript보다 훨씬 원할하게 작동합니다. 만약 두 개 모두 사용이 가능할 경우, discord.js 는 자동적으로 @discordjs/opus 를 선택합니다.\nopusscript를 사용하는 경우에는 단지 @discordjs/opus를 사용하기 힘든 개발환경에서만 권장됩니다.\n개발용 봇의 경우 @discordjs/opus 사용은 필수사항이여야 하며, 특히 여러 길드에서 실행될 경우 더욱 그러해야 합니다.\n\n### 선택적인 패키지들\n\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) 웹소켓 데이터 압축 및 가속 (`npm install zlib-sync`)\n- [erlpack](https://github.com/discordapp/erlpack) 훨씬 더 빠른 웹소켓 데이터 (de)serialisation (`npm install discordapp/erlpack`)\n- 다음 패키지들 중 하나는 더 빠른 패킷 암호화 및 암호 해독을 위해 설치될 수 있습니다:\n  - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n  - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) 훨씬 더 빠른 웹소켓 연결 (`npm install bufferutil`)\n- [utf-8-validate](https://www.npmjs.com/package/utf-8-validate) 훨씬 빠른 웹소켓 처리를 위해 `bufferutil`과 조합 (`npm install utf-8-validate`)\n\n## 예시\n\n```js\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client();\nclient.on(\"ready\", () => {\n  console.log(`${client.user.tag}에 로그인하였습니다!`);\n});\nclient.on(\"message\", msg => {\n  if (msg.content === \"핑\") {\n    msg.reply(\"퐁!\");\n  }\n});\nclient.login(\"토큰\");\n```\n\n## 관련링크\n\n- [공식 웹사이트 (영문)](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n- [공식 문서 (영문)](https://discord.js.org/#/docs/main/master/general/welcome)\n- [가이드 (영문)](https://discordjs.guide/) ([source](https://github.com/discordjs/guide)) - this is still for stable  \n  또한 [업데이트 가이드 (영문)](https://discordjs.guide/additional-info/changes-in-v12.html) 의 진행중인 작업을 확인하시길 바랍니다. 라이브러리에서 업데이트되거나 제거된 항목들을 포함합니다.\n- [Discord.js 공식 디스코드 길드 (영문)](https://discord.gg/bRCvFy9)\n- [디스코드 API 디스코드 길드](https://discord.gg/discord-api)\n- [GitHub](https://github.com/discordjs/discord.js)\n- [NPM](https://www.npmjs.com/package/discord.js)\n- [관련된 라이브러리들](https://discordapi.com/unofficial/libs.html)\n- [Discord.js 비공식 한국 디스코드 길드](https://discord.gg/TwZeg6z)\n\n### 확장\n\n- [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## 기여하기\n\n이슈를 작성하기 전에 아직 보고/제안되지 않았는지 확인하고 해당 이슈를 다시 확인하십시오.\n[문서](https://discord.js.org/#/docs).  \nPR를 등록하고 싶으시다면 [기여 가이드](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md)를 먼저 확인해보시길 바랍니다.\n\n## 도움\n\n문서에 있는 내용을 이해하지 못하거나, 문제가 발생한다면 부드럽게 처리하면 됩니다.\n올바른 방향으로 나아가세요. 주저하지 마시고 공식 [Discord.js 길드 (영문)](https://discord.gg/bRCvFy9)를 방문하시길 바랍니다.\n\n- [Discord.js 비공식 한국 디스코드 길드](https://discord.gg/TwZeg6z)\n","path":"docs/general/welcome.md"},"updating":{"name":"코드를 업데이트하기","type":"md","content":"# 버전 12.0.0\n\n12.0.0 버전은 많은 새롭고 개선된 기능들과 최적화, 버그 픽스들이 이루어져 있습니다.\n[변경 로그](https://github.com/discordjs/discord.js/releases/tag/12.0.0) 에 모든 변경 사항들이 있습니다.\n당신은 또한 [가이드](https://discordjs.guide/additional-info/changes-in-v12.html) 를 참고해 당신의 v11 코드를 v12 로 업\n데이트 할 수 있습니다.\n\n# 버전 11.1.0\n\nv11.1.0 은 게이트웨이와 음성 기능이 안정되고 개선되었습니다 또한 감사 로그 및 메시지 검색과 같은 새로운 기능을 지원합니\n다.\n[변경 로그](https://github.com/discordjs/discord.js/releases/tag/11.1.0) 에 모든 변경 사항들과 사용 중지된 기능들이 포함\n되어 있습니다.\n\n# 버전 11\n\n버전 11 은 새로운 기능과 향상된 기능, 최적화 및 버그 수정이 포함되어 있습니다.\n[변경 로그](https://github.com/discordjs/discord.js/releases/tag/11.0.0) 에 모든 변경 사항들이 있습니다.\n\n## 증요한 사항\n\n- 메세지 반응과 임베드 (풍부한 글)\n- 성능 향상을 위해 uws 와 erlpack 지원\n- OAuth 애플리케이션 지원\n- 웹 배포\n\n## 주요 변경\n\n### Client.login() - 더이상 이메일 + 패스워드 로그인을 지원하지 않습니다.\n\n적절한 토큰 지원이 출현한 이후 이메일과 암호로 로그인하는 것은 항상 크게 좌절되었지만, v11에서는 Hammer & Chisel이 공식\n적으로 해서는 [안 된다고 언급](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862)했기\n때문에 기능을 완전히 제거하기로 결정했습니다.\n\n사용자 계정은 봇 계정처럼 토큰으로 로그인할 수 있습니다. 사용자 계정에 대한 토큰을 얻으려면 해당 계정으로 Discord에 로그\n인하고 Ctrl + Shift + I를 사용하여 개발자 도구를 열 수 있습니다. 콘솔 탭에서 `localStorage.token`를 평가하면 해당 계정에\n대한 토큰이 제공됩니다.\n\n### ClientUser.setEmail()/setPassword()에는 현재 암호와 사용자 계정의 setUsername()이 필요합니다.\n\ne-메일 및 비밀번호로 더 이상 로그인할 수 없으므로 사용자 계정(셀프봇)에 대한 `setEmail()`과 `setPassword()` 및 `setUsern ame()` 메서드에 현재 계정 비밀번호를 입력해야 합니다.\n\n### 제거 : TextBasedChannel.sendTTSMessage()\n\n이 방법은 사실상 아무도 사용하지 않는 전혀 무의미한 지름길로 여겨졌습니다.\n`send()` 또는 `SendMessage()` 옵션을 사용하면 동일한 결과를 얻을 수 있습니다.\n\n예시:\n\n```js\nchannel.send(\"안녕!\", { tts: true });\n```\n\n### Collection.find()/exists()를 ID와 함께 사용하면 오류가 발생합니다.\n\n이것은 단순히 자주 일어나는 흔한 실수를 막기 위한 것입니다.\nID를 사용하여 무언가를 찾거나 존재 여부를 확인하려면 [ES6 지도 클래스](https://developer.mozilla.org/en/docs/Web/JavaScr\nipt/Reference/Global_Objects/Map)의 일부인 `.get()`와 `.has()`를 사용해야 하며, 이는 컬렉션의 extension입니다.\n","path":"docs/general/updating.md"},"faq":{"name":"자주 물어보는 질문","type":"md","content":"# 자주 물어보는 질문\n\n이 질문들은 가장 자주 물어보는 것들입니다.\n\n## `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode` 에러를 신경쓰지마시길 바랍니다\n\nNode.js 12.0.0 또는 더 최신 버전으로 업데이트하시면 이 에러는 해결됩니다\n\n## 보이스는 어떻게 작동하게 하나요?\n\n- FFMPEG를 설치합니다.\n- `@discordjs/opus` 패키지 또는 `opusscript` 패키지를 설치합니다.\n  @discordjs/opus는 성능이 현저하게 향상되었기 때문에 크게 선호된다.\n\n## FFMPEG는 어떻게 설치하나요?\n\n- **npm:** `npm install ffmpeg-static`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-static` 또는 [AoDude의 가이드에서 FFMPEG 섹션(영문)](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg)을 확인해보시길 바랍니다.\n\n## @discordjs/opus를 어떻게 설정하나요?\n\n- **Ubuntu:** 간단하게 `npm install @discordjs/opus`, 를 실행하고 끝입니다. 축하합니다!\n- **Windows:** `npm install --global --production windows-build-tools` 를 매니저 명령어 프롬포트 또는 PowerShell 에서\n  실행하시길 바랍니다\n  그리고 `npm install @discordjs/opus` 를 실행하면 봇 디랙토리는 성공적으로 빌드할것입니다. 우후!\n\n다른 질문들은 [공식 Discord.js 가이드(영문)](https://discordjs.guide/popular-topics/common-questions.html) 에서 찾을 수\n있습니다.\n만약 이곳에 써있지 않은 이슈가 있다면, 편하게 [공식 Discord.js 길드(영문)](https://discord.gg/bRCvFy9) 방문해보세셔도\n됩니다.\n항상 [문서](https://discord.js.org/#/docs/main/stable/general/welcome)를 먼저 읽어보시길 바랍니다.\n(한국어 도움이 필요하시다면 [한국어 비공식 Discord.js 길드](https://discord.gg/TwZeg6z) 에서 도와드리겠습니다!)\n","path":"docs/general/faq.md"}}},"topic":{"name":"주제","files":{"voice":{"name":"음성","type":"md","content":"# 음성 기능 소개\n\ndiscord.js 에서의 음성 기능은 다양한 방법으로 사용될 수 있습니다. 예를 들어, 뮤직봇이나 녹음하거나 오디오를 스트리밍 할\n수 있습니다.\n\ndiscord.js 에서 `음성채널(VoiceChannel)`에 연결하면 음성을 사용하여 오디오를 스트리밍하고 수신할 수 있는 `음성연결(Voice Connection)`을 얻을 수 있습니다.\n\n시작하기 위해, 다음을 확인해주시길 바랍니다:\n\n- FFmpeg - `npm install ffmpeg-static`\n- opus 인코더, 다음 중에 골라주시길 바랍니다:\n  - `npm install @discordjs/opus` (더 나은 성능)\n  - `npm install opusscript`\n- 좋은 인터넷 연결 상태\n\n추천하는 opus 엔진은 @discordjs/opus입니다. opusscript보다 훨씬 원할하게 작동합니다. 만약 두 개 모두 사용이 가능할 경우,\ndiscord.js 는 자동적으로 @discordjs/opus 를 선택합니다.\nopusscript를 사용하는 경우에는 단지 @discordjs/opus를 사용하기 힘든 개발환경에서만 권장됩니다.\n개발용 봇의 경우 @discordjs/opus 사용은 필수사항이여야 하며, 특히 여러 길드에서 실행될 경우 더욱 그러해야 합니다.\n\n## 음성 채널에 접속하기\n\n아래 예시는 메세지에 응답하여, 메세지 전송자의 음성 채널에 에러를 확인하지 않고 접속합니다. 이 사항은 중요합니다.\n오디오를 스트리밍할 수 있는 `음성연결(VoiceConnection)`을 얻을 수 있기 때문이다.\n\n```js\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client();\n\nclient.login(\"토큰\");\n\nclient.on(\"message\", async message => {\n  // 음성 기능은 길드에서만 작동됩니다. 길드가 아닐 경우,\n  // 무시합니다.\n  if (!message.guild) return;\n\n  if (message.content === \"/join\") {\n    // 유저의 음성 채널이 존재하는 경우에만 음성채널에 접속을 시도합니다.\n    if (message.member.voice.channel) {\n      const connection = await message.member.voice.channel.join();\n    } else {\n      message.reply(\"음성 채널에 먼저 접속해주세요!\");\n    }\n  }\n});\n```\n\n## 음성채널에 스트리밍하기\n\n위 예시에서, 어떻게 음성채널에 접속하여 `음성연결VoiceConnection`을 얻을 수 있는 지 알아보았습니다. 음성연결을 제공 받았\n다면,\n오디오 스트리밍을 시작할 수 있습니다.\n\n### 음성연결에 플레이하기\n\n음성연결을 통해 오디오를 재생하는 가장 일반적인 예시는 로컬파일입니다.\n\n```js\nconst dispatcher = connection.play(\"/home/discord/audio.mp3\");\n```\n\n여기서의 `dispatcher`는 `StreamDispatcher` 입니다. - 이것으로 음성연결의 볼륨 및 재생상황 제어할 수 있습니다.\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // 볼륨을 절반으로 줄입니다.\n\ndispatcher.on(\"finish\", () => {\n  console.log(\"재생이 종료되었습니다!\");\n});\n\ndispatcher.destroy(); // 재생을 종료합니다.\n```\n\n또한, 먼저 재생을 시작할 때, 옵션을 설정할 수도 있습니다.\n\n```js\nconst dispatcher = connection.play(\"/home/discord/audio.mp3\", {\n  volume: 0.5\n});\n```\n\n### 무엇을 재생할 수 있을까요?\n\nDiscord.js 는 다음을 재생하게 해줍니다.\n\n```js\n// 재생 가능한 스트림, 예를 들어 유튜브 오디오입니다.\nconst ytdl = require(\"ytdl-core\");\nconnection.play(\n  ytdl(\"https://www.youtube.com/watch?v=ZlAU_w7-Xp8\", { filter: \"audioonly\" })\n);\n\n// 인터넷에 있는 파일\nconnection.play(\"http://www.sample-videos.com/audio/mp3/wave.mp3\");\n\n// 로컬 파일\nconnection.play(\"/home/discord/audio.mp3\");\n```\n\nv12의 새로운 기능은 Ffmpeg 대신 훨씬 더 나은 성능으로 OggOpus와 WebmOpus 으로 스트림을 재생하는 기능입니다. 이는 스트림\n에 대한 볼륨 제어를 더 이상 지원하지 않는다는 점에 유의하십시오.\n\n```js\nconnection.play(fs.createReadStream(\"./media.webm\"), {\n  type: \"webm/opus\"\n});\n\nconnection.play(fs.createReadStream(\"./media.ogg\"), {\n  type: \"ogg/opus\"\n});\n```\n\n재생할 수 있는 모든 목록은 문서를 참조하십시오. 여기에는 더 쓸게 너무 많아서요!\n\n## 음성 보르드케스트\n\n음성 보르드케스트은 여러 채널에서 동일한 오디오를 재생하는 \"라디오\" 봇에 매우 유용합니다. 오디오가 한 번만 변환되고, 성\n능이 훨씬 좋습니다.\n\n```js\nconst broadcast = client.voice.createBroadcast();\n\nbroadcast.on(\"subscribe\", dispatcher => {\n  console.log(\"새로운 보르드케스트 구독자!\");\n});\n\nbroadcast.on(\"unsubscribe\", dispatcher => {\n  console.log(\"채널에서 보르드케스트 구독을 취소했습니다 :(\");\n});\n```\n\n`broadcast`는 `VoiceBroadcast`의 한 예로서, `)`에 연결하면 음성을 사용하여 오디오를 스트리밍하고 수신할 수 있는 `음성연 결(VoiceConnection)`을 얻을 수 있습니다.\n\n시작하기 위해, 다음을 확인해주시길 바랍니다:\n\n- FFmpeg - `npm install ffmpeg-static`\n- opus 인코더, 다음 중에 골라주시길 바랍니다:\n  - `npm install @discordjs/opus` (더 나은 성능)\n  - `npm install opusscript`\n- 좋은 인터넷 연결 상태\n\n추천하는 opus 엔진은 @discordjs/opus입니다. opusscript보다 훨씬 원할하게 작동합니다. 만약 두 개 모두 사용이 가능할 경우,\ndiscord.js 는 자동적으로 @discordjs/opus 를 선택합니다.\nopusscript를 사용하는 경우에는 단지 @discordjs/opus를 사용하기 힘든 개발환경에서만 권장됩니다.\n개발용 봇의 경우 @discordjs/opus 사용은 필수사항이여야 하며, 특히 여러 길드에서 실행될 경우 더욱 그러해야 합니다.\n\n## 음성 채널에 접속하기\n\n아래 예시는 메세지에 응답하여, 메세지 전송자의 음성 채널에 에러를 확인하지 않고 접속합니다. 이 사항은 중요합니다.\n오디오를 스트리밍할 수 있는 `음성연결(VoiceConnection)`을 얻을 수 있기 때문이다.\n\n```js\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client();\n\nclient.login(\"토큰\");\n\nclient.on(\"message\", async message => {\n  // 음성 기능은 길드에서만 작동됩니다. 길드가 아닐 경우,\n  // 무시합니다.\n  if (!message.guild) return;\n\n  if (message.content === \"/join\") {\n    // 유저의 음성 채널이 존재하는 경우에만 음성채널에 접속을 시도합니다.\n    if (message.member.voice.channel) {\n      const connection = await message.member.voice.channel.join();\n    } else {\n      message.reply(\"음성 채널에 먼저 접속해주세요!\");\n    }\n  }\n});\n```\n\n## 음성채널에 스트리밍하기\n\n위 예시에서, 어떻게 음성채널에 접속하여 `음성연결VoiceConnection`을 얻을 수 있는 지 알아보았습니다. 음성연결을 제공 받았\n다면,\n오디오 스트리밍을 시작할 수 있습니다.\n\n### 음성연결에 플레이하는 방법\n\n음성연결을 통해 오디오를 재생하는 가장 일반적인 예시는 로컬파일입니다.\n\n```js\nconst dispatcher = connection.play(\"/home/discord/audio.mp3\");\n```\n\n여기서의 `dispatcher`는 `StreamDispatcher` 입니다. - 이것으로 음성연결의 볼륨 및 재생상황 제어할 수 있습니다.\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // 볼륨을 절반으로 줄입니다.\n\ndispatcher.on(\"finish\", () => {\n  console.log(\"재생이 종료되었습니다!\");\n});\n\ndispatcher.destroy(); // 재생을 종료합니다.\n```\n\n또한, 먼저 재생을 시작할 때, 옵션을 설정할 수도 있습니다.\n\n```js\nconst dispatcher = connection.play(\"/home/discord/audio.mp3\", {\n  volume: 0.5\n});\n```\n\n### 무엇을 재생할 수 있을까요?\n\nDiscord.js 는 다음을 재생하게 해줍니다.\n\n```js\n// 재생 가능한 스트림, 예를 들어 유튜브 오디오입니다.\nconst ytdl = require(\"ytdl-core\");\nconnection.play(\n  ytdl(\"https://www.youtube.com/watch?v=ZlAU_w7-Xp8\", { filter: \"audioonly\" })\n);\n\n// 인터넷에 있는 파일\nconnection.play(\"http://www.sample-videos.com/audio/mp3/wave.mp3\");\n\n// 로컬 파일\nconnection.play(\"/home/discord/audio.mp3\");\n```\n\nv12의 새로운 기능은 Ffmpeg 대신 훨씬 더 나은 성능으로 OggOpus와 WebmOpus 으로 스트림을 재생하는 기능입니다. 이는 스트림\n에 대한 볼륨 제어를 더 이상 지원하지 않는다는 점에 유의하십시오.\n\n```js\nconnection.play(fs.createReadStream(\"./media.webm\"), {\n  type: \"webm/opus\"\n});\n\nconnection.play(fs.createReadStream(\"./media.ogg\"), {\n  type: \"ogg/opus\"\n});\n```\n\n재생할 수 있는 모든 목록은 문서를 참조하십시오. 여기에는 더 쓸게 너무 많아서요!\n\n## 음성 보르드케스트하기\n\n음성 보르드케스트은 여러 채널에서 동일한 오디오를 재생하는 \"라디오\" 봇에 매우 유용합니다. 오디오가 한 번만 변환되고, 성\n능이 훨씬 좋습니다.\n\n```js\nconst broadcast = client.voice.createBroadcast();\n\nbroadcast.on(\"subscribe\", dispatcher => {\n  console.log(\"새로운 보르드케스트 구독자!\");\n});\n\nbroadcast.on(\"unsubscribe\", dispatcher => {\n  console.log(\"채널에서 보르드케스트 구독을 취소했습니다 :(\");\n});\n```\n\n`broadcast`는 `VoiceBroadcast`의 한 예로서, 일반 VoiceConnections 과 같은 `play` 메서드를 사용합니다.\n\n```js\nconst dispatcher = broadcast.play(\"./audio.mp3\");\n\nconnection.play(broadcast);\n```\n\n위에 저장된 `dispatcher`는 BroadcastDispatcher라는 점을 유의해야 한다. - 이것은 보르드케스트에 등록되어 있는 모든 음성을\n통제한다. 예를 들어, 이 볼륨 설정은 모든 음성의 볼륨에 영향을 미친다.\n\n## 음성 수신\n\n곧 찾아뵙겠습니다!\ncoming soon&trade;\n","path":"docs/topic/voice.md"},"web":{"name":"웹 빌드","type":"md","content":"# 웹 빌드\n일반적인 Node.js 애플리케이션 외에도 discord.js에는 웹 브라우저에서 실행할 수 있는 특별한 배포 버전이 있습니다..\n이것은 Discord API와 상호작용이 필요한 클라이언트측 웹 앱에 유용합니다.\n[Webpack 3](https://webpack.js.org/) 는 이걸 빌드할 때 필요합니다.\n\n## 제한\n\n- 웹 브라우저가 지원하지 않는 외부 기본 라이브러리 없이는 오디오 인코딩/디코딩 기능이 없기에 현재 보이스 관련 기능은 사\n용할 수 없습니다.\n-  ShardingManager도 사용할 수 없습니다. 왜냐하면 child process를 만드는것에만 의존하기 때문입니다.\n- 어떤 기본 패키지도 사용할 수 없습니다.\n\n### 필요한 라이브러리\n\n만약 웹팩 프로젝트를 개발할경우, discord.js를 사용하면 `discord.js/browser`를 사용할 수 있습니다. 다음처럼 말이죠:\n```js\nconst Discord = require('discord.js/browser');\n// 디스코드로 평소처럼 하세요\n```\n\n### 웹팩 파일\n\nGitHub 저장소의 [webpack branch](https://github.com/discordjs/discord.js/tree/webpack)  에서 원하는 버전의 discord.js 웹\n 빌드를 얻을 수 있습니다. 라이브러리의 각 지점과 버전에 대한 파일이 있으며, `.min.js`로 끝나는 파일은 소스코드의 크기를 실질\n적으로 줄이기 위해 압축됩니다.\n\n다른 JS 라이브러리와 마찬가지로 다음 코드를 포함하면 됩니다.\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n`require('discord.js')`로 discord.js를 이용하면 전체 `디스코드`를 전역(window)으로 사용할 수 있습니다. API의 사용은 Node.js\n에서 사용하는 것과 조금도 다르지 않습니다.\n\n#### 예시\n\n```html\n<script type=\"text/javascript\" src=\"discord.11.1.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('토큰');\n</script>\n```","path":"docs/topic/web.md"},"partials":{"name":"Partials","type":"md","content":"# Partials\n\nPartials allow you to receive events that contain uncached instances, providing structures that contain very minimal\ndata. For example, if you were to receive a `messageDelete` event with an uncached message, normally Discord.js would\ndiscard the event. With partials, you're able to receive the event, with a Message object that contains just an ID.\n\n## Opting in\n\nPartials are opt-in, and you can enable them in the Client options by specifying [PartialTypes](/#/docs/main/master/typedef/PartialType):\n\n```js\n// Accept partial messages, DM channels, and reactions when emitting events\nnew Client({ partials: [\"MESSAGE\", \"CHANNEL\", \"REACTION\"] });\n```\n\n## Usage & warnings\n\n<warn>The only guaranteed data a partial structure can store is its ID. All other properties/methods should be\nconsidered invalid/defunct while accessing a partial structure.</warn>\n\nAfter opting-in with the above, you begin to allow partial messages and channels in your caches, so it's important\nto check whether they're safe to access whenever you encounter them, whether it be in events or through normal cache\nusage.\n\nAll instance of structures that you opted-in for will have a `partial` property. As you'd expect, this value is `true`\nwhen the instance is partial. Partial structures are only guaranteed to contain an ID, any other properties and methods\nno longer carry their normal type guarantees.\n\nThis means you have to take time to consider possible parts of your program that might need checks put in place to\nprevent accessing partial data:\n\n```js\nclient.on(\"messageDelete\", message => {\n  console.log(`${message.id} was deleted!`);\n  // Partial messages do not contain any content so skip them\n  if (!message.partial) {\n    console.log(`It had content: \"${message.content}\"`);\n  }\n});\n\n// You can also try to upgrade partials to full instances:\nclient.on(\"messageReactionAdd\", async (reaction, user) => {\n  // If a message gains a reaction and it is uncached, fetch and cache the message\n  // You should account for any errors while fetching, it could return API errors if the resource is missing\n  if (reaction.message.partial) await reaction.message.fetch();\n  // Now the message has been cached and is fully available:\n  console.log(\n    `${reaction.message.author}'s message \"${reaction.message.content}\" gained a reaction!`\n  );\n  // Fetches and caches the reaction itself, updating resources that were possibly defunct.\n  if (reaction.partial) await reaction.fetch();\n  // Now the reaction is fully available and the properties will be reflected accurately:\n  console.log(\n    `${reaction.count} user(s) have given the same reaction to this message!`\n  );\n});\n```\n\n<info>If a message is deleted and both the message and channel are uncached, you must enable both 'MESSAGE' and\n'CHANNEL' in the client options to receive the messageDelete event.</info>\n\n## Why?\n\nThis allows developers to listen to events that contain uncached data, which is useful if you're running a moderation\nbot or any bot that relies on still receiving updates to resources you don't have cached -- message reactions are a\ngood example.\n\nCurrently, the only type of channel that can be uncached is a DM channel, there is no reason why guild channels should\nnot be cached.\n","path":"docs/topic/partials.md"}}},"example":{"name":"예시","files":{"ping":{"name":"핑","type":"js","content":"'use strict';\n\n/**\n *  당신이 \"핑\"을 보낼 때마다 봇은 \"퐁\"을 응답합니다.\n */\n\n// discord.js 모듈 임포트\nconst Discord = require('discord.js');\n\n// 디스코드 클라이언트 인스턴트를 생성\nconst client = new Discord.Client();\n\n/**\n * ready 이벤트는 중요하며, 이 이벤트만이 봇이 정보에 반응을 시작된다는 것을 의미합니다.\n * 디스코드로 부터 정보가 전달됩니다.\n */\nclient.on('ready', () => {\n  console.log('준비되었습니다!');\n});\n\n// 메세지에 대한 이벤트 리스너를 생성합니다.\nclient.on('message', message => {\n  // 메세지가 만약 \"핑\" 이라면,\n  if (message.content === '핑') {\n    // 채널에 \"퐁\"을 전송\n    message.channel.send('퐁');\n  }\n});\n\n//  https://discordapp.com/developers/applications/me 에 있는 토큰을 이용하여 봇에로그인하세요\nclient.login('토큰을 이곳에 입력하세요');","path":"docs/example/ping.js"},"avatars":{"name":"아바타","type":"js","content":"'use strict';\n\n/**\n * 유저에게 자신의 아바타 링크를 전송합니다\n */\n\n// discord.js 모듈 인포트\nconst Discord = require('discord.js');\n\n// 디스코드 클라이언트 인스턴트를 생성\nconst client = new Discord.Client();\n\n/**\n * ready 이벤트는 중요하며, 이 이벤트만이 봇이 정보에 반응을 시작된다는 것을 의미합니다.\n * 디스코드로 부터 정보가 전달됩니다.\n */\nclient.on('ready', () => {\n  console.log('준비되었습니다!');\n});\n\n// 메세지에 대한 이벤트 리스너를 생성합니다.\nclient.on('message', message => {\n  // 만약 메세지가 \"내 아바타는 뭐니\" 라면\n  if (message.content === '내 아바타는 뭐니') {\n    // 유저의 아바타 URL을 전송\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n//  https://discordapp.com/developers/applications/me 에 있는 토큰을 이용하여 봇에로그인하세요\nclient.login('토큰을 이곳에 입력하세요');","path":"docs/example/avatars.js"},"attachments":{"name":"첨부파일","type":"md","content":"# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [MessageAttachment](/#/docs/main/master/class/MessageAttachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require(\"discord.js\");\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on(\"ready\", () => {\n  console.log(\"I am ready!\");\n});\n\nclient.on(\"message\", message => {\n  // If the message is '!rip'\n  if (message.content === \"!rip\") {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment(\"https://i.imgur.com/w3duR07.png\");\n    // Send the attachment in the message channel\n    message.channel.send(attachment);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login(\"your token here\");\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/master/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require(\"discord.js\");\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on(\"ready\", () => {\n  console.log(\"I am ready!\");\n});\n\nclient.on(\"message\", message => {\n  // If the message is '!rip'\n  if (message.content === \"!rip\") {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment(\"https://i.imgur.com/w3duR07.png\");\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author},`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login(\"your token here\");\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [MessageAttachment](/#/docs/main/master/class/MessageAttachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require(\"discord.js\");\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on(\"ready\", () => {\n  console.log(\"I am ready!\");\n});\n\nclient.on(\"message\", message => {\n  // If the message is '!rip'\n  if (message.content === \"!rip\") {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment(\"./rip.png\");\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author},`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login(\"your token here\");\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example1.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require(\"discord.js\");\n\n// Import the native fs module\nconst fs = require(\"fs\");\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on(\"ready\", () => {\n  console.log(\"I am ready!\");\n});\n\nclient.on(\"message\", message => {\n  // If the message is '!memes'\n  if (message.content === \"!memes\") {\n    // Get the buffer from the 'memes.txt', assuming that the file exists\n    const buffer = fs.readFileSync(\"./memes.txt\");\n\n    /**\n     * Create the attachment using MessageAttachment,\n     * overwritting the default file name to 'memes.txt'\n     * Read more about it over at\n     * http://discord.js.org/#/docs/main/master/class/MessageAttachment\n     */\n    const attachment = new MessageAttachment(buffer, \"memes.txt\");\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author}, here are your memes!`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login(\"your token here\");\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n","path":"docs/example/attachments.md"},"greeting":{"name":"길드 인사말","type":"js","content":"'use strict';\n\n/**\n *  당신이 \"핑\"을 보낼 때마다 봇은 \"퐁\"을 응답합니다.\n */\n\n// discord.js 모듈 임포트\nconst Discord = require('discord.js');\n\n// 디스코드 클라이언트 인스턴트를 생성\nconst client = new Discord.Client();\n\n/**\n * ready 이벤트는 중요하며, 이 이벤트만이 봇이 정보에 반응을 시작된다는 것을 의미합니다.\n * 디스코드로 부터 정보가 전달됩니다.\n */\nclient.on('ready', () => {\n  console.log('준비되었습니다!');\n});\n\n// 새로운 유저 추가에 대한 이벤트 리스너를 생성합니다.\nclient.on('guildMemberAdd', member => {\n  // 서버에서 지정된 채널에 메시지 보내기:\n  const channel = member.guild.channels.cache.find(ch => ch.name === '유저-로그');\n  // 만약 아무 채널도 발견되지 않았다면 보내지 않기\n  if (!channel) return;\n  // 유저를 맨션하며, 메세지를 전송\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// https://discordapp.com/developers/applications/me 에 있는 토큰을 이용하여 봇에로그인하세요\nclient.login('토큰을 이곳에 입력하세요');\n","path":"docs/example/greeting.js"},"embed":{"name":"엠베드 메세지","type":"js","content":"'use strict';\n\n/**\n * 임베드를 전송하는 예시입니다.\n */\n\n// 요구되는 클래스를 discord.js 모듈에서 가져옵니다.\nconst { Client, MessageEmbed } = require('discord.js');\n\n// 디스코드 클라이언트의 인스턴스를 생성합니다.\nconst client = new Client();\n\n/**\n * ready 이벤트는 중요하며, 이 이벤트만이 봇이 정보에 반응을 시작된다는 것을 의미합니다.\n * 디스코드로 부터 정보가 전달됩니다.\n */\nclient.on('ready', () => {\n  console.log('준비되었습니다!');\n});\n\nclient.on('message', message => {\n  // 만약 메세지가 \"임베드 어떻게\"\n  if (message.content === '임베드 어떻게') {\n    // MessageEmbed 컨스트럭터를 이용하여, 임베드를 생성할 수 있습니다.\n    // 컨스트럭터로 더 할 수 있는 것들을 확인해보세요\n    // https://discord-kr.js.org/#/docs/main/master/class/MessageEmbed\n    const embed = new MessageEmbed()\n      // 필드의 제목을 설정합니다.\n      .setTitle('임베드 제목')\n      // 임베드의 색을 설정합니다.\n      .setColor(0xff0000)\n      // 임베드의 메인 설명을 설정합니다.\n      .setDescription('안녕하세요! 여긴 임베드 설명입니다.');\n    // 메시지가 전송된 채널과 동일한 채널로 임베드를 전송합니다.\n    message.channel.send(embed);\n  }\n});\n\n//  https://discordapp.com/developers/applications/me 에 있는 토큰을 이용하여 봇에로그인하세요\nclient.login('토큰을 이곳에 입력하세요');\n","path":"docs/example/embed.js"},"moderation":{"name":"관리","type":"md","content":" # 관리\n\n이곳에서는, 유저를 추방하거나 차단하는 예시를 확인하실 수 있습니다!\n\n## 유저 추방하기\n\n추방하고 싶다는 유저가 있다고 가정해봅시다. 여기 어떻게 __할 수 있는지__ 예시가 있습니다\n\n```js\n// discord.js 모듈을 인포트합니다\nconst Discord = require('discord.js');\n\n// Discord 클라이언트의 인스턴스 생성\nconst client = new Discord.Client();\n\n/**\n * ready 이벤트는 중요하며, 이 이벤트만이 봇이 정보에 반응을 시작된다는 것을 의미합니다.\n * 디스코드로 부터 정보가 전달됩니다.\n */\nclient.on('ready', () => {\n  console.log('준비되었습니다!');\n});\n\nclient.on('message', message => {\n  // 길드에서 오지 않은 메세지는 무시합니다.\n  if (!message.guild) return;\n\n  // 만약 메세지가 \"!kick\"으로 시작한다면\n  if (message.content.startsWith('!kick')) {\n  // 메시지에서 누군가를 언급한다고 가정하면, 유저가 반환됩니다.\n  // https://discord-kr.js.org/#/docs/main/master/class/messageMentions 에서 언급된 내용을 자세히 읽어보십시오.\n    const user = message.mentions.users.first();\n    // 만약 유저가 언급되었다면\n    if (user) {\n      // 유저에서 멤버 객체를 가져옵니다.\n      const member = message.guild.member(user);\n      // 만약 해당 유저가 길드에 있다면\n      if (member) {\n        /**\n         * 유저를 추방합니다.\n         * 길드 멤버에 실행하도록 하시길 바랍니다\n         * 이건 아주 중요한 사항입니다!\n         */\n        member\n          .kick('감사로그에 표시될 사유를 입력해주세요 (선택) ')\n          .then(() => {\n            // 메세지 전송자에게 성공적으로 추방했다고 알려줍니다.\n            message.reply(`${user.tag}를 성공적으로 추방했습니다.`);\n          })\n          .catch(err => {\n            // 에러가 발생하였습니다.\n            // 이 에러는 보통 봇이 유저를 추방할 수 없을 때 발생합니다.\n            // 권한이 부족하거나, 역할의 낮을 때\n            message.reply('유저 추방에 실패하였습니다.');\n            // 에러를 출력합니다.\n            console.error(err);\n          });\n      } else {\n        // 언급된 유저가 길드에 존재하지 않을 때\n        message.reply(\"해당 유저는 길드에 존재하지 않습니다!\");\n      }\n      // 유저가 언급되지 않았을 때\n    } else {\n      message.reply(\"추방할 유저를 언급하지 않았습니다!\");\n    }\n  }\n});\n\n// https://discordapp.com/developers/applications/me 에 있는 토큰을 이용하여 봇에로그인하세요\nclient.login('토큰');\n```\n\n결과:\n\n![결과 이미지](/static/kick-example.png)\n\n## 유저 차단하기\n\n차단은 추방과 같은 방식으로 작동하지만, 바꿀 수 있는 옵션이 약간 더 많다.\n\n```js\n// 길드에서 오지 않은 메세지는 무시합니다.\nconst Discord = require('discord.js');\n\n// Discord 클라이언트의 인스턴스 생성\nconst client = new Discord.Client();\n\n/**\n * ready 이벤트는 중요하며, 이 이벤트만이 봇이 정보에 반응을 시작된다는 것을 의미합니다.\n * 디스코드로 부터 정보가 전달됩니다.\n */\nclient.on('ready', () => {\n  console.log('준비되었습니다.');\n});\n\nclient.on('message', message => {\n  // 언급된 유저가 길드에 존재하지 않을 때\n  if (!message.guild) return;\n\n  // 만약 메세지가 \"!ban\"으로 시작한다면\n  if (message.content.startsWith('!ban')) {\n  // 메시지에서 누군가를 언급한다고 가정하면, 유저가 반환됩니다.\n  // https://discord-kr.js.org/#/docs/main/master/class/messageMentions 에서 언급된 내용을 자세히 읽어보십시오.\n    const user = message.mentions.users.first();\n    // 만약 해당 유저가 길드에 있다면\n    if (user) {\n      // 유저에서 멤버 객체를 가져옵니다.\n      const member = message.guild.member(user);\n      // 만약 해당 유저가 길드에 있다면\n      if (member) {\n        /**\n         * 유저를 차단합니다.\n         * 길드 멤버에 실행하도록 하시길 바랍니다!\n         * 이건 아주 중요한 사항입니다!\n         * 옵션에 대해 더 알아보고 싶다면\n         * https://discord-kr.js.org/#/docs/main/master/class/GuildMember?scrollTo=ban 를 참고하시길 바랍니다\n         */\n\n        member\n          .ban({\n            reason: '나빠요!?',\n          })\n          .then(() => {\n            // 메세지 전송자에게 성공적으로 차단했다고 알려줍니다.\n            message.reply(`${user.tag}를 성공적으로 차단했습니다.`);\n          })\n          .catch(err => {\n            // 에러가 발생하였습니다.\n            // 이 에러는 보통 봇이 유저를 차단할 수 없을 때 발생합니다.\n            // 권한이 부족하거나, 역할의 낮을 때\n            message.reply('유저 추방에 실패하였습니다.');\n            // 에러를 출력합니다.\n            console.error(err);\n          });\n      } else {\n        // 언급된 유저가 길드에 존재하지 않을 때\n        message.reply(\"That user isn't in this guild!\");\n      }\n    } else {\n      // 유저가 언급되지 않았을 때\n      message.reply(\"추방할 유저를 언급하지 않았습니다!\");\n    }\n  }\n});\n\n// https://discordapp.com/developers/applications/me 에 있는 토큰을 이용하여 봇에로그인하세요\nclient.login('토큰');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)","path":"docs/example/moderation.md"},"webhook":{"name":"웹훅","type":"js","content":"'use strict';\n\n/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n/*\n * Create a new webhook\n * The Webbooks ID and token can be found in the URL, when you request that URL, or in the response body.\n * https://discordapp.com/api/webhooks/12345678910/T0kEn0fw3Bh00K\n *                                     ^^^^^^^^^^  ^^^^^^^^^^^^ \n *                                     Webhook ID  Webhook Token\n */\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n\n\n'use strict';\n\n/**\n * 웹훅을 이용하여 메세지 보내기\n */\n\n// discord.js 모듈을 불러옵니다.\nconst Discord = require('discord.js');\n/*\n * 새 웹훅을 만듭니다.\n * 당신은 URL 또는 URL 리퀘스트시의 응답에서 Webbooks ID와 토큰은 URL에서 확인할 수 있습니다.\n * https://discordapp.com/api/webhooks/12345678910/T0kEn0fw3Bh00K\n *                                     ^^^^^^^^^^  ^^^^^^^^^^^^ \n *                                       웹훅 ID     웹훅 토큰\n */\nconst hook = new Discord.WebhookClient('웹훅 id', '웹훅 토큰');\n\n// 웹훅을 사용하여 메세지를 보냅니다.\nhook.send('난 이제 살아 있어요!');\n","path":"docs/example/webhook.js"}}}},"classes":[{"name":"BaseClient","description":"모든 클라이언트를 위반 기본 클래스","extends":[[["EventEmitter"]]],"props":[{"name":"_timeouts","description":"{@link BaseClient#setTimeout} 에서 설정된 시간 제한은 계속 유지됩니다}","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"{@link BaseClient#setInterval} 에서 설정된 간격은 계속 유지됩니다","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"{@link BaseClient#setImmediate} 에서 설정된 간격은 계속 유지됩니다","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"클라이언트가 인스턴스화된 옵션","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"클라이언트의 REST 매니저","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API 단축어","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"기본 클라이언트가 사용하는 모든 에셋들을 삭제합니다.","meta":{"line":65,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"클라이언트가 종료되면 자동으로 취소되는 setTimeout을 설정합니다.","params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"delay","description":"실행하기 전 기다릴 시간 (밀리초)","type":[[["number"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"타임아웃을 지웁니다.","params":[{"name":"timeout","description":"취소할 타임아웃","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"클라이언트가 종료되면 자동으로 취소되는 setInterval을 설정합니다.","params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"delay","description":"실행하는 사이의 기다리는 간격 (밀리초)","type":[[["number"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Interval을 초기화합니다","params":[{"name":"interval","description":"취소할 Interval","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"클라이언트가 종료되면 자동으로 취소되는 Immediate를 설정합니다.","params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Immediate을 초기화합니다.","params":[{"name":"immediate","description":"취소할 Immediate","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":14,"file":"BaseClient.js","path":"src/client"}},{"name":"Client","description":"Discord API와 상호 작용하는 주요 허브 및 모든봇의 시작점.","extends":[[["BaseClient"]]],"construct":{"name":"Client","params":[{"name":"options","description":"클라이언트의 옵션","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"ws","description":"클라이언트의 웹소켓 매니저","type":[[["WebSocketManager"]]],"meta":{"line":81,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"클라이언트의 액션 매니저","access":"private","type":[[["ActionsManager"]]],"meta":{"line":88,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"클라이언트의 음성 매니저 (브라우저에서는 `null`)","nullable":true,"type":[[["ClientVoiceManager"]]],"meta":{"line":94,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"클라이언트에 대한 Shard 핼퍼 ({@link ShardingManager} 로 프로세스가 생성되었을 때만 해당됩니다.)","nullable":true,"type":[[["ShardClientUtil"]]],"meta":{"line":100,"file":"Client.js","path":"src/client"}},{"name":"users","description":"모든 캐시된 {@link User} 오브젝트 (ID로 매핑됨)","type":[[["UserManager"]]],"meta":{"line":109,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"클라이언트가 현재 핸들링하고 있는 모든 길드 (ID로 매핑됨)\n만약 샤딩을 사용하고 있지 않다면, 봇이 멤버인 *모든* 길드에 해당합니다.","type":[[["GuildManager"]]],"meta":{"line":116,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"클라이언트가 현재 핸들링하고 있는 모든 채널({@link Channel}) (ID로 매핑됨)\n만약 샤딩을 사용하고 있지 않다면, 봇이 멤버인 *모든* 길드에 있는 *모든* 채널에 해당합니다.\nDM 채널은 초기에 캐싱되지 않으므로 존재하지 않는다는 점에 유의하시길 바랍니다.\n매니저가 명시적으로 가져오거나 사용하지 않는 경우에 해당합니다.","type":[[["ChannelManager"]]],"meta":{"line":125,"file":"Client.js","path":"src/client"}},{"name":"presence","description":"클라이언트의 프리센스(Presence)","access":"private","type":[[["ClientPresence"]]],"meta":{"line":133,"file":"Client.js","path":"src/client"}},{"name":"token","description":"로그인된 봇의 인증 토큰\n<warn>토큰은 언제나 비밀리 보관되어야합니다.</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":142,"file":"Client.js","path":"src/client"}},{"name":"user","description":"클라이언트가 로그인되어있는 유저","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":151,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"클라이언트가 마지막으로 `준비(READY)` 상태로 표시된 시간\n(클라이언트가 끊기고 성공적으로 다시 연결될때, 이것은 덮어써질 것입니다)","nullable":true,"type":[[["Date"]]],"meta":{"line":158,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"클라이언트가 접근할 수 있는 모든 커스텀 이모지들 (ID로 매핑됨)","readonly":true,"type":[[["GuildEmojiManager"]]],"meta":{"line":170,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"클라이언트가 마지막으로 `준비`되었던 시간의 타임스탬프","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":183,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"클라이언트가 마지막으로 `준비` 상태로 전환된 후 경과 시간(밀리초)","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":192,"file":"Client.js","path":"src/client"}},{"name":"_timeouts","description":"{@link BaseClient#setTimeout} 에서 설정된 시간 제한은 계속 유지됩니다}","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"{@link BaseClient#setInterval} 에서 설정된 간격은 계속 유지됩니다","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"{@link BaseClient#setImmediate} 에서 설정된 간격은 계속 유지됩니다","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"클라이언트가 인스턴스화된 옵션","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"클라이언트의 REST 매니저","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API 단축어","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"login","description":"클라이언트를 로그인하고 디스코드에 대한 웹 소켓 연결을 설정하세요","examples":["client.login('나의 토큰');"],"params":[{"name":"token","description":"로그인할 계정의 토큰","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"계정에 사용된 토큰"},"meta":{"line":203,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"로그아웃하여 디스코드와의 연결을 종료하고 클라이언트를 종료합니다.","returns":[[["void"]]],"meta":{"line":233,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"디스코드에서 초대링크를 가져옵니다.","examples":["client.fetchInvite('https://discord.gg/bRCvFy9')\n  .then(invite => console.log(`초대 정보를 코드로 가져왔습니다: ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"invite","description":"Invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":248,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"디스코드에서 웹훅을 가져옵니다.","examples":["client.fetchWebhook('id', 'token')\n  .then(webhook => console.log(`${webhook.name} 이름의 웹훅을 가져옵니다`))\n  .catch(console.error);"],"params":[{"name":"id","description":"웹훅의 아이디","type":[[["Snowflake"]]]},{"name":"token","description":"웹훅의 토큰","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":266,"file":"Client.js","path":"src/client"}},{"name":"fetchVoiceRegions","description":"디스코드에서 가능한 음성 길드위치를 가져옵니다.","examples":["client.fetchVoiceRegions()\n  .then(regions => console.log(`가능한 음성 길드위치는: ${regions.map(region => region.name).join(', ')}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":281,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"모든 텍스트 기반 채널의 메시지를 스위프하고 최대 메시지 수명보다 오래된 메시지를 제거합니다.\n메시지가 수정된 경우, 원본 메시지의 시간이 아닌 메세지 수정 시간이 사용됩니다.","examples":["// 1800초보다 오래된 모든 메세지를 메세지 캐시에서 삭제합니다.\nconst amount = client.sweepMessages(1800);\nconsole.log(`성공적으로 ${amount} 개의 메세지가 메세지 캐시에서 삭제되었습니다.`);"],"params":[{"name":"lifetime","description":"이것보다 오래된 메세지 (단위: 초)\n캐시에서 삭제될겁니다. 기본값은 {@link ClientOptions#messageCacheLifetime} 를 참고하시길 바랍니다","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"캐시에서 삭제된 메세지의 양\n메세지 캐시에 제한이 없다면 -1"},"meta":{"line":301,"file":"Client.js","path":"src/client"}},{"name":"fetchApplication","description":"해당 봇의 OAuth 애플리케이션을 디스코드에서 가져옵니다","returns":[[["Promise","<"],["ClientApplication",">"]]],"meta":{"line":335,"file":"Client.js","path":"src/client"}},{"name":"fetchGuildPreview","description":"디스코드에서 길드 미리보기를 얻습니다. 공개 길드에서만 사용할 수 있습니다.","params":[{"name":"guild","description":"미리보기를 가져올 길드","type":[[["GuildResolvable"]]]}],"returns":[[["Promise","<"],["GuildPreview",">"]]],"meta":{"line":347,"file":"Client.js","path":"src/client"}},{"name":"generateInvite","description":"봇을 길드에 초대할 때 사용될 수 있는 링크를 생성합니다.","examples":["client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n  .then(link => console.log(`봇 초대링크가 생성되었습니다: ${link}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"요청할 권한","optional":true,"type":[[["PermissionResolvable"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":365,"file":"Client.js","path":"src/client"}},{"name":"_eval","description":"{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} 를 실행합니다\n클라이언트는 `this`로 선언됩니다.","access":"private","params":[{"name":"script","description":"실행할 스크립트","type":[[["string"]]]}],"returns":[["*"]],"meta":{"line":390,"file":"Client.js","path":"src/client"}},{"name":"_validateOptions","description":"클라이언트 옵션의 유효성을 검사합니다.","access":"private","params":[{"name":"options","description":"유효성을 검사할 옵션","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":399,"file":"Client.js","path":"src/client"}},{"name":"setTimeout","description":"클라이언트가 종료되면 자동으로 취소되는 setTimeout을 설정합니다.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"delay","description":"실행하기 전 기다릴 시간 (밀리초)","type":[[["number"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"타임아웃을 지웁니다.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"취소할 타임아웃","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"클라이언트가 종료되면 자동으로 취소되는 setInterval을 설정합니다.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"delay","description":"실행하는 사이의 기다리는 간격 (밀리초)","type":[[["number"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Interval을 초기화합니다","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"취소할 Interval","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"클라이언트가 종료되면 자동으로 취소되는 Immediate를 설정합니다.","inherits":"BaseClient#setImmediate","inherited":true,"params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Immediate을 초기화합니다.","inherits":"BaseClient#clearImmediate","inherited":true,"params":[{"name":"immediate","description":"취소할 Immediate","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"events":[{"name":"channelCreate","description":"채널이 생성될 때 실행됩니다.","params":[{"name":"channel","description":"생성된 채널","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":12,"file":"ChannelCreate.js","path":"src/client/actions"}},{"name":"channelDelete","description":"채널이 삭제될 때 실행됩니다.","params":[{"name":"channel","description":"삭제된 채널","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":25,"file":"ChannelDelete.js","path":"src/client/actions"}},{"name":"guildBanRemove","description":"멤버가 길드에서 차단 해제되면 실행됩니다.","params":[{"name":"guild","description":"차단 해제가 발생한 길드","type":[[["Guild"]]]},{"name":"user","description":"차단 해제된 유저","type":[[["User"]]]}],"meta":{"line":11,"file":"GuildBanRemove.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"길드가 사용 불가능 할 때 실행됩니다. 예를 들어, 복구 중일 때 실행됩니다","params":[{"name":"guild","description":"사용 불가능해진 길드","type":[[["Guild"]]]}],"meta":{"line":25,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"guildDelete","description":"길드가 클라이언트를 추방하거나 길드를 삭제/나갈 때마다 실행됩니다.","params":[{"name":"guild","description":"삭제된 길드","type":[[["Guild"]]]}],"meta":{"line":46,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"emojiCreate","description":"길드에 커스텀 이모지가 생성될 때 실행됩니다.","params":[{"name":"emoji","description":"생성된 이모지","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"emojiDelete","description":"커스텀 이모지가 삭제될 때 실행됩니다.","params":[{"name":"emoji","description":"삭제된 이모지","type":[[["GuildEmoji"]]]}],"meta":{"line":10,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"emojiUpdate","description":"커스텀 이모지가 길드에서 업데이트될 때 실행됩니다.","params":[{"name":"oldEmoji","description":"이전 이모지","type":[[["GuildEmoji"]]]},{"name":"newEmoji","description":"새로운 이모지","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildIntegrationsUpdate","description":"길드의 연동 정보가 업데이트될 때 실행됩니다.","params":[{"name":"guild","description":"연동 정보가 업데이트된 길드","type":[[["Guild"]]]}],"meta":{"line":10,"file":"GuildIntegrationsUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"유저가 길드를 나가거나, 추방되었을 때 실행됩니다.","params":[{"name":"member","description":"길드를 나가거나, 추방된 유저","type":[[["GuildMember"]]]}],"meta":{"line":17,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"역할이 생성될 때 실행됩니다.","params":[{"name":"role","description":"생성된 역할","type":[[["Role"]]]}],"meta":{"line":14,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"역할이 삭제될 때 실행됩니다.","params":[{"name":"role","description":"삭제된 역할","type":[[["Role"]]]}],"meta":{"line":17,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"길드 역할이 업데이트될 때 실행됩니다.","params":[{"name":"oldRole","description":"업데이트 이전의 역할","type":[[["Role"]]]},{"name":"newRole","description":"업데이트 이후의 역할","type":[[["Role"]]]}],"meta":{"line":17,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"길드가 업데이트되었을 때 실행됩니다. - 예) 이름 변경","params":[{"name":"oldGuild","description":"업데이트 이전의 길드","type":[[["Guild"]]]},{"name":"newGuild","description":"업데이트 이후의 길드","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"inviteCreate","description":"초대링크가 생성될 때 실행됩니다.\n<info> 이 이벤트는 클라이언트가 `길드 관리(MANAGE_GUILD)`\n또는 해당 채널에 `채널 관리 (MANAGE_CHANNEL)` 권한이 있을 때만 실행됩니다.</info>","params":[{"name":"invite","description":"생성된 초대","type":[[["Invite"]]]}],"meta":{"line":16,"file":"InviteCreate.js","path":"src/client/actions"}},{"name":"inviteDelete","description":"초대링크가 삭제될 때 실행됩니다.\n<info> 이 이벤트는 클라이언트가 `길드 관리(MANAGE_GUILD)`\n또는 해당 채널에 `채널 관리 (MANAGE_CHANNEL)` 권한이 있을 때만 실행됩니다.</info>","params":[{"name":"invite","description":"The invite that was deleted","type":[[["Invite"]]]}],"meta":{"line":16,"file":"InviteDelete.js","path":"src/client/actions"}},{"name":"message","description":"메세지가 생성될 때 실행됩니다.","params":[{"name":"message","description":"생성된 메세지","type":[[["Message"]]]}],"meta":{"line":26,"file":"MessageCreate.js","path":"src/client/actions"}},{"name":"messageDelete","description":"메세지가 삭제될 때 실행됩니다.","params":[{"name":"message","description":"삭제된 메세지","type":[[["Message"]]]}],"meta":{"line":16,"file":"MessageDelete.js","path":"src/client/actions"}},{"name":"messageDeleteBulk","description":"메세지 여러개가 삭제될 때 실행됩니다.","params":[{"name":"messages","description":"삭제된 메세지들 (ID로 매핑)","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]]}],"meta":{"line":31,"file":"MessageDeleteBulk.js","path":"src/client/actions"}},{"name":"messageReactionAdd","description":"반응을 캐시된 메세지에 추가될 때 실행됩니다.","params":[{"name":"messageReaction","description":"반응 객체","type":[[["MessageReaction"]]]},{"name":"user","description":"이모지를 추가한 유저","type":[[["User"]]]}],"meta":{"line":38,"file":"MessageReactionAdd.js","path":"src/client/actions"}},{"name":"messageReactionRemove","description":"반응이 캐시된 메세지에 삭제될 때 실행됩니다.","params":[{"name":"messageReaction","description":"반응 객체","type":[[["MessageReaction"]]]},{"name":"user","description":"이모지가 삭제된 유저","type":[[["User"]]]}],"meta":{"line":32,"file":"MessageReactionRemove.js","path":"src/client/actions"}},{"name":"messageReactionRemoveAll","description":"모든 반응이 캐시된 메세지에 삭제될 때 실행됩니다.","params":[{"name":"message","description":"반응이 삭제된 메세지","type":[[["Message"]]]}],"meta":{"line":23,"file":"MessageReactionRemoveAll.js","path":"src/client/actions"}},{"name":"messageReactionRemoveEmoji","description":"봇이 캐시된 메세지에서 반응이 삭제했을 때 실행됩니다.","params":[{"name":"reaction","description":"삭제된 반응","type":[[["MessageReaction"]]]}],"meta":{"line":18,"file":"MessageReactionRemoveEmoji.js","path":"src/client/actions"}},{"name":"presenceUpdate","description":"길드 멤버의 프리센스 ( 예) 상태, 게임)이 변경 되었을 때 실행됩니다.","params":[{"name":"oldPresence","description":"업데이트 이전의 프리센스 (존재하는 경우)","nullable":true,"type":[[["Presence"]]]},{"name":"newPresence","description":"업데이트 이후의 프리센스","type":[[["Presence"]]]}],"meta":{"line":33,"file":"PresenceUpdate.js","path":"src/client/actions"}},{"name":"userUpdate","description":"유저의 정보 (예) 유저이름)가 수정되었을 때 실행됩니다.","params":[{"name":"oldUser","description":"업데이트 이전의 유저","type":[[["User"]]]},{"name":"newUser","description":"업데이트 이후의 유저","type":[[["User"]]]}],"meta":{"line":14,"file":"UserUpdate.js","path":"src/client/actions"}},{"name":"voiceStateUpdate","description":"유저가 음성 상태를 변경할 때 실행됩니다. - 예) 음성 채널에 접속/퇴장 하거나 마이크를 끄거나 킬때.","params":[{"name":"oldState","description":"업데이트 이전의 음성 상태","type":[[["VoiceState"]]]},{"name":"newState","description":"업데이트 이후의 음성 상태","type":[[["VoiceState"]]]}],"meta":{"line":33,"file":"VoiceStateUpdate.js","path":"src/client/actions"}},{"name":"webhookUpdate","description":"길드의 텍스트 채널이 웹훅 업데이트를 포함한 경우 실행됩니다.","params":[{"name":"channel","description":"웹훅이 업데이트된 채널","type":[[["TextChannel"]]]}],"meta":{"line":10,"file":"WebhooksUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"일반적인 경고가 발생할 때 실행됩니다.","params":[{"name":"info","description":"경고","type":[[["string"]]]}],"meta":{"line":445,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"일반적인 디버그 정보가 발생할 때 실행됩니다.","params":[{"name":"info","description":"디버그 정보","type":[[["string"]]]}],"meta":{"line":451,"file":"Client.js","path":"src/client"}},{"name":"guildMemberSpeaking","description":"Emitted once a guild member changes speaking state.","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"The speaking state of the member","type":[[["Readonly","<"],["Speaking",">"]]]}],"meta":{"line":506,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\nnot much information can be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occurred in","type":[[["DMChannel"]],[["TextChannel"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":13,"file":"CHANNEL_PINS_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["DMChannel"]],[["GuildChannel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":8,"file":"CHANNEL_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":9,"file":"GUILD_BAN_ADD.js","path":"src/client/websocket/handlers"}},{"name":"guildCreate","description":"Emitted whenever the client joins a guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":23,"file":"GUILD_CREATE.js","path":"src/client/websocket/handlers"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":11,"file":"GUILD_MEMBER_ADD.js","path":"src/client/websocket/handlers"}},{"name":"guildMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":12,"file":"GUILD_MEMBER_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of guild members is received (all members come from the same guild).","params":[{"name":"members","description":"The members in the chunk","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"guild","description":"The guild related to the member chunk","type":[[["Guild"]]]}],"meta":{"line":15,"file":"GUILD_MEMBERS_CHUNK.js","path":"src/client/websocket/handlers"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Message"]]]}],"meta":{"line":8,"file":"MESSAGE_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"shardResume","description":"Emitted when a shard resumes successfully.","params":[{"name":"id","description":"The shard ID that resumed","type":[[["number"]]]},{"name":"replayedEvents","description":"The amount of replayed events","type":[[["number"]]]}],"meta":{"line":7,"file":"RESUMED.js","path":"src/client/websocket/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel.","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":34,"file":"TYPING_START.js","path":"src/client/websocket/handlers"}},{"name":"shardReady","description":"샤드가 준비되면 실행됩니다","params":[{"name":"id","description":"준비된 샤드 ID","type":[[["number"]]]},{"name":"unavailableGuilds","description":"복구중인 길드들의 ID 셋 (있는 경우)","nullable":true,"type":[[["Set","<"],["string",">"]]]}],"meta":{"line":190,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardDisconnect","description":"샤드의 웹소켓이 연결이 끊기고 다시 재연결하지 않을 때 실행됩니다.","params":[{"name":"event","description":"웹소켓 해제 이벤트","type":[[["CloseEvent"]]]},{"name":"id","description":"연결 해제된 샤드 ID","type":[[["number"]]]}],"meta":{"line":204,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardReconnecting","description":"샤드가 재연결이나 재인증을 시도할 때 실행됩니다.","params":[{"name":"id","description":"재연결할 샤드 ID","type":[[["number"]]]}],"meta":{"line":220,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"invalidated","description":"클라이언트 세션이 무효화될 때 실행됩니다.\n프로세스를 부드럽게 닫고 부트 루프를 방지하는 작업을 수행할 것으로 예상합니다.\n이 이벤트를 듣고 있는 경우 말이죠.","meta":{"line":302,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ready","description":"클라이언트가 준비되고, 일을 시작하면 실행됩니다.","meta":{"line":429,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardError","description":"샤드의 웹소켓에 연결 오류가 발생할 때마다 실행됩니다.","params":[{"name":"error","description":"발생한 에러","type":[[["Error"]]]},{"name":"shardID","description":"에러가 발생한 샤드","type":[[["number"]]]}],"meta":{"line":305,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"rateLimit","description":"Emitted when the client hits a rate limit while making a request","params":[{"name":"rateLimitInfo","description":"Object containing the rate limit info","type":[[["Object"]]]},{"name":"rateLimitInfo.timeout","description":"Timeout in ms","type":[[["number"]]]},{"name":"rateLimitInfo.limit","description":"Number of requests that can be made to this endpoint","type":[[["number"]]]},{"name":"rateLimitInfo.method","description":"HTTP method used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.path","description":"Path used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.route","description":"Route used for request that triggered this event","type":[[["string"]]]}],"meta":{"line":73,"file":"RequestHandler.js","path":"src/rest"}},{"name":"error","description":"Emitted when the client encounters an error.","params":[{"name":"error","description":"The error encountered","type":[[["Error"]]]}],"meta":{"line":201,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":33,"file":"Client.js","path":"src/client"}},{"name":"ClientVoiceManager","description":"Manages voice connections for the client","props":[{"name":"client","description":"The client that instantiated this voice manager","readonly":true,"type":[[["Client"]]],"meta":{"line":13,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":25,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"broadcasts","description":"Active voice broadcasts that have been created","type":[[["Array","<"],["VoiceBroadcast",">"]]],"meta":{"line":31,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"createBroadcast","description":"Creates a voice broadcast.","returns":[[["VoiceBroadcast"]]],"meta":{"line":38,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"joinChannel","description":"Sets up a request to join a voice channel.","access":"private","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":69,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":12,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"BroadcastDispatcher","description":"The class that sends voice packet data to the voice connection.","extends":[[["StreamDispatcher"]]],"implements":[[["VolumeInterface"]]],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":40,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":52,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":59,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","readonly":true,"type":[[["boolean"]]],"meta":{"line":145,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused in milliseconds","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","readonly":true,"type":[[["number"]]],"meta":{"line":180,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","readonly":true,"type":[[["number"]]],"meta":{"line":189,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":322,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', 48kbps will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":38,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pause","description":"Pauses playback","inherits":"StreamDispatcher#pause","inherited":true,"params":[{"name":"silence","description":"Whether to play silence while paused to prevent audio glitches","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":128,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","inherits":"StreamDispatcher#resume","inherited":true,"meta":{"line":161,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","inherits":"StreamDispatcher#setPLP","inherited":true,"params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":211,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","inherits":"StreamDispatcher#setFEC","inherited":true,"params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":222,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","inherits":"StreamDispatcher#setVolume","inherited":true,"implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","inherits":"StreamDispatcher#setVolumeDecibels","inherited":true,"implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","inherits":"StreamDispatcher#setVolumeLogarithmic","inherited":true,"implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":76,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":100,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":285,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":305,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeChange","description":"Emitted when the volume of this dispatcher changes.","params":[{"name":"oldVolume","description":"The old volume of this dispatcher","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this dispatcher","type":[[["number"]]]}],"meta":{"line":333,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":11,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\n```js\n// Obtained using:\nvoiceChannel.join().then(connection => {\n  // You can play a file or a stream here:\n  const dispatcher = connection.play('/home/hydrabolt/audio.mp3');\n});\n```","extends":[[["WritableStream"]]],"implements":[[["VolumeInterface"]]],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":40,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":52,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":59,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","readonly":true,"type":[[["boolean"]]],"meta":{"line":145,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused in milliseconds","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","readonly":true,"type":[[["number"]]],"meta":{"line":180,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","readonly":true,"type":[[["number"]]],"meta":{"line":189,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":322,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"pause","description":"Pauses playback","params":[{"name":"silence","description":"Whether to play silence while paused to prevent audio glitches","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":128,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","meta":{"line":161,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":199,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":211,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":222,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":76,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":100,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":285,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":305,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeChange","description":"Emitted when the volume of this dispatcher changes.","params":[{"name":"oldVolume","description":"The old volume of this dispatcher","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this dispatcher","type":[[["number"]]]}],"meta":{"line":333,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":33,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP client for a Voice Connection.","extends":[[["EventEmitter"]]],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":21,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":27,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordAddress","description":"The address of the Discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":33,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":45,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordPort","description":"The port of the Discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":67,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"methods":[{"name":"send","description":"Send a packet to the UDP client.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":76,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"meta":{"line":14,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket.","extends":[[["EventEmitter"]]],"access":"private","props":[{"name":"connection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":20,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":26,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"client","description":"The client of this voice WebSocket","readonly":true,"type":[[["Client"]]],"meta":{"line":37,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":77,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket.","meta":{"line":50,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":62,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"The data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":90,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":106,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onOpen","description":"Called whenever the WebSocket opens.","meta":{"line":118,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket.","params":[{"name":"event","description":"The message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":138,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket server is lost.","meta":{"line":149,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":158,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":167,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket.","params":[{"name":"interval","description":"The interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":224,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists.","meta":{"line":244,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet.","meta":{"line":256,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"events":[{"name":"ready","description":"Emitted once the voice WebSocket receives the ready packet.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":174,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":184,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"startSpeaking","description":"Emitted whenever a speaking packet is received.","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":202,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received.","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":210,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"warn","description":"Emitted whenever the voice WebSocket encounters a non-fatal error.","params":[{"name":"warn","description":"The warning","type":[[["string"]]]}],"meta":{"line":230,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"meta":{"line":14,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"AudioPlayer","description":"An Audio Player for a Voice Connection.","extends":[[["BasePlayer"]]],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that the player serves","type":[[["VoiceConnection"]]],"meta":{"line":17,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"broadcast","description":"The broadcast that the player serves","type":[[["VoiceBroadcast"]]],"meta":{"line":18,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":12,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}},{"name":"BasePlayer","description":"An Audio Player for a Voice Connection.","extends":[[["EventEmitter"]]],"access":"private","meta":{"line":16,"file":"BasePlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives audio packets from a voice connection.","methods":[{"name":"createStream","description":"Creates a new audio receiving stream. If a stream already exists for a user, then that stream will be returned\nrather than generating a new one.","params":[{"name":"user","description":"The user to start listening to.","type":[[["UserResolvable"]]]},{"name":"options","description":"Options.","type":[[["ReceiveStreamOptions"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":45,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"debug","description":"Emitted whenever there is a warning","params":[{"name":"error","description":"The error or message to debug","type":[[["Error"]],[["string"]]]}],"meta":{"line":20,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":16,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"PlayInterface","description":"An interface class to allow you to play audio over VoiceConnections and VoiceBroadcasts.","methods":[{"name":"play","description":"Play an audio resource.","examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.voice.createBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":62,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"meta":{"line":38,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"VolumeInterface","description":"An interface class for volume transformation.","extends":[[["EventEmitter"]]],"props":[{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"volumeChange","description":"Emitted when the volume of this interface changes.","params":[{"name":"oldVolume","description":"The old volume of this interface","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this interface","type":[[["number"]]]}],"meta":{"line":70,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"meta":{"line":10,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"VoiceBroadcast","description":"A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n\nExample usage:\n```js\nconst broadcast = client.voice.createBroadcast();\nbroadcast.play('./music.mp3');\n// Play \"music.mp3\" in all voice connections that the client is in\nfor (const connection of client.voice.connections.values()) {\n  connection.play(broadcast);\n}\n```","extends":[[["EventEmitter"]]],"implements":[[["PlayInterface"]]],"props":[{"name":"client","description":"The client that created the broadcast","type":[[["Client"]]],"meta":{"line":30,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"subscribers","description":"The subscribed StreamDispatchers of this broadcast","type":[[["Array","<"],["StreamDispatcher",">"]]],"meta":{"line":35,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current master dispatcher, if any. This dispatcher controls all that is played by subscribed dispatchers.","readonly":true,"nullable":true,"type":[[["BroadcastDispatcher"]]],"meta":{"line":44,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"methods":[{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nbroadcast.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nbroadcast.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nbroadcast.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["BroadcastDispatcher"]]],"meta":{"line":63,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"end","description":"Ends the broadcast, unsubscribing all subscribed channels and deleting the broadcast","meta":{"line":70,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"events":[{"name":"subscribe","description":"Emitted whenever a stream dispatcher subscribes to the broadcast.","params":[{"name":"subscriber","description":"The subscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":80,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"unsubscribe","description":"Emitted whenever a stream dispatcher unsubscribes to the broadcast.","params":[{"name":"dispatcher","description":"The unsubscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":97,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"meta":{"line":24,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"VoiceConnection","description":"Represents a connection to a guild's voice server.\n```js\n// Obtained using:\nvoiceChannel.join()\n  .then(connection => {\n\n  });\n```","extends":[[["EventEmitter"]]],"implements":[[["PlayInterface"]]],"props":[{"name":"voiceManager","description":"The voice manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":45,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":51,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"status","description":"The current status of the voice connection","type":[[["VoiceStatus"]]],"meta":{"line":57,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Our current speaking state","type":[[["Readonly","<"],["Speaking",">"]]],"meta":{"line":63,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["Object"]]],"meta":{"line":70,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":76,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC values to user IDs","access":"private","type":[[["Map","<"],["number",", "],["Snowflake",">"]]],"meta":{"line":103,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_speaking","description":"Tracks which users are talking","access":"private","type":[[["Map","<"],["Snowflake",", "],["Readonly","<"],["Speaking",">>"]]],"meta":{"line":110,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["Object"]]],"meta":{"line":117,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receiver","description":"The voice receiver of this connection","type":[[["VoiceReceiver"]]],"meta":{"line":123,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"client","description":"The client that instantiated this connection","readonly":true,"type":[[["Client"]]],"meta":{"line":131,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current stream dispatcher (if any)","readonly":true,"nullable":true,"type":[[["StreamDispatcher"]]],"meta":{"line":140,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"voice","description":"The voice state of this connection","type":[[["VoiceState"]]],"meta":{"line":170,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\", \"soundshare\" or \"none\".","params":[{"name":"value","description":"The new speaking state","type":[[["BitFieldResolvable"]]]}],"meta":{"line":148,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel.","access":"private","params":[{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":180,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the voice servers.","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":209,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection.","access":"private","params":[{"name":"sessionID","description":"The voice session ID","type":[[["string"]]]}],"meta":{"line":243,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"checkAuthenticated","description":"Checks whether the voice connection is authenticated.","access":"private","meta":{"line":268,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticateFailed","description":"Invoked when we fail to initiate a voice connection.","access":"private","params":[{"name":"reason","description":"The reason for failure","type":[[["string"]]]}],"meta":{"line":287,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"updateChannel","description":"Move to a different voice channel in the same guild.","access":"private","params":[{"name":"channel","description":"The channel to move to","type":[[["VoiceChannel"]]]}],"meta":{"line":313,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticate","description":"Attempts to authenticate to the voice server.","access":"private","meta":{"line":322,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnect","description":"Attempts to reconnect to the voice server (typically after a region change).","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"meta":{"line":333,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnects the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":350,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_disconnect","description":"Internally disconnects (doesn't send disconnect packet).","access":"private","meta":{"line":366,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"cleanup","description":"Cleans up after disconnect.","access":"private","meta":{"line":380,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection.","access":"private","meta":{"line":405,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onReady","description":"Invoked when the voice websocket is ready.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":436,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSessionDescription","description":"Invoked when a session description is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":453,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSpeaking","description":"Invoked when a speaking event is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":484,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.voice.createBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":62,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"debug","description":"Debug info from the connection.","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":79,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection.","params":[{"name":"warning","description":"The warning","type":[[["string"]],[["Error"]]]}],"meta":{"line":88,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"newSession","description":"Emitted when a new session ID is received.","meta":{"line":255,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticated","description":"Emitted when we successfully initiate a voice connection.","meta":{"line":273,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"failed","description":"Emitted when we fail to initiate a voice connection.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":291,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":298,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnecting","description":"Emitted when the voice connection is reconnecting (typically after a region change).","meta":{"line":339,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects.","meta":{"line":369,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\nthe connection will already be ready.","meta":{"line":459,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user changes speaking state.","params":[{"name":"user","description":"The user that has changed speaking state","type":[[["User"]]]},{"name":"speaking","description":"The speaking state of the user","type":[[["Readonly","<"],["Speaking",">"]]]}],"meta":{"line":490,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":38,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The webhook client.","extends":[[["BaseClient"]]],"implements":[[["Webhook"]]],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"웹훅의 ID","type":[[["Snowflake"]]]},{"name":"token","description":"웹훅의 토큰","type":[[["string"]]]},{"name":"options","description":"웹훅에 대한 옵션","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":48,"file":"Webhook.js","path":"src/structures"}},{"name":"_timeouts","description":"{@link BaseClient#setTimeout} 에서 설정된 시간 제한은 계속 유지됩니다}","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"{@link BaseClient#setInterval} 에서 설정된 간격은 계속 유지됩니다","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"{@link BaseClient#setImmediate} 에서 설정된 간격은 계속 유지됩니다","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"클라이언트가 인스턴스화된 옵션","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"클라이언트의 REST 매니저","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API 단축어","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"기본 클라이언트가 사용하는 모든 에셋들을 삭제합니다.","inherits":"BaseClient#destroy","inherited":true,"meta":{"line":65,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"클라이언트가 종료되면 자동으로 취소되는 setTimeout을 설정합니다.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"delay","description":"실행하기 전 기다릴 시간 (밀리초)","type":[[["number"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"타임아웃을 지웁니다.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"취소할 타임아웃","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"클라이언트가 종료되면 자동으로 취소되는 setInterval을 설정합니다.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"delay","description":"실행하는 사이의 기다리는 간격 (밀리초)","type":[[["number"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Interval을 초기화합니다","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"취소할 Interval","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"클라이언트가 종료되면 자동으로 취소되는 Immediate를 설정합니다.","inherits":"BaseClient#setImmediate","inherited":true,"params":[{"name":"fn","description":"실행할 함수","type":[[["function"]]]},{"name":"args","description":"함수의 인수","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Immediate을 초기화합니다.","inherits":"BaseClient#clearImmediate","inherited":true,"params":[{"name":"immediate","description":"취소할 Immediate","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":21,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketManager","description":"클라이언트의 웹소켓 매니저입니다.\n<info>이 클래스는 raw dispatch 이벤트를 전달합니다.\n더 알아보고 싶으시다면 {@link https://discordapp.com/developers/docs/topics/gateway}를 읽어보세요.</info>","extends":[[["EventEmitter"]]],"props":[{"name":"client","description":"이 웹소켓 매니저를 인스턴스화한 클라이언트","readonly":true,"type":[[["Client"]]],"meta":{"line":36,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"gateway","description":"해당 매니저가 사용하는 게이트웨이","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"totalShards","description":"매니저가 핸들하는 샤드의 개수","access":"private","type":[[["number"]]],"meta":{"line":55,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shards","description":"매니저가 핸들하는 모든 샤드 모음","type":[[["Collection","<"],["number",", "],["WebSocketShard",">"]]],"meta":{"line":61,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardQueue","description":"연결하거나, 재연결해야하는 샤드의 배열","access":"private","type":[[["Set","<"],["WebSocketShard",">"]]],"meta":{"line":63,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"packetQueue","description":"이 웹소켓 매니저가 준비되기 전에 대기열에 있는 이벤트의 배열","access":"private","type":[[["Array","<"],["object",">"]]],"meta":{"line":71,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"status","description":"웹소켓 매니저의 현재 상태","type":[[["number"]]],"meta":{"line":83,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroyed","description":"만약 매니저가 종료되었다면, 샤드가 다시 연결되는걸 방지할 수 있습니다.","access":"private","type":[[["boolean"]]],"meta":{"line":90,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"이 매니저가 현재 하나 이상의 샤드에 다시 연결하는 경우","access":"private","type":[[["boolean"]]],"meta":{"line":97,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sessionStartLimit","description":"클라이언트의 현재 세션 제한","access":"private","nullable":true,"type":[[["Object"]]],"props":[{"name":"total","description":"사용 가능한 총 개수","type":[[["number"]]]},{"name":"remaining","description":"남은 개수","type":[[["number"]]]},{"name":"reset_after","description":"제한이 재설정되는 시간 (밀리초)","type":[[["number"]]]}],"meta":{"line":107,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ping","description":"웹소켓 샤드들의 평균 지연시간","readonly":true,"type":[[["number"]]],"meta":{"line":115,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"debug","description":"디버그 메세지를 전송합니다.","access":"private","params":[{"name":"message","description":"디버그 메세지","type":[[["string"]]]},{"name":"shard","description":"이 메세지를 보낸 샤드(존재하는 경우)","optional":true,"nullable":true,"type":[[["WebSocketShard"]]]}],"meta":{"line":126,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connect","description":"해당 매니저를 게이트웨이에 연결합니다.","access":"private","async":true,"meta":{"line":134,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"createShards","description":"샤드의 생성을 핸들합니다.","access":"private","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":180,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnect","description":"해당 매니저의 재연결을 핸들합니다.","access":"private","params":[{"name":"skipLimit","description":"다시 연결할때 세션 제한 확인을 건너뛸지 여부","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":286,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"broadcast","description":"해당 매니저가 핸들하는 모든 샤드로 패킷을 전송합니다.","access":"private","params":[{"name":"packet","description":"전송할 패킷","type":[[["Object"]]]}],"meta":{"line":325,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroy","description":"이 매니저와 해당되는 샤드들을 삭제합니다.","access":"private","meta":{"line":333,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_handleSessionLimit","description":"더 이상 식별할 수 없는 경우 요구된 타임아웃을 핸들합니다.","access":"private","params":[{"name":"remaining","description":"현재 수행할 수 있는 남은 세션의 양","optional":true,"type":[[["number"]]]},{"name":"resetAfter","description":"식별 카운터가 재설정되는 시간","optional":true,"type":[[["number"]]]}],"async":true,"meta":{"line":347,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"handlePacket","description":"이 웹소켓 매니저가 준비되지 않은 경우 패킷을 처리하고 대기열에 넣습니다.","access":"private","params":[{"name":"packet","description":"핸들해야하는 패킷","optional":true,"type":[[["Object"]]]},{"name":"shard","description":"이 패킷을 핸들할 샤드","optional":true,"type":[[["WebSocketShard"]]]}],"returns":[[["boolean"]]],"meta":{"line":370,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"checkShardsReady","description":"클라이언트가 준비됨으로 표시될 준비가 되었는지 확인합니다.","access":"private","async":true,"meta":{"line":396,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"triggerClientReady","description":"클라이언트가 준비됨으로 표시되고 준비 이벤트를 전송합니다.","access":"private","meta":{"line":424,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":33,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"WebSocketShard","description":"샤드의 웹소켓 연결을 나타냅니다.","props":[{"name":"manager","description":"\"샤드의 웹소켓 매니저","type":[[["WebSocketManager"]]],"meta":{"line":29,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"id","description":"샤드의 ID","type":[[["number"]]],"meta":{"line":35,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"status","description":"샤드의 현재상태","type":[[["Status"]]],"meta":{"line":41,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sequence","description":"샤드의 현재 시퀀스","access":"private","type":[[["number"]]],"meta":{"line":48,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"closeSequence","description":"닫힌 뒤 샤드의 시퀀스","access":"private","type":[[["number"]]],"meta":{"line":55,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sessionID","description":"샤드의 현재 세션 ID","access":"private","type":[[["string"]]],"meta":{"line":62,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ping","description":"샤드의 이전 하트비트 지연시간","type":[[["number"]]],"meta":{"line":68,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"lastPingTimestamp","description":"지연시간이 마지막으로 전송된 시간 (타임 스탬프).","access":"private","type":[[["number"]]],"meta":{"line":75,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"lastHeartbeatAcked","description":"하트 비트 ACK를 다시받은 경우. 좀비 연결을 식별하는 데 사용","access":"private","type":[[["boolean"]]],"meta":{"line":82,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"methods":[{"name":"debug","description":"디버그 이벤트가 발생하면, 실행됩니다.","access":"private","params":[{"name":"message","description":"디버그 메세지","type":[[["string"]]]}],"meta":{"line":159,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"connect","description":"샤드를 게이트웨이에 연결합니다.","access":"private","returns":{"types":[[["Promise","<"],["void",">"]]],"description":"샤드가 성공적으로 켜질 경우, 리졸브하고\n연결할 수 없을 때는 리젝트하는 프로미스(Promise)"},"meta":{"line":169,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onOpen","description":"연결이 게이트웨이를 열 때마다 실행됩니다.","access":"private","meta":{"line":260,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onMessage","description":"메세지가 수신될 때 실행됩니다.","access":"private","params":[{"name":"event","description":"수신된 이벤트","type":[[["MessageEvent"]]]}],"meta":{"line":270,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onError","description":"웹소켓에 에러가 발생할 경우 실행됩니다.","access":"private","params":[{"name":"event","description":"발생한 에러","type":[[["ErrorEvent"]]]}],"meta":{"line":301,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onClose","description":"게이트웨이에 대한 연결이 닫힐 때마다 실행됩니다.","access":"private","params":[{"name":"event","description":"수신된 닫기 이벤트","type":[[["CloseEvent"]]]}],"meta":{"line":334,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onPacket","description":"패킷이 수신될 때 실행됩니다.","access":"private","params":[{"name":"packet","description":"수신된 패킷","type":[[["Object"]]]}],"meta":{"line":364,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"checkReady","description":"샤드가 준비됬다고 표시될 수 있는지 확인합니다.","access":"private","meta":{"line":448,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"setHelloTimeout","description":"Sets the HELLO packet timeout.","access":"private","params":[{"name":"time","description":"If set to -1, it will clear the hello timeout timeout","optional":true,"type":[[["number"]]]}],"meta":{"line":488,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"setHeartbeatTimer","description":"샤드의 하트비트 타이머를 설정합니다.","access":"private","params":[{"name":"time","description":"간격을 지우는 경우 -1, 다른 숫자는 간격을 설정합니다.","type":[[["number"]]]}],"meta":{"line":509,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sendHeartbeat","description":"웹소켓에 하트비트를 보냅니다.\n만약 이전에 이 샤드가 하트비트를 받지 못했다면, 삭제하고 재연결합니다.","access":"private","params":[{"name":"tag","description":"이 하트비트를 보낸 원인","optional":true,"default":"'HeartbeatTimer'","type":[[["string"]]]},{"name":"ignoreHeartbeatAck","description":"하트비트를 강제로 보내야하는지 여부","optional":true,"type":[[["boolean"]]]}],"meta":{"line":531,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ackHeartbeat","description":"심장 박동을 인정합니다.","access":"private","meta":{"line":559,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identify","description":"연결에서 클라이언트를 식별합니다.","access":"private","returns":[[["void"]]],"meta":{"line":571,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identifyNew","description":"게이트웨이의 새 연결로 식별합니다.","access":"private","meta":{"line":579,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identifyResume","description":"게이트웨이의 세션을 다시 시작합니다.","access":"private","meta":{"line":603,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"send","description":"게이트웨이로 보낼 대기열에 패킷을 추가합니다.\n<warn>이 메서드를 사용한다면, \n모든 [Payload](https://discordapp.com/developers/docs/topics/gateway#commands-and-events-gateway-commands)를 포함하도록 합니다.\n만약 당신이 무엇을 하고 있는지 모른다면 이 메서드를 사용하지 마세요.</warn>","params":[{"name":"data","description":"전송할 전체 패킷","type":[[["Object"]]]},{"name":"important","description":"이 패킷을 대기열에 먼저 추가해야 하는 여부","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":631,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"_send","description":"대기열을 무시하고 데이터를 보냅니다.","access":"private","params":[{"name":"data","description":"전송할 패킷","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":642,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"processQueue","description":"현재 웹소켓 대기열을 처리합니다.","access":"private","returns":[[["void"]]],"meta":{"line":659,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"destroy","description":"이 샤드를 삭제하고 웹소켓 연결을 닫습니다.","access":"private","params":[{"name":"options","description":"Options for destroying the shard","optional":true,"default":"{ closeCode: 1000, reset: false, emit: true, log: true }","type":[[["Object"]]]}],"meta":{"line":681,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"_cleanupConnection","description":"웹소켓 연결 리스너를 정리합니다.","access":"private","meta":{"line":745,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"_emitDestroyed","description":"DESTROYED 이벤트를 샤드에서 실행합니다.","access":"private","meta":{"line":753,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"events":[{"name":"close","description":"샤드의 웹소켓이 닫힐 때 실행됩니다.","params":[{"name":"event","description":"수신된 이벤트","type":[[["CloseEvent"]]]}],"meta":{"line":350,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ready","description":"샤드가 READY 페이로드 수신 후 길드를 대기 중일 때 실행됩니다.","meta":{"line":372,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"resumed","description":"샤드가 다시 성공적으로 재개될 때 실행됩니다.","meta":{"line":386,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"allReady","description":"샤드가 완전히 준비되었을 때 실행됩니다.\n이 이벤트는 다음과 같은 경우에 발생합니다.\n* 모든 길드가 이 샤드에 의해 수신될 때\n* 준비 시간 초과가 만료되었으며 일부 길드는 사용할 수 없음","params":[{"name":"unavailableGuilds","description":"복구중인 길드 셋 (존재하는 경우)","nullable":true,"type":[[["Set","<"],["string",">"]]]}],"meta":{"line":459,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"destroyed","description":"샤드가 파괴되었지만 WebSocket 연결이 존재하지 않을 때 실행됩니다.","meta":{"line":754,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"meta":{"line":22,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"BaseManager","description":"데이터 모델의 API 메소드를 관리하고 캐시에 저장합니다.","abstract":true,"props":[{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}},{"name":"cache","description":"데이터 모델에 귀속된 캐시","type":[[["Collection"]]],"meta":{"line":40,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"전달받은 ID 또는 인스턴스를 매니저 캐시에서 찾아 인스턴스로 돌려줍니다.","params":[{"name":"idOrInstance","description":"매니저가 관리하는 캐시 데이터의 ID 또는 인스턴스","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"찾아낸 데이터 인스턴스","nullable":true},"meta":{"line":59,"file":"BaseManager.js","path":"src/managers"}},{"name":"resolveID","description":"전달받은 ID 또는 인스턴스를 매니저 캐시에서 찾아 인스턴스 ID로 돌려줍니다.","params":[{"name":"idOrInstance","description":"매니저가 관리하는 캐시 데이터의 ID 또는 인스턴스","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":70,"file":"BaseManager.js","path":"src/managers"}}],"meta":{"line":11,"file":"BaseManager.js","path":"src/managers"}},{"name":"ChannelManager","description":"클라이언트에 귀속된 채널 매니저","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"채널들의 캐시","type":[[["Collection","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":16,"file":"ChannelManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"채널로 리졸브 가능한 데이터를 채널 객체 데이터로 리졸브합니다.","params":[{"name":"channel","description":"리졸드 할 채널 데이터","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":55,"file":"ChannelManager.js","path":"src/managers"}},{"name":"resolveID","description":"채널로 리졸브 가능한 데이터를 채널 ID 문자열로 리졸브합니다.","params":[{"name":"channel","description":"리졸브 할 채널 데이터","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":64,"file":"ChannelManager.js","path":"src/managers"}},{"name":"fetch","description":"디스코드로부터 채널을 불러오거나 캐시 데이터에 이미 있는 경우 캐시에서 불러옵니다.","examples":["// 채널을 ID로 불러옵니다\nclient.channels.fetch('222109930545610754')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"id","description":"채널 ID","type":[[["Snowflake"]]]},{"name":"cache","description":"불러온 채널의 캐싱 여부","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":84,"file":"ChannelManager.js","path":"src/managers"}}],"meta":{"line":12,"file":"ChannelManager.js","path":"src/managers"}},{"name":"GuildChannelManager","description":"길드 채널들의 API 메소드를 관리하고 캐시에 저장합니다.","extends":[[["BaseManager"]]],"props":[{"name":"guild","description":"매니저에 귀속된 길드","type":[[["Guild"]]],"meta":{"line":20,"file":"GuildChannelManager.js","path":"src/managers"}},{"name":"cache","description":"이 매니저에 귀속된 길드 채널 캐시","type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":23,"file":"GuildChannelManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"길드 채널로 리졸브 가능한 데이터를 길드 채널 객체 데이터로 리졸브합니다.","params":[{"name":"channel","description":"리졸브 할 길드 채널 데이터","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":43,"file":"GuildChannelManager.js","path":"src/managers"}},{"name":"resolveID","description":"길드 채널로 리졸브 가능한 데이터를 길드 채널 ID 문자열로 리졸브합니다.","params":[{"name":"channel","description":"리졸브 할 길드 채널 데이터","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":52,"file":"GuildChannelManager.js","path":"src/managers"}},{"name":"create","description":"길드에 새로운 채널을 생성합니다.","examples":["//새로운 텍스트 채널을 생성합니다\nguild.channels.create('새로운-채팅방', { reason: '채팅 폭주로 인한 탈주' })\n  .then(console.log)\n  .catch(console.error);","// 새로운 채널을 생성하고 아래의 권한으로 덮어씌웁니다\nguild.channels.create('새로운-음성채널', {\n  type: 'voice',\n  permissionOverwrites: [\n     {\n       id: message.author.id,\n       deny: ['VIEW_CHANNEL'],\n    },\n  ],\n})"],"params":[{"name":"name","description":"새로운 채널의 이름","type":[[["string"]]]},{"name":"options","description":"옵션","optional":true,"type":[[["Object"]]]},{"name":"options.type","description":"새로운 채널의 타입 (text, voice, category)","optional":true,"default":"'text'","type":[[["string"]]]},{"name":"options.topic","description":"새로운 채널의 주제(토픽)","optional":true,"type":[[["string"]]]},{"name":"options.nsfw","description":"새로운 채널의 nsfw 여부","optional":true,"type":[[["boolean"]]]},{"name":"options.bitrate","description":"새로운 채널의 비트레이트를 bit 단위로 설정 (음성 채널만 가능)","optional":true,"type":[[["number"]]]},{"name":"options.userLimit","description":"새로운 채널에 접속 허용된 유저 제한 수 (음성 채널 가능)","optional":true,"type":[[["number"]]]},{"name":"options.parent","description":"새로운 채널의 부모 채널(카테고리)","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"options.permissionOverwrites","description":"덮어씌울 새로운 채널의 권한","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.position","description":"새로운 채널의 위치","optional":true,"type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"새로운 채널의 레이트리밋(슬로우모드)","optional":true,"type":[[["number"]]]},{"name":"options.reason","description":"새로운 채널을 생성하는 이유","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":94,"file":"GuildChannelManager.js","path":"src/managers"}}],"meta":{"line":13,"file":"GuildChannelManager.js","path":"src/managers"}},{"name":"GuildEmojiManager","description":"길드 이모지들의 API 메소드를 관리하고 캐시에 저장합니다.","extends":[[["BaseManager"]]],"props":[{"name":"guild","description":"이 매니저에 귀속된 길드","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"cache","description":"이 매니저에 귀속된 길드 이모지 캐시","type":[[["Collection","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":24,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"create","description":"길드에 새로운 커스텀 이모지를 생성합니다.","examples":["// url에서 이모지를 생성합니다\nguild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n  .then(emoji => console.log(`${emoji.name}의 이름을 가진 이모지를 생성 했습니다!`))\n  .catch(console.error);","// 해당 컴퓨터의 파일에서 이모지를 생성합니다\nguild.emojis.create('./memes/banana.png', 'banana')\n  .then(emoji => console.log(`${emoji.name}의 이름을 가진 이모지를 생성 했습니다!`))\n  .catch(console.error);"],"params":[{"name":"attachment","description":"이모지의 사진","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"이모지의 이름","type":[[["string"]]]},{"name":"options","description":"옵션","optional":true,"type":[[["Object"]]]},{"name":"options.roles","description":"이 이모지를 사용할수 있는 역할들을 제한","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.reason","description":"이모지를 추가하는 이유","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"},"meta":{"line":53,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"resolve","description":"길드 이모지로 리졸브 가능한 데이터를 길드 이모지 객체 데이터로 리졸브합니다.","params":[{"name":"emoji","description":"리졸브 할 길드 이모지 데이터","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["GuildEmoji"]]],"nullable":true},"meta":{"line":90,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"resolveID","description":"길드 이모지로 리졸브 가능한 데이터를 길드 이모지 ID 문자열로 리졸브합니다.","params":[{"name":"emoji","description":"리졸브 할 길드 이모지 데이터","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":100,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"resolveIdentifier","description":"이모지로 리졸브 가능한 데이터를 이모지 식별자로 리졸브합니다","params":[{"name":"emoji","description":"리졸브 할 이모지 데이터","type":[[["EmojiIdentifierResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":117,"file":"GuildEmojiManager.js","path":"src/managers"}}],"meta":{"line":15,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"GuildEmojiRoleManager","description":"역할들에 귀속된 이모지의 API 메소드를 관리하고 캐시에 저장합니다.","props":[{"name":"emoji","description":"이 매니저에 귀속된 이모지","type":[[["GuildEmoji"]]],"meta":{"line":15,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"guild","description":"The guild belonging to this manager","type":[[["Guild"]]],"meta":{"line":20,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"_roles","description":"길드 이모지를 사용 가능한 역할 컬렉션","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":35,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"cache","description":"이 매니저에 귀속된 역할 캐시","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":44,"file":"GuildEmojiRoleManager.js","path":"src/managers"}}],"methods":[{"name":"add","description":"역할 또는 역할들을 이 이모지를 사용 가능한 역할 목록에 추가합니다.","params":[{"name":"roleOrRoles","description":"추가할 역할 또는 역할들","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":53,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"remove","description":"역할 또는 역할들을 이 이모지를 사용 가능한 역할 목록에서 제거합니다.","params":[{"name":"roleOrRoles","description":"제거할 역할 또는 역할들","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":71,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"set","description":"이 이모지를 사용 가능한 역할 목록을 덮어씌웁니다.","examples":["// 한 역할만 이 이모지를 사용 가능하도록 덮어씌웁니다\nguildEmoji.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// 이모지를 사용 가능한 역할 목록에서 모든 역할들을 제거합니다\nguildEmoji.roles.set([])\n   .then(console.log)\n   .catch(console.error);"],"params":[{"name":"roles","description":"덮어씌울 역할들 또는 역할들 ID","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":99,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"_patch","description":"타입 검사를 무시하고 역할 목록을 캐시에 귀속합니다","access":"private","params":[{"name":"roles","description":"새로운 역할들","type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":114,"file":"GuildEmojiRoleManager.js","path":"src/managers"}}],"meta":{"line":10,"file":"GuildEmojiRoleManager.js","path":"src/managers"}},{"name":"GuildManager","description":"길드들의 API 메소드를 관리하고 캐시에 저장합니다.","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"이 매니저에 귀속된 길드 캐시","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":29,"file":"GuildManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"길드로 리졸브 가능한 데이터를 길드 객체 데이터로 리졸브합니다.","params":[{"name":"guild","description":"리졸브 할 길드 데이터","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":85,"file":"GuildManager.js","path":"src/managers"}},{"name":"resolveID","description":"길드로 리졸브 가능한 데이터를 길드 ID 문자열로 리졸브합니다.","params":[{"name":"guild","description":"리졸브 할 길드 데이터","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":106,"file":"GuildManager.js","path":"src/managers"}},{"name":"create","description":"길드를 생성합니다.\n<warn>이 기능은 서버 수가 10 미만인 봇에게만 제공됩니다.</warn>","params":[{"name":"name","description":"길드의 이름","type":[[["string"]]]},{"name":"options","description":"생성을 위한 옵션","optional":true,"type":[[["Object"]]]},{"name":"options.channels","description":"이 길드의 채널들","optional":true,"type":[[["Array","<"],["PartialChannelData",">"]]]},{"name":"options.defaultMessageNotifications","description":"기본 메세지 알림 설정","optional":true,"type":[[["DefaultMessageNotifications"]]]},{"name":"options.explicitContentFilter","description":"유해 미디어 컨텐츠 필터 설정","optional":true,"type":[[["ExplicitContentFilterLevel"]]]},{"name":"options.icon","description":"길드의 아이콘","optional":true,"default":null,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.region","description":"길드의 위치 (기본값: 봇 서버에서 가장 가까운 위치)","optional":true,"type":[[["string"]]]},{"name":"options.roles","description":"이 길드의 역할들\n(배열의 첫 요소는 everyone 역할을 설정하기 위해서 사용됩니다.)","optional":true,"type":[[["Array","<"],["PartialRoleData",">"]]]},{"name":"options.verificationLevel","description":"길드의 보안 수준","optional":true,"type":[[["VerificationLevel"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Guild",">"]]],"description":"생성된 길드"},"meta":{"line":142,"file":"GuildManager.js","path":"src/managers"}}],"meta":{"line":25,"file":"GuildManager.js","path":"src/managers"}},{"name":"GuildMemberManager","description":"서버 유저들의 API 메소드를 관리하고 캐시에 저장합니다.","extends":[[["BaseManager"]]],"props":[{"name":"guild","description":"이 매니저에 귀속된 길드","type":[[["Guild"]]],"meta":{"line":20,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"cache","description":"이 매니저에 귀속된 서버 유저 캐시","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":23,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"서버 유저로 리졸브 가능한 데이터를 길드 채널 객체 데이터로 리졸브합니다.","params":[{"name":"member","description":"리졸브 할 서버 유저 데이터","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":45,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"resolveID","description":"서버 유저로 리졸브 가능한 데이터를 서버 유저 ID 문자열로 리졸브합니다.","params":[{"name":"member","description":"리졸브 할 서버 유저 데이터","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":58,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"fetch","description":"디스코드에서 서버 유저를 불러옵니다 (오프라인인 경우 포함).","examples":["// Fetch all members from a guild\nguild.members.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member\nguild.members.fetch('66564597481480192')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member without caching\nguild.members.fetch({ user, cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch by an array of users including their presences\nguild.members.fetch({ user: ['66564597481480192', '191615925336670208'], withPresences: true })\n  .then(console.log)\n  .catch(console.error);","// Fetch by query\nguild.members.fetch({ query: 'hydra', limit: 1 })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"If a UserResolvable, the user to fetch.\nIf undefined, fetches all members.\nIf a query, it limits the results to users with similar usernames.","optional":true,"type":[[["UserResolvable"]],[["FetchMemberOptions"]],[["FetchMembersOptions"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildMember",">>"]]],"meta":{"line":114,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"prune","description":"Prunes members from the guild based on how long they have been inactive.\n<info>It's recommended to set options.count to `false` for large guilds.</info>","examples":["// See how many members will be pruned\nguild.members.prune({ dry: true })\n  .then(pruned => console.log(`This will prune ${pruned} people!`))\n  .catch(console.error);","// Actually prune the members\nguild.members.prune({ days: 1, reason: 'too many people!' })\n  .then(pruned => console.log(`I just pruned ${pruned} people!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Prune options","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of inactivity required to kick","optional":true,"default":7,"type":[[["number"]]]},{"name":"options.dry","description":"Get number of users that will be kicked, without actually kicking them","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.count","description":"Whether or not to return the number of users that have been kicked.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for this prune","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["number","|"],["null",")>"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":150,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// Ban a user by ID (or with a user/guild member object)\nguild.members.ban('84484653687267328')\n  .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["GuildMember","|"],["User","|"],["Snowflake",")>"]]],"description":"Result object will be resolved as specifically as possible.\nIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\nbe resolved, the user ID will be the result."},"meta":{"line":179,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"unban","description":"Unbans a user from the guild.","examples":["// Unban a user by ID (or with a user/guild member object)\nguild.members.unban('84484653687267328')\n  .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":208,"file":"GuildMemberManager.js","path":"src/managers"}}],"meta":{"line":14,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"GuildMemberRoleManager","description":"Manages API methods for roles of a GuildMember and stores their cache.","props":[{"name":"member","description":"The GuildMember this manager belongs to","type":[[["GuildMember"]]],"meta":{"line":15,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"guild","description":"The Guild this manager belongs to","type":[[["Guild"]]],"meta":{"line":20,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"_roles","description":"The filtered collection of roles of the member","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":30,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"cache","description":"The roles of this member","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":40,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"hoist","description":"The role of the member used to hoist them in a separate category in the users list","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":49,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"color","description":"The role of the member used to set their color","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":60,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"highest","description":"The role of the member with the highest position","readonly":true,"type":[[["Role"]]],"meta":{"line":71,"file":"GuildMemberRoleManager.js","path":"src/managers"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the member.","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for adding the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":81,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"remove","description":"Removes a role (or multiple roles) from the member.","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for removing the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":115,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"set","description":"Sets the roles applied to the member.","examples":["// Set the member's roles to a single role\nguildMember.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all the roles from a member\nguildMember.roles.set([])\n  .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for applying the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":155,"file":"GuildMemberRoleManager.js","path":"src/managers"}}],"meta":{"line":10,"file":"GuildMemberRoleManager.js","path":"src/managers"}},{"name":"MessageManager","description":"Manages API methods for Messages and holds their cache.","extends":[[["BaseManager"]]],"props":[{"name":"channel","description":"The channel that the messages belong to","type":[[["TextBasedChannel"]]],"meta":{"line":19,"file":"MessageManager.js","path":"src/managers"}},{"name":"cache","description":"The cache of Messages","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":22,"file":"MessageManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"fetch","description":"Gets a message, or messages, from this channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","examples":["// Get message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Get messages\nchannel.messages.fetch({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The ID of the message to fetch, or query parameters.","optional":true,"type":[[["Snowflake"]],[["ChannelLogsQueryOptions"]]]},{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Message",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":65,"file":"MessageManager.js","path":"src/managers"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","examples":["// Get pinned messages\nchannel.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":81,"file":"MessageManager.js","path":"src/managers"}},{"name":"resolve","description":"Resolves a MessageResolvable to a Message object.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Message"]]],"nullable":true},"meta":{"line":96,"file":"MessageManager.js","path":"src/managers"}},{"name":"resolveID","description":"Resolves a MessageResolvable to a Message ID string.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":105,"file":"MessageManager.js","path":"src/managers"}},{"name":"delete","description":"Deletes a message, even if it's not cached.","params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":120,"file":"MessageManager.js","path":"src/managers"}}],"meta":{"line":13,"file":"MessageManager.js","path":"src/managers"}},{"name":"PresenceManager","description":"Manages API methods for Presences and holds their cache.","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"The cache of Presences","type":[[["Collection","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":15,"file":"PresenceManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a PresenceResolvable to a Presence object.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Presence"]]],"nullable":true},"meta":{"line":39,"file":"PresenceManager.js","path":"src/managers"}},{"name":"resolveID","description":"Resolves a PresenceResolvable to a Presence ID string.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":51,"file":"PresenceManager.js","path":"src/managers"}}],"meta":{"line":11,"file":"PresenceManager.js","path":"src/managers"}},{"name":"ReactionManager","description":"Manages API methods for reactions and holds their cache.","extends":[[["BaseManager"]]],"props":[{"name":"message","description":"The message that this manager belongs to","type":[[["Message"]]],"meta":{"line":18,"file":"ReactionManager.js","path":"src/managers"}},{"name":"cache","description":"The reaction cache of this manager","type":[[["Collection","<"],["Snowflake",", "],["MessageReaction",">"]]],"meta":{"line":25,"file":"ReactionManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a MessageReactionResolvable to a MessageReaction object.","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["MessageReaction"]]],"nullable":true},"meta":{"line":38,"file":"ReactionManager.js","path":"src/managers"}},{"name":"resolveID","description":"Resolves a MessageReactionResolvable to a MessageReaction ID string.","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"ReactionManager.js","path":"src/managers"}},{"name":"removeAll","description":"Removes all reactions from a message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":60,"file":"ReactionManager.js","path":"src/managers"}}],"meta":{"line":11,"file":"ReactionManager.js","path":"src/managers"}},{"name":"ReactionUserManager","description":"Manages API methods for users who reacted to a reaction and stores their cache.","extends":[[["BaseManager"]]],"props":[{"name":"reaction","description":"The reaction that this manager belongs to","type":[[["MessageReaction"]]],"meta":{"line":18,"file":"ReactionUserManager.js","path":"src/managers"}},{"name":"cache","description":"The cache of this manager","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":21,"file":"ReactionUserManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"fetch","description":"Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.","params":[{"name":"options","description":"Options for fetching the users","optional":true,"type":[[["Object"]]]},{"name":"options.limit","description":"The maximum amount of users to fetch, defaults to 100","optional":true,"default":100,"type":[[["number"]]]},{"name":"options.before","description":"Limit fetching users to those with an id lower than the supplied id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.after","description":"Limit fetching users to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]],"meta":{"line":35,"file":"ReactionUserManager.js","path":"src/managers"}},{"name":"remove","description":"Removes a user from this reaction.","params":[{"name":"user","description":"The user to remove the reaction of","optional":true,"default":"this.reaction.message.client.user","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":54,"file":"ReactionUserManager.js","path":"src/managers"}},{"name":"resolve","description":"전달받은 ID 또는 인스턴스를 매니저 캐시에서 찾아 인스턴스로 돌려줍니다.","inherits":"BaseManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"매니저가 관리하는 캐시 데이터의 ID 또는 인스턴스","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"찾아낸 데이터 인스턴스","nullable":true},"meta":{"line":59,"file":"BaseManager.js","path":"src/managers"}},{"name":"resolveID","description":"전달받은 ID 또는 인스턴스를 매니저 캐시에서 찾아 인스턴스 ID로 돌려줍니다.","inherits":"BaseManager#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"매니저가 관리하는 캐시 데이터의 ID 또는 인스턴스","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":70,"file":"BaseManager.js","path":"src/managers"}}],"meta":{"line":12,"file":"ReactionUserManager.js","path":"src/managers"}},{"name":"RoleManager","description":"Manages API methods for roles and stores their cache.","extends":[[["BaseManager"]]],"props":[{"name":"guild","description":"The guild belonging to this manager","type":[[["Guild"]]],"meta":{"line":19,"file":"RoleManager.js","path":"src/managers"}},{"name":"cache","description":"The role cache of this manager","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":22,"file":"RoleManager.js","path":"src/managers"}},{"name":"everyone","description":"The `@everyone` role of the guild","readonly":true,"type":[[["Role"]]],"meta":{"line":131,"file":"RoleManager.js","path":"src/managers"}},{"name":"highest","description":"The role with the highest position in the cache","readonly":true,"type":[[["Role"]]],"meta":{"line":140,"file":"RoleManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"fetch","description":"Obtains one or more roles from Discord, or the role cache if they're already available.","examples":["// Fetch all roles from the guild\nmessage.guild.roles.fetch()\n  .then(roles => console.log(`There are ${roles.cache.size} roles.`))\n  .catch(console.error);","// Fetch a single role\nmessage.guild.roles.fetch('222078108977594368')\n  .then(role => console.log(`The role color is: ${role.color}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID or IDs of the role(s)","optional":true,"type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new roles objects if it weren't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<("],["Role","|"],["RoleManager",")>"]]],"meta":{"line":48,"file":"RoleManager.js","path":"src/managers"}},{"name":"resolve","description":"Resolves a RoleResolvable to a Role object.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Role"]]],"nullable":true},"meta":{"line":67,"file":"RoleManager.js","path":"src/managers"}},{"name":"resolveID","description":"Resolves a RoleResolvable to a role ID string.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":76,"file":"RoleManager.js","path":"src/managers"}},{"name":"create","description":"Creates a new role in the guild with given information.\n<warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>","examples":["// Create a new role\nguild.roles.create()\n  .then(console.log)\n  .catch(console.error);","// Create a new role with data and a reason\nguild.roles.create({\n  data: {\n    name: 'Super Cool People',\n    color: 'BLUE',\n  },\n  reason: 'we needed a role for Super Cool People',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.data","description":"The data to create the role with","optional":true,"type":[[["RoleData"]]]},{"name":"options.reason","description":"Reason for creating this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":109,"file":"RoleManager.js","path":"src/managers"}}],"meta":{"line":13,"file":"RoleManager.js","path":"src/managers"}},{"name":"UserManager","description":"Manages API methods for users and stores their cache.","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"The cache of this manager","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":17,"file":"UserManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a UserResolvable to a User object.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":37,"file":"UserManager.js","path":"src/managers"}},{"name":"resolveID","description":"Resolves a UserResolvable to a user ID string.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":48,"file":"UserManager.js","path":"src/managers"}},{"name":"fetch","description":"Obtains a user from Discord, or the user cache if it's already available.","params":[{"name":"id","description":"ID of the user","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new user object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":60,"file":"UserManager.js","path":"src/managers"}}],"meta":{"line":13,"file":"UserManager.js","path":"src/managers"}},{"name":"VoiceStateManager","description":"Manages API methods for VoiceStates and stores their cache.","extends":[[["BaseManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","type":[[["Guild"]]],"meta":{"line":17,"file":"VoiceStateManager.js","path":"src/managers"}},{"name":"cache","description":"The cache of this manager","type":[[["Collection","<"],["Snowflake",", "],["VoiceState",">"]]],"meta":{"line":20,"file":"VoiceStateManager.js","path":"src/managers"}},{"name":"holds","description":"이 매니저가 귀속한 데이터 구조","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":13,"file":"BaseManager.js","path":"src/managers"}},{"name":"client","description":"이 매니저와 귀속된 클라이언트 인스턴스","readonly":true,"type":[[["Client"]]],"meta":{"line":22,"file":"BaseManager.js","path":"src/managers"}},{"name":"cacheType","description":"이 매니저의 컬렉션 타입","type":[[["Collection"]]],"meta":{"line":34,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"resolve","description":"전달받은 ID 또는 인스턴스를 매니저 캐시에서 찾아 인스턴스로 돌려줍니다.","inherits":"BaseManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"매니저가 관리하는 캐시 데이터의 ID 또는 인스턴스","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"찾아낸 데이터 인스턴스","nullable":true},"meta":{"line":59,"file":"BaseManager.js","path":"src/managers"}},{"name":"resolveID","description":"전달받은 ID 또는 인스턴스를 매니저 캐시에서 찾아 인스턴스 ID로 돌려줍니다.","inherits":"BaseManager#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"매니저가 관리하는 캐시 데이터의 ID 또는 인스턴스","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":70,"file":"BaseManager.js","path":"src/managers"}}],"meta":{"line":11,"file":"VoiceStateManager.js","path":"src/managers"}},{"name":"DiscordAPIError","description":"Represents an error from the Discord API.","extends":[[["Error"]]],"props":[{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":18,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":24,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned by Discord","type":[[["number"]]],"meta":{"line":30,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"httpStatus","description":"The HTTP status code","type":[[["number"]]],"meta":{"line":36,"file":"DiscordAPIError.js","path":"src/rest"}}],"methods":[{"name":"flattenErrors","description":"Flattens an errors object returned from the API into an array.","scope":"static","access":"private","params":[{"name":"obj","description":"Discord errors object","type":[[["Object"]]]},{"name":"key","description":"Used internally to determine key names of nested fields","optional":true,"type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":46,"file":"DiscordAPIError.js","path":"src/rest"}}],"meta":{"line":8,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"HTTPError","description":"Represents a HTTP error from a request.","extends":[[["Error"]]],"props":[{"name":"name","description":"The name of the error","type":[[["string"]]],"meta":{"line":15,"file":"HTTPError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned from the request","type":[[["number"]]],"meta":{"line":21,"file":"HTTPError.js","path":"src/rest"}},{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":27,"file":"HTTPError.js","path":"src/rest"}},{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":33,"file":"HTTPError.js","path":"src/rest"}}],"meta":{"line":8,"file":"HTTPError.js","path":"src/rest"}},{"name":"Shard","description":"A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\nan instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\nspawn a new one to replace it as necessary.","extends":[[["EventEmitter"]]],"construct":{"name":"Shard","params":[{"name":"manager","description":"Manager that is creating this shard","type":[[["ShardingManager"]]]},{"name":"id","description":"ID of this shard","type":[[["number"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":31,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard in the manager","type":[[["number"]]],"meta":{"line":37,"file":"Shard.js","path":"src/sharding"}},{"name":"args","description":"Arguments for the shard's process (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":43,"file":"Shard.js","path":"src/sharding"}},{"name":"execArgv","description":"Arguments for the shard's process executable (only when {@link ShardingManager#mode} is `process`)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":49,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"Environment variables for the shard's process, or workerData for the shard's worker","type":[[["Object"]]],"meta":{"line":55,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Whether the shard's {@link Client} is ready","type":[[["boolean"]]],"meta":{"line":66,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard (if {@link ShardingManager#mode} is `process`)","nullable":true,"type":[[["ChildProcess"]]],"meta":{"line":72,"file":"Shard.js","path":"src/sharding"}},{"name":"worker","description":"Worker of the shard (if {@link ShardingManager#mode} is `worker`)","nullable":true,"type":[[["Worker"]]],"meta":{"line":78,"file":"Shard.js","path":"src/sharding"}},{"name":"_evals","description":"Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":85,"file":"Shard.js","path":"src/sharding"}},{"name":"_fetches","description":"Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":92,"file":"Shard.js","path":"src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","access":"private","type":[[["function"]]],"meta":{"line":99,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process or creates a worker thread for the shard.\n<warn>You should not need to call this manually.</warn>","params":[{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":109,"file":"Shard.js","path":"src/sharding"}},{"name":"kill","description":"Immediately kills the shard's process/worker and does not restart it.","meta":{"line":174,"file":"Shard.js","path":"src/sharding"}},{"name":"respawn","description":"Kills and restarts the shard's process/worker.","params":[{"name":"delay","description":"How long to wait between killing the process/worker and restarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":193,"file":"Shard.js","path":"src/sharding"}},{"name":"send","description":"Sends a message to the shard's process/worker.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":204,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the shard.","examples":["shard.fetchClientValue('guilds.cache.size')\n  .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":227,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script or function on the shard, in the context of the {@link Client}.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":257,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles a message received from the child process/worker.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":289,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process/worker exiting.","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]}],"meta":{"line":365,"file":"Shard.js","path":"src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the shard's child process/worker.","params":[{"name":"process","description":"Child process/worker that was created","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":127,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Emitted upon the shard's {@link Client#ready} event.","meta":{"line":294,"file":"Shard.js","path":"src/sharding"}},{"name":"disconnect","description":"Emitted upon the shard's {@link Client#disconnect} event.","meta":{"line":305,"file":"Shard.js","path":"src/sharding"}},{"name":"reconnecting","description":"Emitted upon the shard's {@link Client#reconnecting} event.","meta":{"line":316,"file":"Shard.js","path":"src/sharding"}},{"name":"message","description":"Emitted upon receiving a message from the child process/worker.","params":[{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":352,"file":"Shard.js","path":"src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process/worker exiting.","params":[{"name":"process","description":"Child process/worker that exited","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":366,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":21,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\nUtilises IPC to send and receive data to/from the master process and other shards.","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}]},"props":[{"name":"client","description":"Client for the shard","type":[[["Client"]]],"meta":{"line":20,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]],"meta":{"line":26,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"parentPort","description":"Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)","nullable":true,"type":[[["MessagePort"]]],"meta":{"line":32,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ids","description":"Array of shard IDs of this client","readonly":true,"type":[[["Array","<"],["number",">"]]],"meta":{"line":65,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":74,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","emits":["Shard#event:message"],"params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":84,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","see":["{@link ShardingManager#fetchClientValues}"],"examples":["client.shard.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":108,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script or function on all shards, in the context of the {@link Clients}.","see":["{@link ShardingManager#broadcastEval}"],"examples":["client.shard.broadcastEval('this.guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":137,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"respawnAll","description":"Requests a respawn of all shards.","see":["{@link ShardingManager#respawnAll}"],"params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process/worker and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the message being sent"},"meta":{"line":167,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"async":true,"meta":{"line":176,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":198,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}],"returns":[[["ShardClientUtil"]]],"meta":{"line":216,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":15,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\nIt works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\ncontaining its own instance of your bot's {@link Client}. They all have a line of communication with the master\nprocess, and there are several useful methods that utilise it in order to simplify tasks that are normally difficult\nwith sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\npath to your main bot script to launch for each one.","extends":[[["EventEmitter"]]],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of total shards of all shard managers or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["number"]]]},{"name":"options.shardList","description":"List of shards to spawn or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["Array","<"],["number",">"]]]},{"name":"options.mode","description":"Which mode to use for shards","optional":true,"default":"'process'","type":[[["ShardingManagerMode"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning\n(only available when using the `process` mode)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.execArgv","description":"Arguments to pass to the shard script executable when spawning\n(only available when using the `process` mode)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":60,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardList","description":"List of shards this sharding manager spawns","type":[[["string"]],[["Array","<"],["number",">"]]],"meta":{"line":70,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that all sharding managers spawn in total","type":[[["number"]]],"meta":{"line":90,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"mode","description":"Mode for shards to spawn with","type":[[["ShardingManagerMode"]]],"meta":{"line":105,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":114,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":120,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"execArgv","description":"An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":126,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":132,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection","<"],["number",", "],["Shard",">"]]],"meta":{"line":138,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Creates a single shard.\n<warn>Using this method is usually not necessary if you use the spawn method.</warn>","params":[{"name":"id","description":"ID of the shard to create\n<info>This is usually not necessary to manually specify.</info>","optional":true,"default":"this.shards.size","type":[[["number"]]]}],"returns":{"types":[[["Shard"]]],"description":"Note that the created shard needs to be explicitly spawned using its spawn method."},"meta":{"line":152,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]],[["string"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":172,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Sends a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise","<"],["Array","<"],["Shard",">>"]]],"meta":{"line":220,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the {@link Client}s.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":231,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","examples":["manager.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":246,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawnAll","description":"Kills all running shards and respawns them.","params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Shard",">>"]]],"meta":{"line":263,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"shardCreate","description":"Emitted upon creating a shard.","params":[{"name":"shard","description":"Shard that was created","type":[[["Shard"]]]}],"meta":{"line":155,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":42,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"APIMessage","description":"Represents a message to be sent to the API.","construct":{"name":"APIMessage","params":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]]},{"name":"options","description":"Options passed in from send","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]}]},"props":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]],"meta":{"line":24,"file":"APIMessage.js","path":"src/structures"}},{"name":"options","description":"Options passed in from send","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":30,"file":"APIMessage.js","path":"src/structures"}},{"name":"data","description":"Data sendable to the API","nullable":true,"type":[[["Object"]]],"meta":{"line":36,"file":"APIMessage.js","path":"src/structures"}},{"name":"files","description":"Files sendable to the API","nullable":true,"type":[[["Array","<"],["Object",">"]]],"meta":{"line":42,"file":"APIMessage.js","path":"src/structures"}},{"name":"isWebhook","description":"Whether or not the target is a webhook","readonly":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"APIMessage.js","path":"src/structures"}},{"name":"isUser","description":"Whether or not the target is a user","readonly":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"APIMessage.js","path":"src/structures"}},{"name":"isMessage","description":"Whether or not the target is a message","readonly":true,"type":[[["boolean"]]],"meta":{"line":72,"file":"APIMessage.js","path":"src/structures"}}],"methods":[{"name":"makeContent","description":"Makes the content of this message.","returns":{"types":[[["string"]],[["Array","<"],["string",">"]]],"nullable":true},"meta":{"line":81,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveData","description":"Resolves data.","returns":[[["APIMessage"]]],"meta":{"line":144,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveFiles","description":"Resolves files.","async":true,"returns":[[["Promise","<"],["APIMessage",">"]]],"meta":{"line":202,"file":"APIMessage.js","path":"src/structures"}},{"name":"split","description":"Converts this APIMessage into an array of APIMessages for each split content","returns":[[["Array","<"],["APIMessage",">"]]],"meta":{"line":232,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveFile","description":"Resolves a single file into an object sendable to the API.","scope":"static","params":[{"name":"fileLike","description":"Something that could be resolved to a file","type":[[["BufferResolvable"]],[["Stream"]],[["FileOptions"]],[["MessageAttachment"]]]}],"async":true,"returns":[[["Object"]]],"meta":{"line":264,"file":"APIMessage.js","path":"src/structures"}},{"name":"partitionMessageAdditions","description":"Partitions embeds and attachments.","scope":"static","params":[{"name":"items","description":"Items to partition","type":[[["Array","<("],["MessageEmbed","|"],["MessageAttachment",")>"]]]}],"returns":[[["Array","<"],["Array","<"],["MessageEmbed",">, "],["Array","<"],["MessageAttachment",">>"]]],"meta":{"line":301,"file":"APIMessage.js","path":"src/structures"}},{"name":"transformOptions","description":"Transforms the user-level arguments into a final options object. Passing a transformed options object alone into\nthis method will keep it the same, allowing for the reuse of the final options object.","scope":"static","params":[{"name":"content","description":"Content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add onto transformed options","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]},{"name":"isWebhook","description":"Whether or not to use WebhookMessageOptions as the result","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":324,"file":"APIMessage.js","path":"src/structures"}},{"name":"create","description":"Creates an `APIMessage` from user-level arguments.","scope":"static","params":[{"name":"target","description":"Target to send to","type":[[["MessageTarget"]]]},{"name":"content","description":"Content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add onto transformed options","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]}],"returns":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":359,"file":"APIMessage.js","path":"src/structures"}}],"meta":{"line":19,"file":"APIMessage.js","path":"src/structures"}},{"name":"Base","description":"Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).","props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"meta":{"line":9,"file":"Base.js","path":"src/structures"}},{"name":"BaseGuildEmoji","description":"Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.","extends":[[["Emoji"]]],"props":[{"name":"guild","description":"The guild this emoji is a part of","type":[[["Guild"]],[["GuildPreview"]]],"meta":{"line":17,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"_roles","description":"Array of role ids this emoji is active for","access":"private","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":19,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":17,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":23,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":29,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":35,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":73,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":90,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":10,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"CategoryChannel","description":"Represents a guild category channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"children","description":"Channels that are a part of this category","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":15,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":282,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":558,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":567,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":111,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":151,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":177,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions([\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":228,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":251,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":271,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":320,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":388,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":410,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":427,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":460,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":480,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":507,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":533,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":601,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"Channel","description":"Represents any channel on Discord.","extends":[[["Base"]]],"props":[{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":84,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":12,"file":"Channel.js","path":"src/structures"}},{"name":"ClientApplication","description":"Represents a Client OAuth2 Application.","extends":[[["Base"]]],"props":[{"name":"id","description":"The ID of the app","type":[[["Snowflake"]]],"meta":{"line":25,"file":"ClientApplication.js","path":"src/structures"}},{"name":"name","description":"The name of the app","type":[[["string"]]],"meta":{"line":31,"file":"ClientApplication.js","path":"src/structures"}},{"name":"description","description":"The app's description","type":[[["string"]]],"meta":{"line":37,"file":"ClientApplication.js","path":"src/structures"}},{"name":"icon","description":"The app's icon hash","type":[[["string"]]],"meta":{"line":43,"file":"ClientApplication.js","path":"src/structures"}},{"name":"cover","description":"The app's cover image","nullable":true,"type":[[["string"]]],"meta":{"line":49,"file":"ClientApplication.js","path":"src/structures"}},{"name":"rpcOrigins","description":"The app's RPC origins, if enabled","type":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botRequireCodeGrant","description":"If this app's bot requires a code grant when using the OAuth2 flow","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botPublic","description":"If this app's bot is public","nullable":true,"type":[[["boolean"]]],"meta":{"line":67,"file":"ClientApplication.js","path":"src/structures"}},{"name":"owner","description":"The owner of this OAuth application","type":[[["User"]],[["Team"]]],"meta":{"line":73,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the app was created at","readonly":true,"type":[[["number"]]],"meta":{"line":81,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdAt","description":"The time the app was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":90,"file":"ClientApplication.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the application's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":99,"file":"ClientApplication.js","path":"src/structures"}},{"name":"coverImage","description":"A link to this application's cover image.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the cover image","nullable":true},"meta":{"line":109,"file":"ClientApplication.js","path":"src/structures"}},{"name":"fetchAssets","description":"Gets the clients rich presence assets.","returns":[[["Promise","<"],["Array","<"],["ClientAsset",">>"]]],"meta":{"line":126,"file":"ClientApplication.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nClientApplication object.","examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[[["string"]]],"meta":{"line":147,"file":"ClientApplication.js","path":"src/structures"}}],"meta":{"line":15,"file":"ClientApplication.js","path":"src/structures"}},{"name":"ClientPresence","construct":{"name":"ClientPresence","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the client presence","optional":true,"default":"{}","type":[[["Object"]]]}]},"meta":{"line":13,"file":"ClientPresence.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord user.","extends":[[["User"]]],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":24,"file":"ClientUser.js","path":"src/structures"}},{"name":"mfaEnabled","description":"If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account","nullable":true,"type":[[["boolean"]]],"meta":{"line":32,"file":"ClientUser.js","path":"src/structures"}},{"name":"presence","description":"ClientUser's presence","readonly":true,"type":[[["Presence"]]],"meta":{"line":45,"file":"ClientUser.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":27,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":29,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"User.js","path":"src/structures"}},{"name":"system","description":"Whether the user is an Official Discord System user (part of the urgent message system)","nullable":true,"type":[[["boolean"]]],"meta":{"line":63,"file":"User.js","path":"src/structures"}},{"name":"locale","description":"The locale of the user's client (ISO 639-1)","nullable":true,"type":[[["string"]]],"meta":{"line":70,"file":"User.js","path":"src/structures"}},{"name":"flags","description":"The flags for this user","nullable":true,"type":[[["UserFlags"]]],"meta":{"line":77,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":88,"file":"User.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":94,"file":"User.js","path":"src/structures"}},{"name":"partial","description":"Whether this User is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":102,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":111,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":120,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":129,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":161,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":180,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":219,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Sets the username of the logged in client.\n<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\nevery hour. Use this sparingly!</info>","examples":["// Set username\nclient.user.setUsername('discordjs')\n  .then(user => console.log(`My new username is ${user.username}`))\n  .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":73,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Sets the avatar of the logged in client.","examples":["// Set avatar\nclient.user.setAvatar('./avatar.png')\n  .then(user => console.log(`New avatar set!`))\n  .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":87,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Sets the full presence of the client user.","examples":["// Set the client user's presence\nclient.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"Data for the presence","type":[[["PresenceData"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":115,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Sets the status of the client user.","examples":["// Set the client user's status\nclient.user.setStatus('idle')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"status","description":"Status to change to","type":[[["PresenceStatusData"]]]},{"name":"shardID","description":"Shard ID(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":139,"file":"ClientUser.js","path":"src/structures"}},{"name":"setActivity","description":"Sets the activity the client user is playing.","examples":["// Set the client user's activity\nclient.user.setActivity('discord.js', { type: 'WATCHING' })\n  .then(presence => console.log(`Activity set to ${presence.activities[0].name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Activity being played, or options for setting the activity","optional":true,"type":[[["string"]],[["ActivityOptions"]]]},{"name":"options","description":"Options for setting the activity","optional":true,"type":[[["ActivityOptions"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":163,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Sets/removes the AFK flag for the client user.","params":[{"name":"afk","description":"Whether or not the user is AFK","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":175,"file":"ClientUser.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar.","inherits":"User#avatarURL","inherited":true,"params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":151,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","inherits":"User#displayAvatarURL","inherited":true,"params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[["string"]]],"meta":{"line":171,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":189,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":199,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":209,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","inherits":"User#createDM","inherited":true,"async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":227,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","inherits":"User#deleteDM","inherited":true,"async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":242,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":255,"file":"User.js","path":"src/structures"}},{"name":"fetchFlags","description":"Fetches this user's flags.","inherits":"User#fetchFlags","inherited":true,"async":true,"returns":[[["Promise","<"],["UserFlags",">"]]],"meta":{"line":270,"file":"User.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this user.","inherits":"User#fetch","inherited":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":281,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":292,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"User#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":11,"file":"ClientUser.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a direct message channel between two users.","extends":[[["Channel"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"DMChannel","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the DM channel","type":[[["Object"]]]}]},"props":[{"name":"messages","description":"A manager of the messages belonging to this channel","type":[[["MessageManager"]]],"meta":{"line":25,"file":"DMChannel.js","path":"src/structures"}},{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":37,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":44,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":50,"file":"DMChannel.js","path":"src/structures"}},{"name":"partial","description":"Whether this DMChannel is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":58,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":40,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":250,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":259,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"fetch","description":"Fetch this DMChannel.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":66,"file":"DMChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the recipient's mention instead of the\nDMChannel object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":78,"file":"DMChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":189,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":233,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes this channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":84,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":17,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.","extends":[[["Base"]]],"props":[{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":17,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":23,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":29,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":35,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":73,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":90,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":11,"file":"Emoji.js","path":"src/structures"}},{"name":"Guild","description":"Represents a guild (or a server) on Discord.\n<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\ncheck this with `guild.available`.</info>","extends":[[["Base"]]],"construct":{"name":"Guild","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild","type":[[["Object"]]]}]},"props":[{"name":"members","description":"A manager of the members belonging to this guild","type":[[["GuildMemberManager"]]],"meta":{"line":47,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A manager of the channels belonging to this guild","type":[[["GuildChannelManager"]]],"meta":{"line":53,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A manager of the roles belonging to this guild","type":[[["RoleManager"]]],"meta":{"line":59,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A manager of the presences belonging to this guild","type":[[["PresenceManager"]]],"meta":{"line":65,"file":"Guild.js","path":"src/structures"}},{"name":"voiceStates","description":"A manager of the voice states of this guild","type":[[["VoiceStateManager"]]],"meta":{"line":71,"file":"Guild.js","path":"src/structures"}},{"name":"deleted","description":"Whether the bot has been removed from the guild","type":[[["boolean"]]],"meta":{"line":77,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the guild is available to access. If it is not available, it indicates a server outage","type":[[["boolean"]]],"meta":{"line":85,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the guild, useful for comparisons","type":[[["Snowflake"]]],"meta":{"line":91,"file":"Guild.js","path":"src/structures"}},{"name":"shardID","description":"The id of the shard this Guild belongs to.","type":[[["number"]]],"meta":{"line":101,"file":"Guild.js","path":"src/structures"}},{"name":"shard","description":"The Shard this Guild belongs to.","readonly":true,"type":[[["WebSocketShard"]]],"meta":{"line":109,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":123,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon","nullable":true,"type":[[["string"]]],"meta":{"line":129,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":135,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":141,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this guild","type":[[["number"]]],"meta":{"line":147,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":153,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features partnered guilds have enabled","type":[[["Array","<"],["Features",">"]]],"meta":{"line":178,"file":"Guild.js","path":"src/structures"}},{"name":"applicationID","description":"The ID of the application that created this guild (if applicable)","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":184,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\"","nullable":true,"type":[[["number"]]],"meta":{"line":190,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":196,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelID","description":"The ID of the system channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":202,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild","type":[[["boolean"]]],"meta":{"line":208,"file":"Guild.js","path":"src/structures"}},{"name":"premiumTier","description":"The premium tier on this guild","type":[[["PremiumTier"]]],"meta":{"line":223,"file":"Guild.js","path":"src/structures"}},{"name":"premiumSubscriptionCount","description":"The total number of users currently boosting this server","nullable":true,"type":[[["number"]]],"meta":{"line":225,"file":"Guild.js","path":"src/structures"}},{"name":"widgetEnabled","description":"Whether widget images are enabled on this guild","nullable":true,"type":[[["boolean"]]],"meta":{"line":234,"file":"Guild.js","path":"src/structures"}},{"name":"widgetChannelID","description":"The widget channel ID, if enabled","nullable":true,"type":[[["string"]]],"meta":{"line":241,"file":"Guild.js","path":"src/structures"}},{"name":"embedChannelID","description":"The embed channel ID, if enabled","nullable":true,"type":[[["string"]]],"meta":{"line":248,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","type":[[["VerificationLevel"]]],"meta":{"line":259,"file":"Guild.js","path":"src/structures"}},{"name":"explicitContentFilter","description":"The explicit content filter level of the guild","type":[[["ExplicitContentFilterLevel"]]],"meta":{"line":265,"file":"Guild.js","path":"src/structures"}},{"name":"mfaLevel","description":"The required MFA level for the guild","type":[[["number"]]],"meta":{"line":271,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":277,"file":"Guild.js","path":"src/structures"}},{"name":"defaultMessageNotifications","description":"The value set for the guild's default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]],"meta":{"line":283,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelFlags","description":"The value set for the guild's system channel flags","type":[[["Readonly","<"],["SystemChannelFlags",">"]]],"meta":{"line":290,"file":"Guild.js","path":"src/structures"}},{"name":"maximumMembers","description":"The maximum amount of members the guild can have\n<info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>","nullable":true,"type":[[["number"]]],"meta":{"line":292,"file":"Guild.js","path":"src/structures"}},{"name":"maximumPresences","description":"The maximum amount of presences the guild can have\n<info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>","nullable":true,"type":[[["number"]]],"meta":{"line":300,"file":"Guild.js","path":"src/structures"}},{"name":"vanityURLCode","description":"The vanity URL code of the guild, if any","nullable":true,"type":[[["string"]]],"meta":{"line":312,"file":"Guild.js","path":"src/structures"}},{"name":"description","description":"The description of the guild, if any","nullable":true,"type":[[["string"]]],"meta":{"line":318,"file":"Guild.js","path":"src/structures"}},{"name":"banner","description":"The hash of the guild banner","nullable":true,"type":[[["string"]]],"meta":{"line":324,"file":"Guild.js","path":"src/structures"}},{"name":"rulesChannelID","description":"The ID of the rules channel for the guild\n<info>This is only available on guilds with the `PUBLIC` feature</info>","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":335,"file":"Guild.js","path":"src/structures"}},{"name":"publicUpdatesChannelID","description":"The ID of the public updates channel for the guild\n<info>This is only available on guilds with the `PUBLIC` feature</info>","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":342,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner","type":[[["Snowflake"]]],"meta":{"line":366,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A manager of the emojis belonging to this guild","type":[[["GuildEmojiManager"]]],"meta":{"line":387,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":412,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":421,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":430,"file":"Guild.js","path":"src/structures"}},{"name":"partnered","description":"If this guild is partnered","readonly":true,"type":[[["boolean"]]],"meta":{"line":439,"file":"Guild.js","path":"src/structures"}},{"name":"verified","description":"If this guild is verified","readonly":true,"type":[[["boolean"]]],"meta":{"line":448,"file":"Guild.js","path":"src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon.","readonly":true,"type":[[["string"]]],"meta":{"line":467,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":489,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannel","description":"AFK voice channel for this guild","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":503,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannel","description":"System channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":512,"file":"Guild.js","path":"src/structures"}},{"name":"widgetChannel","description":"Widget channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":521,"file":"Guild.js","path":"src/structures"}},{"name":"embedChannel","description":"Embed channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":530,"file":"Guild.js","path":"src/structures"}},{"name":"rulesChannel","description":"Rules channel for this guild\n<info>This is only available on guilds with the `PUBLIC` feature</info>","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":540,"file":"Guild.js","path":"src/structures"}},{"name":"publicUpdatesChannel","description":"Public updates channel for this guild\n<info>This is only available on guilds with the `PUBLIC` feature</info>","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":550,"file":"Guild.js","path":"src/structures"}},{"name":"me","description":"The client user as a GuildMember of this guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":559,"file":"Guild.js","path":"src/structures"}},{"name":"voice","description":"The voice state for the client user of this guild, if any","readonly":true,"nullable":true,"type":[[["VoiceState"]]],"meta":{"line":573,"file":"Guild.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"_patch","description":"Sets up the guild.","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":118,"file":"Guild.js","path":"src/structures"}},{"name":"bannerURL","description":"The URL to this guild's banner.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":402,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":457,"file":"Guild.js","path":"src/structures"}},{"name":"splashURL","description":"The URL to this guild's splash.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":479,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the user is present in the guild.","examples":["// Get the guild member of a user\nconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":585,"file":"Guild.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this guild.","returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":593,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBan","description":"Fetches information on a banned user from this guild.","params":[{"name":"user","description":"The User to fetch the ban info of","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["BanInfo",">"]]],"meta":{"line":615,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetches a collection of banned users in this guild.","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["BanInfo",">>"]]],"meta":{"line":632,"file":"Guild.js","path":"src/structures"}},{"name":"fetchIntegrations","description":"Fetches a collection of integrations to this guild.\nResolves with a collection mapping integrations by their ids.","examples":["// Fetch integrations\nguild.fetchIntegrations()\n  .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Integration",">>"]]],"meta":{"line":657,"file":"Guild.js","path":"src/structures"}},{"name":"createIntegration","description":"Creates an integration by attaching an integration object","params":[{"name":"data","description":"The data for the integration","type":[[["IntegrationData"]]]},{"name":"reason","description":"Reason for creating the integration","type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":682,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild.\nResolves with a collection mapping invites by their codes.","examples":["// Fetch invites\nguild.fetchInvites()\n  .then(invites => console.log(`Fetched ${invites.size} invites`))\n  .catch(console.error);","// Fetch invite creator by their id\nguild.fetchInvites()\n .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":704,"file":"Guild.js","path":"src/structures"}},{"name":"fetchPreview","description":"Obtains a guild preview for this guild from Discord, only available for public guilds.","returns":[[["Promise","<"],["GuildPreview",">"]]],"meta":{"line":722,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVanityCode","description":"Fetches the vanity url invite code to this guild.\nResolves with a string matching the vanity url invite code, not the full url.","examples":["// Fetch invites\nguild.fetchVanityCode()\n  .then(code => {\n    console.log(`Vanity URL: https://discord.gg/${code}`);\n  })\n  .catch(console.error);"],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":741,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the guild.","examples":["// Fetch webhooks\nguild.fetchWebhooks()\n  .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":760,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVoiceRegions","description":"Fetches available voice regions.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":775,"file":"Guild.js","path":"src/structures"}},{"name":"fetchEmbed","description":"Fetches the guild embed.","examples":["// Fetches the guild embed\nguild.fetchEmbed()\n  .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["GuildEmbedData",">"]]],"meta":{"line":802,"file":"Guild.js","path":"src/structures"}},{"name":"fetchAuditLogs","description":"Fetches audit logs for this guild.","examples":["// Output audit log entries\nguild.fetchAuditLogs()\n  .then(audit => console.log(audit.entries.first()))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching audit logs","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.before","description":"Limit to entries from before specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.limit","description":"Limit number of entries","optional":true,"type":[[["number"]]]},{"name":"options.user","description":"Only show entries involving this user","optional":true,"type":[[["UserResolvable"]]]},{"name":"options.type","description":"Only show entries involving this action type","optional":true,"type":[[["AuditLogAction"]],[["number"]]]}],"returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":826,"file":"Guild.js","path":"src/structures"}},{"name":"addMember","description":"Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.","params":[{"name":"user","description":"User to add to the guild","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the addition","type":[[["Object"]]]},{"name":"options.accessToken","description":"An OAuth2 access token for the user with the `guilds.join` scope granted to the\nbot's application","type":[[["string"]]]},{"name":"options.nick","description":"Nickname to give the member (requires `MANAGE_NICKNAMES`)","optional":true,"type":[[["string"]]]},{"name":"options.roles","description":"Roles to add to the member\n(requires `MANAGE_ROLES`)","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.mute","description":"Whether the member should be muted (requires `MUTE_MEMBERS`)","optional":true,"type":[[["boolean"]]]},{"name":"options.deaf","description":"Whether the member should be deafened (requires `DEAFEN_MEMBERS`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":856,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the guild with new information - e.g. a new name.","examples":["// Set the guild name and region\nguild.edit({\n  name: 'Discord Guild',\n  region: 'london',\n})\n  .then(updated => console.log(`New guild name ${updated} in region ${updated.region}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]},{"name":"reason","description":"Reason for editing this guild","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":913,"file":"Guild.js","path":"src/structures"}},{"name":"setExplicitContentFilter","description":"Edits the level of the explicit content filter.","params":[{"name":"explicitContentFilter","description":"The new level of the explicit content filter","type":[[["ExplicitContentFilterLevel"]],[["number"]]]},{"name":"reason","description":"Reason for changing the level of the guild's explicit content filter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":961,"file":"Guild.js","path":"src/structures"}},{"name":"setDefaultMessageNotifications","description":"Edits the setting of the default message notifications of the guild.","params":[{"name":"defaultMessageNotifications","description":"The new setting for the default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]]},{"name":"reason","description":"Reason for changing the setting of the default message notifications","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":972,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannelFlags","description":"Edits the flags of the default message notifications of the guild.","params":[{"name":"systemChannelFlags","description":"The new flags for the default message notifications","type":[[["SystemChannelFlagsResolvable"]]]},{"name":"reason","description":"Reason for changing the flags of the default message notifications","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":983,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edits the name of the guild.","examples":["// Edit the guild name\nguild.setName('Discord Guild')\n .then(updated => console.log(`Updated guild name to ${guild}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":998,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edits the region of the guild.","examples":["// Edit the guild region\nguild.setRegion('london')\n .then(updated => console.log(`Updated guild region to ${updated.region}`))\n .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's region","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1013,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edits the verification level of the guild.","examples":["// Edit the guild verification level\nguild.setVerificationLevel(1)\n .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["VerificationLevel"]],[["number"]]]},{"name":"reason","description":"Reason for changing the guild's verification level","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1028,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edits the AFK channel of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKChannel(channel)\n .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's AFK channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1043,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannel","description":"Edits the system channel of the guild.","examples":["// Edit the guild system channel\nguild.setSystemChannel(channel)\n .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n .catch(console.error);"],"params":[{"name":"systemChannel","description":"The new system channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's system channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1058,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edits the AFK timeout of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKTimeout(60)\n .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's AFK timeout","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1073,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Sets a new guild icon.","examples":["// Edit the guild icon\nguild.setIcon('./icon.png')\n .then(updated => console.log('Updated the guild icon'))\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's icon","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1088,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the guild.","examples":["// Edit the guild owner\nguild.setOwner(guild.members.cache.first())\n .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the guild","type":[[["GuildMemberResolvable"]]]},{"name":"reason","description":"Reason for setting the new owner","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1103,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Sets a new guild splash screen.","examples":["// Edit the guild splash\nguild.setSplash('./splash.png')\n .then(updated => console.log('Updated the guild splash'))\n .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's splash screen","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1118,"file":"Guild.js","path":"src/structures"}},{"name":"setBanner","description":"Sets a new guild banner.","examples":["guild.setBanner('./banner.png')\n .then(updated => console.log('Updated the guild banner'))\n .catch(console.error);"],"params":[{"name":"banner","description":"The new banner of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's banner","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1132,"file":"Guild.js","path":"src/structures"}},{"name":"setChannelPositions","description":"Batch-updates the guild's channels' positions.","examples":["guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n  .then(guild => console.log(`Updated channel positions for ${guild}`))\n  .catch(console.error);"],"params":[{"name":"channelPositions","description":"Channel positions to update","type":[[["Array","<"],["ChannelPosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1152,"file":"Guild.js","path":"src/structures"}},{"name":"setRolePositions","description":"Batch-updates the guild's role positions","examples":["guild.setRolePositions([{ role: roleID, position: updatedRoleIndex }])\n .then(guild => console.log(`Role permissions updated for ${guild}`))\n .catch(console.error);"],"params":[{"name":"rolePositions","description":"Role positions to update","type":[[["Array","<"],["GuildRolePosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1186,"file":"Guild.js","path":"src/structures"}},{"name":"setEmbed","description":"Edits the guild's embed.","params":[{"name":"embed","description":"The embed for the guild","type":[[["GuildEmbedData"]]]},{"name":"reason","description":"Reason for changing the guild's embed","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1214,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Leaves the guild.","examples":["// Leave a guild\nguild.leave()\n  .then(g => console.log(`Left the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1236,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Deletes the guild.","examples":["// Delete a guild\nguild.delete()\n  .then(g => console.log(`Deleted the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1254,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this guild equals another guild. It compares all properties, so for most operations\nit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"guild","description":"The guild to compare with","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":1268,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${guild}!`);"],"returns":[[["string"]]],"meta":{"line":1305,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedRoles","description":"Creates a collection of this guild's roles, sorted by their position and IDs.","access":"private","returns":[[["Collection","<"],["Role",">"]]],"meta":{"line":1328,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedChannels","description":"Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.","access":"private","params":[{"name":"channel","description":"Category to get the channels of","optional":true,"type":[[["GuildChannel"]]]}],"returns":[[["Collection","<"],["GuildChannel",">"]]],"meta":{"line":1338,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":40,"file":"Guild.js","path":"src/structures"}},{"name":"GuildAuditLogs","description":"Audit logs entries are held in this class.","props":[{"name":"webhooks","description":"Cached webhooks","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Webhook",">"]]],"meta":{"line":139,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"integrations","description":"Cached integrations","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Integration",">"]]],"meta":{"line":151,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"entries","description":"The entries for this guild's audit logs","type":[[["Collection","<"],["Snowflake",", "],["GuildAuditLogsEntry",">"]]],"meta":{"line":162,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Targets","description":"Key mirror of all available audit log targets.","scope":"static","type":[[["AuditLogTargetType"]]],"meta":{"line":24,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Actions","description":"All available actions keyed under their names to their numeric values.","scope":"static","type":[[["AuditLogAction"]]],"meta":{"line":84,"file":"GuildAuditLogs.js","path":"src/structures"}}],"methods":[{"name":"build","description":"Handles possible promises for entry targets.","scope":"static","returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":173,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"targetType","description":"Finds the target type from the entry action.","scope":"static","params":[{"name":"target","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogTargetType"]]],"meta":{"line":197,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"Finds the action type from the entry action.","scope":"static","params":[{"name":"action","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogActionType"]]],"meta":{"line":224,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":132,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildAuditLogsEntry","description":"Audit logs entry.","props":[{"name":"targetType","description":"The target type of this entry","type":[[["AuditLogTargetType"]]],"meta":{"line":299,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"The action type of this entry","type":[[["AuditLogActionType"]]],"meta":{"line":305,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"action","description":"Specific action type of this entry in its string presentation","type":[[["AuditLogAction"]]],"meta":{"line":311,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"reason","description":"The reason of this entry","nullable":true,"type":[[["string"]]],"meta":{"line":317,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"executor","description":"The user that executed this entry","type":[[["User"]]],"meta":{"line":323,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"changes","description":"Specific property changes","type":[[["Array","<"],["AuditLogChange",">"]]],"meta":{"line":339,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"id","description":"The ID of this entry","type":[[["Snowflake"]]],"meta":{"line":345,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"extra","description":"Any extra data from the entry","type":[[["Object"]],[["Role"]],[["GuildMember"]]],"meta":{"line":351,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"target","description":"The target of this entry","nullable":true,"type":[[["AuditLogEntryTarget"]]],"meta":{"line":412,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp this entry was created at","readonly":true,"type":[[["number"]]],"meta":{"line":487,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdAt","description":"The time this entry was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":496,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":293,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a guild channel from any of the following:\n- {@link TextChannel}\n- {@link VoiceChannel}\n- {@link CategoryChannel}\n- {@link NewsChannel}\n- {@link StoreChannel}","extends":[[["Channel"]]],"construct":{"name":"GuildChannel","params":[{"name":"guild","description":"The guild the guild channel is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the guild channel","type":[[["Object"]]]}]},"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":282,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":558,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":567,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":111,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":151,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":177,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","examples":["channel.overwritePermissions([\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":228,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":251,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":271,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":320,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":388,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":410,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":427,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":460,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":480,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":507,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":533,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":601,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":26,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmoji","description":"Represents a custom emoji.","extends":[[["BaseGuildEmoji"]]],"construct":{"name":"GuildEmoji","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild emoji","type":[[["Object"]]]},{"name":"guild","description":"The guild the guild emoji is part of","type":[[["Guild"]]]}]},"props":[{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":33,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":40,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"available","description":"Whether this emoji is available","type":[[["boolean"]]],"meta":{"line":47,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"guild","description":"The guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":22,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"deletable","description":"Whether the emoji is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":39,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"roles","description":"A manager for roles this emoji is active for.","readonly":true,"type":[[["GuildEmojiRoleManager"]]],"meta":{"line":49,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"_roles","description":"Array of role ids this emoji is active for","access":"private","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":19,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":17,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":23,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":29,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":35,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":73,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"fetchAuthor","description":"Fetches the author for this emoji","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":57,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"edit","description":"Edits the emoji.","examples":["// Edit an emoji\nemoji.edit({ name: 'newemoji' })\n  .then(e => console.log(`Edited emoji ${e}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the emoji","type":[[["GuildEmojiEditData"]]]},{"name":"reason","description":"Reason for editing this emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":91,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of the emoji.","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the emoji's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":116,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"delete","description":"Deletes the emoji.","params":[{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":125,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","params":[{"name":"other","description":"The emoji to compare it to","type":[[["GuildEmoji"]],[["Object"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the emoji is equal to the given emoji or not"},"meta":{"line":138,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":90,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":12,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a member of a guild on Discord.","extends":[[["Base"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"GuildMember","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild member","type":[[["Object"]]]},{"name":"guild","description":"The guild the member is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":30,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this guild member instance represents","type":[[["User"]]],"meta":{"line":32,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","nullable":true,"type":[[["number"]]],"meta":{"line":43,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":49,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildMember.js","path":"src/structures"}},{"name":"premiumSinceTimestamp","description":"The timestamp of when the member used their Nitro boost on the guild, if it was used","nullable":true,"type":[[["number"]]],"meta":{"line":61,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleted","description":"Whether the member has been removed from the guild","type":[[["boolean"]]],"meta":{"line":67,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":74,"file":"GuildMember.js","path":"src/structures"}},{"name":"partial","description":"Whether this GuildMember is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":99,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A manager for the roles belonging to this member","readonly":true,"type":[[["GuildMemberRoleManager"]]],"meta":{"line":108,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the member in their guild, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":117,"file":"GuildMember.js","path":"src/structures"}},{"name":"voice","description":"The voice state of this member","readonly":true,"type":[[["VoiceState"]]],"meta":{"line":127,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time this member joined the guild","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":136,"file":"GuildMember.js","path":"src/structures"}},{"name":"premiumSince","description":"The time of when the member used their Nitro boost on the guild, if it was used","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":145,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this guild member","readonly":true,"type":[[["Presence"]]],"meta":{"line":154,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayColor","description":"The displayed color of this member in base 10","readonly":true,"type":[[["number"]]],"meta":{"line":171,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayHexColor","description":"The displayed color of this member in hexadecimal","readonly":true,"type":[[["string"]]],"meta":{"line":181,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this member","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":191,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayName","description":"The nickname of this member, or their username if they don't have one","readonly":true,"type":[[["string"]]],"meta":{"line":200,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for this member, taking only roles into account","readonly":true,"type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":209,"file":"GuildMember.js","path":"src/structures"}},{"name":"manageable","description":"Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\nThis is a prerequisite for many moderative actions.","readonly":true,"type":[[["boolean"]]],"meta":{"line":220,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether this member is kickable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":233,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether this member is bannable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":242,"file":"GuildMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\ntaking into account roles and permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":252,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of this member's roles have a permission.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.checkOwner","description":"Whether to allow being the guild's owner to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":266,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edits this member.","params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildMemberEditData"]]]},{"name":"reason","description":"Reason for editing this user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":288,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Sets the nickname for this member.","params":[{"name":"nick","description":"The nickname for the guild member","type":[[["string"]]]},{"name":"reason","description":"Reason for setting the nickname","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":323,"file":"GuildMember.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":331,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":339,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kicks this member from the guild.","params":[{"name":"reason","description":"Reason for kicking user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":348,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Bans this guild member.","examples":["// ban a guild member\nguildMember.ban({ days: 7, reason: 'They deserved it' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":368,"file":"GuildMember.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this GuildMember.","returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":376,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":387,"file":"GuildMember.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":23,"file":"GuildMember.js","path":"src/structures"}},{"name":"GuildPreview","description":"Represents the data about the guild any bot can preview, connected to the specified public guild.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of this public guild","type":[[["string"]]],"meta":{"line":30,"file":"GuildPreview.js","path":"src/structures"}},{"name":"name","description":"The name of this public guild","type":[[["string"]]],"meta":{"line":36,"file":"GuildPreview.js","path":"src/structures"}},{"name":"icon","description":"The icon of this public guild","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"GuildPreview.js","path":"src/structures"}},{"name":"splash","description":"The splash icon of this public guild","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"GuildPreview.js","path":"src/structures"}},{"name":"discoverySplash","description":"The discovery splash icon of this public guild","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"GuildPreview.js","path":"src/structures"}},{"name":"features","description":"An array of enabled guild features","type":[[["Array","<"],["Features",">"]]],"meta":{"line":60,"file":"GuildPreview.js","path":"src/structures"}},{"name":"approximateMemberCount","description":"The approximate count of members in this public guild","type":[[["number"]]],"meta":{"line":66,"file":"GuildPreview.js","path":"src/structures"}},{"name":"approximatePresenceCount","description":"The approximate count of online members in this public guild","type":[[["number"]]],"meta":{"line":72,"file":"GuildPreview.js","path":"src/structures"}},{"name":"description","description":"The description for this public guild","nullable":true,"type":[[["string"]]],"meta":{"line":78,"file":"GuildPreview.js","path":"src/structures"}},{"name":"emojis","description":"Collection of emojis belonging to this public guild","type":[[["Collection","<"],["Snowflake",", "],["GuildPreviewEmoji",">"]]],"meta":{"line":85,"file":"GuildPreview.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"_patch","description":"Builds the public guild with the provided data.","access":"private","params":[{"name":"data","description":"The raw data of the public guild","type":[["*"]]}],"meta":{"line":25,"file":"GuildPreview.js","path":"src/structures"}},{"name":"splashURL","description":"The URL to this public guild's splash.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":99,"file":"GuildPreview.js","path":"src/structures"}},{"name":"discoverySplashURL","description":"The URL to this public guild's discovery splash.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":109,"file":"GuildPreview.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this public guild's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":119,"file":"GuildPreview.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this public guild.","returns":[[["Promise","<"],["GuildPreview",">"]]],"meta":{"line":128,"file":"GuildPreview.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${previewGuild}!`);"],"returns":[[["string"]]],"meta":{"line":145,"file":"GuildPreview.js","path":"src/structures"}}],"meta":{"line":12,"file":"GuildPreview.js","path":"src/structures"}},{"name":"GuildPreviewEmoji","description":"Represents an instance of an emoji belonging to a public guild obtained through Discord's preview endpoint.","extends":[[["BaseGuildEmoji"]]],"props":[{"name":"guild","description":"The public guild this emoji is part of","type":[[["GuildPreview"]]],"meta":{"line":10,"file":"GuildPreviewEmoji.js","path":"src/structures"}},{"name":"roles","description":"Set of roles this emoji is active for","readonly":true,"type":[[["Set","<"],["Snowflake",">"]]],"meta":{"line":21,"file":"GuildPreviewEmoji.js","path":"src/structures"}},{"name":"_roles","description":"Array of role ids this emoji is active for","access":"private","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":19,"file":"BaseGuildEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":17,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":23,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":29,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":35,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":73,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":90,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":9,"file":"GuildPreviewEmoji.js","path":"src/structures"}},{"name":"Integration","description":"Represents a guild integration.","props":[{"name":"guild","description":"The guild this integration belongs to","type":[[["Guild"]]],"meta":{"line":23,"file":"Integration.js","path":"src/structures"}},{"name":"id","description":"The integration id","type":[[["Snowflake"]]],"meta":{"line":29,"file":"Integration.js","path":"src/structures"}},{"name":"name","description":"The integration name","type":[[["string"]]],"meta":{"line":35,"file":"Integration.js","path":"src/structures"}},{"name":"type","description":"The integration type (twitch, youtube, etc)","type":[[["string"]]],"meta":{"line":41,"file":"Integration.js","path":"src/structures"}},{"name":"enabled","description":"Whether this integration is enabled","type":[[["boolean"]]],"meta":{"line":47,"file":"Integration.js","path":"src/structures"}},{"name":"syncing","description":"Whether this integration is syncing","type":[[["boolean"]]],"meta":{"line":53,"file":"Integration.js","path":"src/structures"}},{"name":"role","description":"The role that this integration uses for subscribers","type":[[["Role"]]],"meta":{"line":59,"file":"Integration.js","path":"src/structures"}},{"name":"user","description":"The user for this integration","type":[[["User"]]],"meta":{"line":65,"file":"Integration.js","path":"src/structures"}},{"name":"account","description":"The account integration information","type":[[["IntegrationAccount"]]],"meta":{"line":71,"file":"Integration.js","path":"src/structures"}},{"name":"syncedAt","description":"The last time this integration was last synced","type":[[["number"]]],"meta":{"line":77,"file":"Integration.js","path":"src/structures"}},{"name":"expireBehavior","description":"The behavior of expiring subscribers","type":[[["number"]]],"meta":{"line":86,"file":"Integration.js","path":"src/structures"}},{"name":"expireGracePeriod","description":"The grace period before expiring subscribers","type":[[["number"]]],"meta":{"line":92,"file":"Integration.js","path":"src/structures"}}],"methods":[{"name":"sync","description":"Sync this integration","returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":99,"file":"Integration.js","path":"src/structures"}},{"name":"edit","description":"Edits this integration.","params":[{"name":"data","description":"The data to edit this integration with","type":[[["IntegrationEditData"]]]},{"name":"reason","description":"Reason for editing this integration","type":[[["string"]]]}],"returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":125,"file":"Integration.js","path":"src/structures"}},{"name":"delete","description":"Deletes this integration.","params":[{"name":"reason","description":"Reason for deleting this integration","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":150,"file":"Integration.js","path":"src/structures"}}],"meta":{"line":16,"file":"Integration.js","path":"src/structures"}},{"name":"Collector","description":"Abstract class for defining a new Collector.","abstract":true,"props":[{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collectors timeout and idle timer.","params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"options.idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]}],"meta":{"line":197,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","meta":{"line":211,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collect","description":"Handles incoming events from the `handleCollect` function. Returns null if the event should not\nbe collected, or returns an object describing the data that should be stored.","see":["Collector#handleCollect"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[[["Object"]]],"description":"Data to insert into collection, if any","nullable":true},"meta":{"line":260,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Handles incoming events from the `handleDispose`. Returns null if the event should not\nbe disposed, or returns the key that should be removed.","see":["Collector#handleDispose"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"Key to remove from the collection, if any","nullable":true},"meta":{"line":270,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","abstract":true,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":277,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":95,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Emitted whenever an element is disposed of.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":122,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":28,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features.","props":[{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":40,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":250,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":259,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"methods":[{"name":"send","description":"Sends a message to this channel.","examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":189,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":233,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":325,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":15,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"Invite","description":"Represents an invitation to a guild channel.\n<warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild the invite is for","nullable":true,"type":[[["Guild"]]],"meta":{"line":23,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":29,"file":"Invite.js","path":"src/structures"}},{"name":"presenceCount","description":"The approximate number of online members of the guild this invite is for","nullable":true,"type":[[["number"]]],"meta":{"line":35,"file":"Invite.js","path":"src/structures"}},{"name":"memberCount","description":"The approximate total number of members of the guild this invite is for","nullable":true,"type":[[["number"]]],"meta":{"line":41,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","nullable":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds, 0 if never expires","nullable":true,"type":[[["number"]]],"meta":{"line":53,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","nullable":true,"type":[[["number"]]],"meta":{"line":59,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","nullable":true,"type":[[["number"]]],"meta":{"line":65,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","nullable":true,"type":[[["User"]]],"meta":{"line":71,"file":"Invite.js","path":"src/structures"}},{"name":"targetUser","description":"The target user for this invite","nullable":true,"type":[[["User"]]],"meta":{"line":77,"file":"Invite.js","path":"src/structures"}},{"name":"targetUserType","description":"The target user type","nullable":true,"type":[[["TargetUser"]]],"meta":{"line":89,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The channel the invite is for","type":[[["Channel"]]],"meta":{"line":95,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","nullable":true,"type":[[["number"]]],"meta":{"line":101,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":109,"file":"Invite.js","path":"src/structures"}},{"name":"deletable","description":"Whether the invite is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":133,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":142,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":152,"file":"Invite.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite.","params":[{"name":"reason","description":"Reason for deleting this invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":161,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","examples":["// Logs: Invite: https://discord.gg/A1b2C3\nconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":172,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":13,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a message on Discord.","extends":[[["Base"]]],"construct":{"name":"Message","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the message","type":[[["Object"]]]},{"name":"channel","description":"The channel the message was sent in","type":[[["TextChannel"]],[["DMChannel"]]]}]},"props":[{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]]],"meta":{"line":35,"file":"Message.js","path":"src/structures"}},{"name":"deleted","description":"Whether this message has been deleted","type":[[["boolean"]]],"meta":{"line":41,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message","type":[[["Snowflake"]]],"meta":{"line":51,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["MessageType"]]],"meta":{"line":57,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":63,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","nullable":true,"type":[[["User"]]],"meta":{"line":69,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":75,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":81,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number or string used for checking message delivery\n<warn>This is only received after the message was sent successfully, and\nlost if re-fetched</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":89,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":95,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":101,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["MessageAttachment",">"]]],"meta":{"line":107,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":118,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":124,"file":"Message.js","path":"src/structures"}},{"name":"reactions","description":"A manager of the reactions belonging to this message","type":[[["ReactionManager"]]],"meta":{"line":130,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"All valid mentions that the message contains","type":[[["MessageMentions"]]],"meta":{"line":141,"file":"Message.js","path":"src/structures"}},{"name":"webhookID","description":"ID of the webhook that sent the message, if applicable","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":147,"file":"Message.js","path":"src/structures"}},{"name":"application","description":"Supplemental application information for group activities","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":153,"file":"Message.js","path":"src/structures"}},{"name":"activity","description":"Group activity","nullable":true,"type":[[["MessageActivity"]]],"meta":{"line":159,"file":"Message.js","path":"src/structures"}},{"name":"_edits","description":"The previous versions of the message, sorted with the most recent first","access":"private","type":[[["Array","<"],["Message",">"]]],"meta":{"line":171,"file":"Message.js","path":"src/structures"}},{"name":"flags","description":"Flags that are applied to the message","type":[[["Readonly","<"],["MessageFlags",">"]]],"meta":{"line":183,"file":"Message.js","path":"src/structures"}},{"name":"reference","description":"Message reference data","nullable":true,"type":[[["MessageReference"]]],"meta":{"line":197,"file":"Message.js","path":"src/structures"}},{"name":"partial","description":"Whether or not this message is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":211,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the author of the message as a guild member.\nOnly available if the message comes from a guild where the author is still a member","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":257,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent at","readonly":true,"type":[[["Date"]]],"meta":{"line":266,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":275,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":284,"file":"Message.js","path":"src/structures"}},{"name":"url","description":"The url to jump to this message","readonly":true,"type":[[["string"]]],"meta":{"line":293,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text.\nIf mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":303,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version\nSorted from latest (first) to oldest (last)","readonly":true,"type":[[["Array","<"],["Message",">"]]],"meta":{"line":359,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":370,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":379,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":392,"file":"Message.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"patch","description":"Updates the message.","access":"private","params":[{"name":"data","description":"Raw Discord message update data","type":[[["Object"]]]}],"meta":{"line":220,"file":"Message.js","path":"src/structures"}},{"name":"createReactionCollector","description":"Creates a reaction collector.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID';\nconst collector = message.createReactionCollector(filter, { time: 15000 });\ncollector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to apply","type":[[["CollectorFilter"]]]},{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}],"returns":[[["ReactionCollector"]]],"meta":{"line":320,"file":"Message.js","path":"src/structures"}},{"name":"awaitReactions","description":"Similar to createReactionCollector but in promise form.\nResolves with a collection of reactions that pass the specified filter.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\nmessage.awaitReactions(filter, { time: 15000 })\n  .then(collected => console.log(`Collected ${collected.size} reactions`))\n  .catch(console.error);"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitReactionsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["MessageReaction",">>"]]],"meta":{"line":343,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edits the content of the message.","examples":["// Update the content of a message\nmessage.edit('This is my new content!')\n  .then(msg => console.log(`Updated the content of a message to ${msg.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageEditOptions"]],[["MessageEmbed"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":419,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":433,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":445,"file":"Message.js","path":"src/structures"}},{"name":"react","description":"Adds a reaction to the message.","examples":["// React to a message with a unicode emoji\nmessage.react('🤔')\n  .then(console.log)\n  .catch(console.error);","// React to a message with a custom emoji\nmessage.react(message.guild.emojis.cache.get('123456789012345678'))\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":468,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message.","examples":["// Delete a message\nmessage.delete({ timeout: 5000 })\n  .then(msg => console.log(`Deleted message from ${msg.author.username} after 5 seconds`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":500,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Replies to the message.","examples":["// Reply to a message\nmessage.reply('Hey, I\\'m a reply!')\n  .then(() => console.log(`Sent a reply to ${message.author.username}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":525,"file":"Message.js","path":"src/structures"}},{"name":"fetch","description":"Fetch this message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":537,"file":"Message.js","path":"src/structures"}},{"name":"fetchWebhook","description":"Fetches the webhook used to create this message.","returns":[[["Promise","<?"],["Webhook",">"]]],"meta":{"line":545,"file":"Message.js","path":"src/structures"}},{"name":"suppressEmbeds","description":"Suppresses or unsuppresses embeds on a message","params":[{"name":"suppress","description":"If the embeds should be suppressed or not","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":555,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\nwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\nmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":575,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the message's content instead of the object.","examples":["// Logs: Message: This is a message!\nconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":606,"file":"Message.js","path":"src/structures"}}],"meta":{"line":28,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an attachment in a message.","construct":{"name":"MessageAttachment","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"default":null,"type":[[["string"]]]},{"name":"data","description":"Extra data","optional":true,"type":[[["Object"]]]}]},"props":[{"name":"name","description":"The name of this attachment","nullable":true,"type":[[["string"]]],"meta":{"line":20,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["Snowflake"]]],"meta":{"line":51,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"size","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":57,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":63,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":69,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image or video)","nullable":true,"type":[[["number"]]],"meta":{"line":75,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image or video)","nullable":true,"type":[[["number"]]],"meta":{"line":81,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"spoiler","description":"Whether or not this attachment has been marked as a spoiler","readonly":true,"type":[[["boolean"]]],"meta":{"line":89,"file":"MessageAttachment.js","path":"src/structures"}}],"methods":[{"name":"setFile","description":"Sets the file of this attachment.","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"default":null,"type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":30,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of this attachment.","params":[{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":41,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":14,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages on a channel.\nWill automatically stop if the channel (`'channelDelete'`) or guild (`'guildDelete'`) are deleted.","extends":[[["Collector"]]],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel","type":[[["TextChannel"]],[["DMChannel"]]]},{"name":"filter","description":"The filter to be applied to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to be applied to this collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel","type":[[["TextBasedChannel"]]],"meta":{"line":31,"file":"MessageCollector.js","path":"src/structures"}},{"name":"received","description":"Total number of messages that were received in the channel during message collection","type":[[["number"]]],"meta":{"line":37,"file":"MessageCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles a message for possible collection.","access":"private","params":[{"name":"message","description":"The message that could be collected","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":68,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a message for possible disposal.","params":[{"name":"message","description":"The message that could be disposed of","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":84,"file":"MessageCollector.js","path":"src/structures"}},{"name":"endReason","description":"Checks after un/collection to see if the collector is done.","access":"private","returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":98,"file":"MessageCollector.js","path":"src/structures"}},{"name":"_handleChannelDeletion","description":"Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.","access":"private","params":[{"name":"channel","description":"The channel that was deleted","type":[[["GuildChannel"]]]}],"returns":[[["void"]]],"meta":{"line":110,"file":"MessageCollector.js","path":"src/structures"}},{"name":"_handleGuildDeletion","description":"Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.","access":"private","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"returns":[[["void"]]],"meta":{"line":122,"file":"MessageCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collectors timeout and idle timer.","inherits":"Collector#resetTimer","inherited":true,"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"options.idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]}],"meta":{"line":197,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":211,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever a message is collected.","params":[{"name":"message","description":"The message that was collected","type":[[["Message"]]]}],"meta":{"line":69,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a message is disposed of.","params":[{"name":"message","description":"The message that was disposed of","type":[[["Message"]]]}],"meta":{"line":85,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":24,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in a message (image/video preview, rich embed, etc.)","construct":{"name":"MessageEmbed","params":[{"name":"data","description":"MessageEmbed to clone or raw embed data","optional":true,"default":"{}","type":[[["MessageEmbed"]],[["Object"]]]}]},"props":[{"name":"type","description":"The type of this embed, either:\n* `rich` - a rich embed\n* `image` - an image embed\n* `video` - a video embed\n* `gifv` - a gifv embed\n* `article` - an article embed\n* `link` - a link embed","type":[[["string"]]],"meta":{"line":32,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":38,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":50,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"color","description":"The color of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":56,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"fields","description":"The fields of this embed","type":[[["Array","<"],["EmbedField",">"]]],"meta":{"line":75,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed (if there is one)","nullable":true,"type":[[["MessageEmbedThumbnail"]]],"meta":{"line":92,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"image","description":"The image of this embed, if there is one","nullable":true,"type":[[["MessageEmbedImage"]]],"meta":{"line":113,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"video","description":"The video of this embed (if there is one)","readonly":true,"nullable":true,"type":[[["MessageEmbedVideo"]]],"meta":{"line":135,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed (if there is one)","nullable":true,"type":[[["MessageEmbedAuthor"]]],"meta":{"line":156,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed (if there is one)","nullable":true,"type":[[["MessageEmbedProvider"]]],"meta":{"line":175,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"footer","description":"The footer of this embed","nullable":true,"type":[[["MessageEmbedFooter"]]],"meta":{"line":193,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"files","description":"The files of this embed","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]],"meta":{"line":205,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"createdAt","description":"The date displayed on this embed","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":213,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the embed color, with a leading hash","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":222,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"length","description":"The accumulated length for the embed title, description, fields and footer text","readonly":true,"type":[[["number"]]],"meta":{"line":231,"file":"MessageEmbed.js","path":"src/structures"}}],"methods":[{"name":"addField","description":"Adds a field to the embed (max 25).","params":[{"name":"name","description":"The name of this field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of this field","type":[[["StringResolvable"]]]},{"name":"inline","description":"If this field will be displayed inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":249,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"addFields","description":"Adds fields to the embed (max 25).","params":[{"name":"fields","description":"The fields to add","variable":true,"type":[[["EmbedFieldData"]],[["Array","<"],["EmbedFieldData",">"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":258,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"spliceFields","description":"Removes, replaces, and inserts fields in the embed (max 25).","params":[{"name":"index","description":"The index to start at","type":[[["number"]]]},{"name":"deleteCount","description":"The number of fields to remove","type":[[["number"]]]},{"name":"fields","description":"The replacing field objects","optional":true,"variable":true,"type":[[["EmbedFieldData"]],[["Array","<"],["EmbedFieldData",">"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":270,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"attachFiles","description":"Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\nsetting an embed image or author/footer icons. Multiple files can be attached.","params":[{"name":"files","description":"Files to attach","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":281,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setAuthor","description":"Sets the author of this embed.","params":[{"name":"name","description":"The name of the author","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the author","optional":true,"type":[[["string"]]]},{"name":"url","description":"The URL of the author","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":293,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setColor","description":"Sets the color of this embed.","params":[{"name":"color","description":"The color of the embed","type":[[["ColorResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":303,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setDescription","description":"Sets the description of this embed.","params":[{"name":"description","description":"The description","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":313,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setFooter","description":"Sets the footer of this embed.","params":[{"name":"text","description":"The text of the footer","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the footer","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":325,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setImage","description":"Sets the image of this embed.","params":[{"name":"url","description":"The URL of the image","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":336,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setThumbnail","description":"Sets the thumbnail of this embed.","params":[{"name":"url","description":"The URL of the thumbnail","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":346,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTimestamp","description":"Sets the timestamp of this embed.","params":[{"name":"timestamp","description":"The timestamp or date","optional":true,"default":"Date.now()","type":[[["Date"]],[["number"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":356,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTitle","description":"Sets the title of this embed.","params":[{"name":"title","description":"The title","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":367,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setURL","description":"Sets the URL of this embed.","params":[{"name":"url","description":"The URL","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":378,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"toJSON","description":"Transforms the embed to a plain object.","returns":{"types":[[["Object"]]],"description":"The raw data of this embed"},"meta":{"line":387,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"normalizeField","description":"Normalizes field input and resolves strings.","scope":"static","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["EmbedField"]]],"meta":{"line":421,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"normalizeFields","description":"Normalizes field input and resolves strings.","scope":"static","params":[{"name":"fields","description":"Fields to normalize","variable":true,"type":[[["EmbedFieldData"]],[["Array","<"],["EmbedFieldData",">"]]]}],"returns":[[["Array","<"],["EmbedField",">"]]],"meta":{"line":441,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":17,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageMentions","description":"Keeps track of mentions in a {@link Message}.","props":[{"name":"everyone","description":"Whether `@everyone` or `@here` were mentioned","type":[[["boolean"]]],"meta":{"line":38,"file":"MessageMentions.js","path":"src/structures"}},{"name":"users","description":"Any users that were mentioned\n<info>Order as received from the API, not as they appear in the message content</info>","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":47,"file":"MessageMentions.js","path":"src/structures"}},{"name":"roles","description":"Any roles that were mentioned\n<info>Order as received from the API, not as they appear in the message content</info>","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":69,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_members","description":"Cached members for {@link MessageMention#members}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":86,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_channels","description":"Cached channels for {@link MessageMention#channels}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":93,"file":"MessageMentions.js","path":"src/structures"}},{"name":"crosspostedChannels","description":"A collection of crossposted channels\n<info>Order as received from the API, not as they appear in the message content</info>","type":[[["Collection","<"],["Snowflake",", "],["CrosspostedChannel",">"]]],"meta":{"line":111,"file":"MessageMentions.js","path":"src/structures"}},{"name":"members","description":"Any members that were mentioned (only in {@link TextChannel}s)\n<info>Order as received from the API, not as they appear in the message content</info>","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":136,"file":"MessageMentions.js","path":"src/structures"}},{"name":"channels","description":"Any channels that were mentioned\n<info>Order as they appear first in the message content</info>","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":153,"file":"MessageMentions.js","path":"src/structures"}},{"name":"EVERYONE_PATTERN","description":"Regular expression that globally matches `@everyone` and `@here`","scope":"static","type":[[["RegExp"]]],"meta":{"line":201,"file":"MessageMentions.js","path":"src/structures"}},{"name":"USERS_PATTERN","description":"Regular expression that globally matches user mentions like `<@81440962496172032>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":207,"file":"MessageMentions.js","path":"src/structures"}},{"name":"ROLES_PATTERN","description":"Regular expression that globally matches role mentions like `<@&297577916114403338>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":213,"file":"MessageMentions.js","path":"src/structures"}},{"name":"CHANNELS_PATTERN","description":"Regular expression that globally matches channel mentions like `<#222079895583457280>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":219,"file":"MessageMentions.js","path":"src/structures"}}],"methods":[{"name":"has","description":"Checks if a user, guild member, role, or channel is mentioned.\nTakes into account user mentions, role mentions, and @everyone/@here mentions.","params":[{"name":"data","description":"User/GuildMember/Role/Channel to check","type":[[["UserResolvable"]],[["GuildMember"]],[["Role"]],[["GuildChannel"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.ignoreDirect","description":"Whether to ignore direct mentions to the item","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreRoles","description":"Whether to ignore role mentions to a guild member","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreEveryone","description":"Whether to ignore everyone/here mentions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":174,"file":"MessageMentions.js","path":"src/structures"}}],"meta":{"line":11,"file":"MessageMentions.js","path":"src/structures"}},{"name":"MessageReaction","description":"Represents a reaction to a message.","construct":{"name":"MessageReaction","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the message reaction","type":[[["Object"]]]},{"name":"message","description":"The message the reaction refers to","type":[[["Message"]]]}]},"props":[{"name":"client","description":"The client that instantiated this message reaction","readonly":true,"type":[[["Client"]]],"meta":{"line":18,"file":"MessageReaction.js","path":"src/structures"}},{"name":"message","description":"The message that this reaction refers to","type":[[["Message"]]],"meta":{"line":29,"file":"MessageReaction.js","path":"src/structures"}},{"name":"me","description":"Whether the client has given this reaction","type":[[["boolean"]]],"meta":{"line":35,"file":"MessageReaction.js","path":"src/structures"}},{"name":"users","description":"A manager of the users that have given this reaction","type":[[["ReactionUserManager"]]],"meta":{"line":41,"file":"MessageReaction.js","path":"src/structures"}},{"name":"count","description":"The number of people that have given the same reaction","nullable":true,"type":[[["number"]]],"meta":{"line":49,"file":"MessageReaction.js","path":"src/structures"}},{"name":"emoji","description":"The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\nobject which has fewer properties. Whatever the prototype of the emoji, it will still have\n`name`, `id`, `identifier` and `toString()`","readonly":true,"type":[[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":78,"file":"MessageReaction.js","path":"src/structures"}},{"name":"partial","description":"Whether or not this reaction is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":97,"file":"MessageReaction.js","path":"src/structures"}}],"methods":[{"name":"remove","description":"Removes all users from this reaction.","async":true,"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":62,"file":"MessageReaction.js","path":"src/structures"}},{"name":"fetch","description":"Fetch this reaction.","async":true,"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":105,"file":"MessageReaction.js","path":"src/structures"}}],"meta":{"line":17,"file":"MessageReaction.js","path":"src/structures"}},{"name":"NewsChannel","description":"Represents a guild news channel on Discord.","extends":[[["TextChannel"]]],"props":[{"name":"messages","description":"A manager of the messages sent to this channel","type":[[["MessageManager"]]],"meta":{"line":26,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":44,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":56,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":40,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":250,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":259,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":282,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":558,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":567,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","inherits":"TextChannel#setRateLimitPerUser","inherited":true,"params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":73,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","inherits":"TextChannel#setNSFW","inherited":true,"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":83,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","inherits":"TextChannel#fetchWebhooks","inherited":true,"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":96,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","inherits":"TextChannel#createWebhook","inherited":true,"examples":["// Create a webhook for the current channel\nchannel.createWebhook('Snek', {\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":120,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"TextChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","inherits":"TextChannel#startTyping","inherited":true,"implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":189,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","inherits":"TextChannel#stopTyping","inherited":true,"implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":233,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","inherits":"TextChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","inherits":"TextChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","inherits":"TextChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":325,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":111,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":151,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":177,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions([\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":228,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":251,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":271,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":320,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":388,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":410,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":427,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":460,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":480,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":507,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":533,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":601,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"NewsChannel.js","path":"src/structures"}},{"name":"PartialGroupDMChannel","description":"Represents a Partial Group DM Channel on Discord.","extends":[[["Channel"]]],"props":[{"name":"name","description":"The name of this Group DM Channel","type":[[["string"]]],"meta":{"line":18,"file":"PartialGroupDMChannel.js","path":"src/structures"}},{"name":"icon","description":"The hash of the channel icon","nullable":true,"type":[[["string"]]],"meta":{"line":24,"file":"PartialGroupDMChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"The URL to this channel's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":32,"file":"PartialGroupDMChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":84,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":11,"file":"PartialGroupDMChannel.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a role or member in a guild channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":13,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a user ID or a role ID","type":[[["Snowflake"]]],"meta":{"line":29,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["OverwriteType"]]],"meta":{"line":42,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"deny","description":"The permissions that are denied for the user or role.","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":48,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"allow","description":"The permissions that are allowed for the user or role.","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":54,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"update","description":"Updates this permissionOverwrites.","examples":["// Update permission overwrites\npermissionOverwrites.update({\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":70,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"delete","description":"Deletes this Permission Overwrite.","params":[{"name":"reason","description":"Reason for deleting this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":87,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"resolveOverwriteOptions","description":"Resolves bitfield permissions overwrites from an object.","scope":"static","params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"initialPermissions","description":"The initial permissions","type":[[["Object"]]]},{"name":"initialPermissions.allow","description":"Initial allowed permissions","type":[[["PermissionResolvable"]]]},{"name":"initialPermissions.deny","description":"Initial denied permissions","type":[[["PermissionResolvable"]]]}],"returns":[[["ResolvedOverwriteOptions"]]],"meta":{"line":121,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"resolve","description":"Resolves an overwrite into {@link RawOverwriteData}.","scope":"static","params":[{"name":"overwrite","description":"The overwrite-like data to resolve","type":[[["OverwriteResolvable"]]]},{"name":"guild","description":"The guild to resolve from","type":[[["Guild"]]]}],"returns":[[["RawOverwriteData"]]],"meta":{"line":170,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":12,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a user's presence.","construct":{"name":"Presence","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the presence","optional":true,"default":"{}","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":41,"file":"Presence.js","path":"src/structures"}},{"name":"userID","description":"The user ID of this presence","type":[[["Snowflake"]]],"meta":{"line":52,"file":"Presence.js","path":"src/structures"}},{"name":"guild","description":"The guild of this presence","nullable":true,"type":[[["Guild"]]],"meta":{"line":58,"file":"Presence.js","path":"src/structures"}},{"name":"user","description":"The user of this presence","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":68,"file":"Presence.js","path":"src/structures"}},{"name":"member","description":"The member of this presence","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":77,"file":"Presence.js","path":"src/structures"}},{"name":"status","description":"The status of this presence","type":[[["PresenceStatus"]]],"meta":{"line":86,"file":"Presence.js","path":"src/structures"}},{"name":"activities","description":"The activities of this presence","type":[[["Array","<"],["Activity",">"]]],"meta":{"line":93,"file":"Presence.js","path":"src/structures"}},{"name":"clientStatus","description":"The devices this presence is on","nullable":true,"type":[[["Object"]]],"props":[{"name":"web","description":"The current presence in the web application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"mobile","description":"The current presence in the mobile application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"desktop","description":"The current presence in the desktop application","nullable":true,"type":[[["ClientPresenceStatus"]]]}],"meta":{"line":107,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another.","params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":123,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":40,"file":"Presence.js","path":"src/structures"}},{"name":"Activity","description":"Represents an activity that is part of a user's presence.","props":[{"name":"name","description":"The name of the activity being played","type":[[["string"]]],"meta":{"line":152,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the activity status","type":[[["ActivityType"]]],"meta":{"line":158,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the activity is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":164,"file":"Presence.js","path":"src/structures"}},{"name":"details","description":"Details about the activity","nullable":true,"type":[[["string"]]],"meta":{"line":170,"file":"Presence.js","path":"src/structures"}},{"name":"state","description":"State of the activity","nullable":true,"type":[[["string"]]],"meta":{"line":176,"file":"Presence.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID associated with this activity","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":182,"file":"Presence.js","path":"src/structures"}},{"name":"timestamps","description":"Timestamps for the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"start","description":"When the activity started","nullable":true,"type":[[["Date"]]]},{"name":"end","description":"When the activity will end","nullable":true,"type":[[["Date"]]]}],"meta":{"line":190,"file":"Presence.js","path":"src/structures"}},{"name":"party","description":"Party of the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"id","description":"ID of the party","nullable":true,"type":[[["string"]]]},{"name":"size","description":"Size of the party as `[current, max]`","type":[[["Array","<"],["number",">"]]]}],"meta":{"line":203,"file":"Presence.js","path":"src/structures"}},{"name":"assets","description":"Assets for rich presence","nullable":true,"type":[[["RichPresenceAssets"]]],"meta":{"line":209,"file":"Presence.js","path":"src/structures"}},{"name":"flags","description":"Flags that describe the activity","type":[[["Readonly","<"],["ActivityFlags",">"]]],"meta":{"line":217,"file":"Presence.js","path":"src/structures"}},{"name":"emoji","description":"Emoji for a custom activity","nullable":true,"type":[[["Emoji"]]],"meta":{"line":223,"file":"Presence.js","path":"src/structures"}},{"name":"createdTimestamp","description":"Creation date of the activity","type":[[["number"]]],"meta":{"line":229,"file":"Presence.js","path":"src/structures"}},{"name":"createdAt","description":"The time the activity was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":249,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this activity is equal to another activity.","params":[{"name":"activity","description":"The activity to compare with","type":[[["Activity"]]]}],"returns":[[["boolean"]]],"meta":{"line":237,"file":"Presence.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the activities' name instead of the Activity object.","returns":[[["string"]]],"meta":{"line":257,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":145,"file":"Presence.js","path":"src/structures"}},{"name":"RichPresenceAssets","description":"Assets for a rich presence","props":[{"name":"largeText","description":"Hover text for the large image","nullable":true,"type":[[["string"]]],"meta":{"line":277,"file":"Presence.js","path":"src/structures"}},{"name":"smallText","description":"Hover text for the small image","nullable":true,"type":[[["string"]]],"meta":{"line":283,"file":"Presence.js","path":"src/structures"}},{"name":"largeImage","description":"ID of the large image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":289,"file":"Presence.js","path":"src/structures"}},{"name":"smallImage","description":"ID of the small image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":295,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"smallImageURL","description":"Gets the URL of the small image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The small image URL","nullable":true},"meta":{"line":305,"file":"Presence.js","path":"src/structures"}},{"name":"largeImageURL","description":"Gets the URL of the large image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The large image URL","nullable":true},"meta":{"line":320,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":270,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollector","description":"Collects reactions on messages.\nWill automatically stop if the message (`'messageDelete'`),\nchannel (`'channelDelete'`), or guild (`'guildDelete'`) are deleted.","extends":[[["Collector"]]],"construct":{"name":"ReactionCollector","params":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]]},{"name":"filter","description":"The filter to apply to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}]},"props":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]],"meta":{"line":33,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"users","description":"The users which have reacted to this message","type":[[["Collection"]]],"meta":{"line":39,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"total","description":"The total number of reactions collected","type":[[["number"]]],"meta":{"line":45,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles an incoming reaction for possible collection.","access":"private","params":[{"name":"reaction","description":"The reaction to possibly collect","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":87,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a reaction deletion for possible disposal.","params":[{"name":"reaction","description":"The reaction to possibly dispose of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":104,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"empty","description":"Empties this reaction collector.","meta":{"line":130,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"_handleMessageDeletion","description":"Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.","access":"private","params":[{"name":"message","description":"The message that was deleted","type":[[["Message"]]]}],"returns":[[["void"]]],"meta":{"line":150,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"_handleChannelDeletion","description":"Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.","access":"private","params":[{"name":"channel","description":"The channel that was deleted","type":[[["GuildChannel"]]]}],"returns":[[["void"]]],"meta":{"line":162,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"_handleGuildDeletion","description":"Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.","access":"private","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"returns":[[["void"]]],"meta":{"line":174,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collectors timeout and idle timer.","inherits":"Collector#resetTimer","inherited":true,"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"options.idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]}],"meta":{"line":197,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":211,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","inherits":"Collector#endReason","inherited":true,"abstract":false,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":277,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"key","description":"Gets the collector key for a reaction.","scope":"static","params":[{"name":"reaction","description":"The message reaction to get the key for","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":185,"file":"ReactionCollector.js","path":"src/structures"}}],"events":[{"name":"collect","description":"Emitted whenever a reaction is collected.","params":[{"name":"reaction","description":"The reaction that was collected","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that added the reaction","type":[[["User"]]]}],"meta":{"line":88,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a reaction is disposed of.","params":[{"name":"reaction","description":"The reaction that was disposed of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":105,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"remove","description":"Emitted whenever a reaction is removed from a message. Will emit on all reaction removals,\nas opposed to {@link Collector#dispose} which will only be emitted when the entire reaction\nis removed.","params":[{"name":"reaction","description":"The reaction that was removed","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":113,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":26,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"ReactionEmoji","description":"Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\nwill use this class opposed to the Emoji class when the client doesn't know enough\ninformation about them.","extends":[[["Emoji"]]],"props":[{"name":"reaction","description":"The message reaction this emoji refers to","type":[[["MessageReaction"]]],"meta":{"line":19,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":17,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":23,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":29,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":35,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":73,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":90,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":13,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"Role","description":"Represents a role on Discord.","extends":[[["Base"]]],"construct":{"name":"Role","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the role","type":[[["Object"]]]},{"name":"guild","description":"The guild the role is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":26,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["Snowflake"]]],"meta":{"line":36,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":42,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":48,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":54,"file":"Role.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the role from the API","type":[[["number"]]],"meta":{"line":60,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The permissions of the role","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":66,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":72,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":78,"file":"Role.js","path":"src/structures"}},{"name":"deleted","description":"Whether the role has been deleted","type":[[["boolean"]]],"meta":{"line":84,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":92,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":101,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":110,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":119,"file":"Role.js","path":"src/structures"}},{"name":"editable","description":"Whether the role is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":128,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role in the role manager","readonly":true,"type":[[["number"]]],"meta":{"line":140,"file":"Role.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if this role's position is lower (other role's is higher),\npositive number if this one is higher (other's is lower), 0 if equal"},"meta":{"line":151,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role.","examples":["// Edit a role\nrole.edit({ name: 'new role' })\n  .then(updated => console.log(`Edited role ${updated.name} name to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]},{"name":"reason","description":"Reason for editing this role","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":179,"file":"Role.js","path":"src/structures"}},{"name":"permissionsIn","description":"Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\ntaking into account permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":221,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the role.","examples":["// Set the name of the role\nrole.setName('new role')\n  .then(updated => console.log(`Edited name of role ${role.name} to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":238,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Sets a new color for the role.","examples":["// Set the color of a role\nrole.setColor('#FF0000')\n  .then(updated => console.log(`Set color of role to ${updated.color}`))\n  .catch(console.error);"],"params":[{"name":"color","description":"The color of the role","type":[[["ColorResolvable"]]]},{"name":"reason","description":"Reason for changing the role's color","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":253,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Sets whether or not the role should be hoisted.","examples":["// Set the hoist of the role\nrole.setHoist(true)\n  .then(r => console.log(`Role hoisted: ${r.hoist}`))\n  .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not the role should be hoisted","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":268,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Sets the permissions of the role.","examples":["// Set the permissions of the role\nrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);","// Remove all permissions from a role\nrole.setPermissions(0)\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["PermissionResolvable"]]]},{"name":"reason","description":"Reason for changing the role's permissions","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":288,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Sets whether this role is mentionable.","examples":["// Make the role mentionable\nrole.setMentionable(true)\n  .then(updated => console.log(`Role updated ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not this role should be mentionable","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":303,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Sets the position of the role.","examples":["// Set the position of the role\nrole.setPosition(1)\n  .then(updated => console.log(`Role position: ${updated.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":320,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role.","examples":["// Delete a role\nrole.delete('The role needed to go')\n  .then(deleted => console.log(`Deleted role ${deleted.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":347,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\nit is advisable to just compare `role.id === role2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"role","description":"Role to compare with","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":361,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the role's mention instead of the Role object.","examples":["// Logs: Role: <@&123456789012345678>\nconsole.log(`Role: ${role}`);"],"returns":[[["string"]]],"meta":{"line":381,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\npositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":397,"file":"Role.js","path":"src/structures"}}],"meta":{"line":19,"file":"Role.js","path":"src/structures"}},{"name":"StoreChannel","description":"Represents a guild store channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"StoreChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":282,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":558,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":567,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":111,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":151,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":177,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions([\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":228,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":251,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":271,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":320,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":388,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":410,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":427,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":460,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":480,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":507,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":533,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":601,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"StoreChannel.js","path":"src/structures"}},{"name":"Team","description":"Represents a Client OAuth2 Application Team.","extends":[[["Base"]]],"props":[{"name":"id","description":"The ID of the Team","type":[[["Snowflake"]]],"meta":{"line":23,"file":"Team.js","path":"src/structures"}},{"name":"name","description":"The name of the Team","type":[[["string"]]],"meta":{"line":29,"file":"Team.js","path":"src/structures"}},{"name":"icon","description":"The Team's icon hash","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"Team.js","path":"src/structures"}},{"name":"ownerID","description":"The Team's owner id","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"Team.js","path":"src/structures"}},{"name":"members","description":"The Team's members","type":[[["Collection","<"],["Snowflake",", "],["TeamMember",">"]]],"meta":{"line":47,"file":"Team.js","path":"src/structures"}},{"name":"owner","description":"The owner of this team","readonly":true,"nullable":true,"type":[[["TeamMember"]]],"meta":{"line":60,"file":"Team.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the team was created at","readonly":true,"type":[[["number"]]],"meta":{"line":69,"file":"Team.js","path":"src/structures"}},{"name":"createdAt","description":"The time the team was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":78,"file":"Team.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the teams's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":87,"file":"Team.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Team's name instead of the\nTeam object.","examples":["// Logs: Team name: My Team\nconsole.log(`Team name: ${team}`);"],"returns":[[["string"]]],"meta":{"line":100,"file":"Team.js","path":"src/structures"}}],"meta":{"line":13,"file":"Team.js","path":"src/structures"}},{"name":"TeamMember","description":"Represents a Client OAuth2 Application Team Member.","extends":[[["Base"]]],"props":[{"name":"team","description":"The Team this member is part of","type":[[["Team"]]],"meta":{"line":18,"file":"TeamMember.js","path":"src/structures"}},{"name":"permissions","description":"The permissions this Team Member has with regard to the team","type":[[["Array","<"],["string",">"]]],"meta":{"line":28,"file":"TeamMember.js","path":"src/structures"}},{"name":"membershipState","description":"The permissions this Team Member has with regard to the team","type":[[["MembershipStates"]]],"meta":{"line":34,"file":"TeamMember.js","path":"src/structures"}},{"name":"user","description":"The user for this Team Member","type":[[["User"]]],"meta":{"line":40,"file":"TeamMember.js","path":"src/structures"}},{"name":"id","description":"The ID of the Team Member","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":48,"file":"TeamMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the team members's mention instead of the\nTeamMember object.","examples":["// Logs: Team Member's mention: <@123456789012345678>\nconsole.log(`Team Member's mention: ${teamMember}`);"],"returns":[[["string"]]],"meta":{"line":60,"file":"TeamMember.js","path":"src/structures"}}],"meta":{"line":11,"file":"TeamMember.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a guild text channel on Discord.","extends":[[["GuildChannel"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"TextChannel","params":[{"name":"guild","description":"The guild the text channel is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the text channel","type":[[["Object"]]]}]},"props":[{"name":"messages","description":"A manager of the messages sent to this channel","type":[[["MessageManager"]]],"meta":{"line":26,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":44,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":56,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":40,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":250,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":259,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":282,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":558,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":567,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":73,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":83,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":96,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","examples":["// Create a webhook for the current channel\nchannel.createWebhook('Snek', {\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":120,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":189,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":233,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":325,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":111,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":151,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":177,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions([\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":228,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":251,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":271,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":320,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":388,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":410,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":427,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":460,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":480,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":507,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":533,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":601,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":20,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","extends":[[["Base"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"User","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the user","type":[[["Object"]]]}]},"props":[{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":27,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":29,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"User.js","path":"src/structures"}},{"name":"system","description":"Whether the user is an Official Discord System user (part of the urgent message system)","nullable":true,"type":[[["boolean"]]],"meta":{"line":63,"file":"User.js","path":"src/structures"}},{"name":"locale","description":"The locale of the user's client (ISO 639-1)","nullable":true,"type":[[["string"]]],"meta":{"line":70,"file":"User.js","path":"src/structures"}},{"name":"flags","description":"The flags for this user","nullable":true,"type":[[["UserFlags"]]],"meta":{"line":77,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":88,"file":"User.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":94,"file":"User.js","path":"src/structures"}},{"name":"partial","description":"Whether this User is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":102,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":111,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":120,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":129,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":139,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":161,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":180,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":219,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"avatarURL","description":"A link to the user's avatar.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":151,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[["string"]]],"meta":{"line":171,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":189,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":199,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":209,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":227,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":242,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":255,"file":"User.js","path":"src/structures"}},{"name":"fetchFlags","description":"Fetches this user's flags.","async":true,"returns":[[["Promise","<"],["UserFlags",">"]]],"meta":{"line":270,"file":"User.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this user.","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":281,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":292,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":153,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":20,"file":"User.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a guild voice channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":20,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":26,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"members","description":"The members in this voice channel","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":29,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"full","description":"Checks if the voice channel is full","readonly":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":59,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"editable","description":"Whether the channel is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":68,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Whether the channel is joinable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":77,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":90,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":567,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel.","examples":["// Set the bitrate of a voice channel\nvoiceChannel.setBitrate(48000)\n  .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":105,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","examples":["// Set the user limit of a voice channel\nvoiceChannel.setUserLimit(42)\n  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":120,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this voice channel.","examples":["// Join a voice channel\nvoiceChannel.join()\n  .then(connection => console.log('Connected!'))\n  .catch(console.error);"],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":133,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel.","examples":["// Leave a voice channel\nvoiceChannel.leave();"],"meta":{"line":144,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":111,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":151,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":177,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions([\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":205,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":228,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":251,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":271,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":320,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":388,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":410,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":427,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":460,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":480,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":507,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":533,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":601,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":95,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":13,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"VoiceRegion","description":"Represents a Discord voice region for guilds.","props":[{"name":"id","description":"The ID of the region","type":[[["string"]]],"meta":{"line":14,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"name","description":"Name of the region","type":[[["string"]]],"meta":{"line":20,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"vip","description":"Whether the region is VIP-only","type":[[["boolean"]]],"meta":{"line":26,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"deprecated","description":"Whether the region is deprecated","type":[[["boolean"]]],"meta":{"line":32,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"optimal","description":"Whether the region is optimal","type":[[["boolean"]]],"meta":{"line":38,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"custom","description":"Whether the region is custom","type":[[["boolean"]]],"meta":{"line":44,"file":"VoiceRegion.js","path":"src/structures"}}],"meta":{"line":9,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"VoiceState","description":"Represents the voice state for a Guild Member.","construct":{"name":"VoiceState","params":[{"name":"guild","description":"The guild the voice state is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the voice state","type":[[["Object"]]]}]},"props":[{"name":"guild","description":"The guild of this voice state","type":[[["Guild"]]],"meta":{"line":21,"file":"VoiceState.js","path":"src/structures"}},{"name":"id","description":"The ID of the member of this voice state","type":[[["Snowflake"]]],"meta":{"line":26,"file":"VoiceState.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","nullable":true,"type":[[["boolean"]]],"meta":{"line":35,"file":"VoiceState.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","nullable":true,"type":[[["boolean"]]],"meta":{"line":40,"file":"VoiceState.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","nullable":true,"type":[[["boolean"]]],"meta":{"line":45,"file":"VoiceState.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","nullable":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"VoiceState.js","path":"src/structures"}},{"name":"sessionID","description":"The session ID of this member's connection","nullable":true,"type":[[["string"]]],"meta":{"line":55,"file":"VoiceState.js","path":"src/structures"}},{"name":"streaming","description":"Whether this member is streaming using \"Go Live\"","type":[[["boolean"]]],"meta":{"line":60,"file":"VoiceState.js","path":"src/structures"}},{"name":"channelID","description":"The ID of the voice channel that this member is in","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":65,"file":"VoiceState.js","path":"src/structures"}},{"name":"member","description":"The member that this voice state belongs to","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":74,"file":"VoiceState.js","path":"src/structures"}},{"name":"channel","description":"The channel that the member is connected to","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":83,"file":"VoiceState.js","path":"src/structures"}},{"name":"connection","description":"If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":92,"file":"VoiceState.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is either self-deafened or server-deafened","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":102,"file":"VoiceState.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is either self-muted or server-muted","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":111,"file":"VoiceState.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is currently speaking. A boolean if the information is available (aka\nthe bot is connected to any voice channel in the guild), otherwise this is null","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":121,"file":"VoiceState.js","path":"src/structures"}}],"methods":[{"name":"setMute","description":"Mutes/unmutes the member of this voice state.","params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]},{"name":"reason","description":"Reason for muting or unmuting","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":131,"file":"VoiceState.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafens/undeafens the member of this voice state.","params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]},{"name":"reason","description":"Reason for deafening or undeafening","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":141,"file":"VoiceState.js","path":"src/structures"}},{"name":"kick","description":"Kicks the member from the voice channel.","params":[{"name":"reason","description":"Reason for kicking member from the channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":150,"file":"VoiceState.js","path":"src/structures"}},{"name":"setChannel","description":"Moves the member to a different channel, or disconnects them from the one they're in.","params":[{"name":"channel","description":"Channel to move the member to, or `null` if you want to disconnect them\nfrom voice. Requires the `MOVE_MEMBERS` permission.","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]},{"name":"reason","description":"Reason for moving member to another channel or disconnecting","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":161,"file":"VoiceState.js","path":"src/structures"}},{"name":"setSelfMute","description":"Self-mutes/unmutes the bot for this voice state.","params":[{"name":"mute","description":"Whether or not the bot should be self-muted","type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"true if the voice state was successfully updated, otherwise false"},"meta":{"line":172,"file":"VoiceState.js","path":"src/structures"}},{"name":"setSelfDeaf","description":"Self-deafens/undeafens the bot for this voice state.","params":[{"name":"deaf","description":"Whether or not the bot should be self-deafened","type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"true if the voice state was successfully updated, otherwise false"},"meta":{"line":186,"file":"VoiceState.js","path":"src/structures"}}],"meta":{"line":15,"file":"VoiceState.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a webhook.","props":[{"name":"client","description":"The client that instantiated the webhook","readonly":true,"type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":31,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":48,"file":"Webhook.js","path":"src/structures"}},{"name":"type","description":"The type of the webhook","type":[[["WebhookTypes"]]],"meta":{"line":54,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":60,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":66,"file":"Webhook.js","path":"src/structures"}},{"name":"owner","description":"The owner of the webhook","type":[[["User"]],[["Object"]]],"meta":{"line":73,"file":"Webhook.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the webhook was created at","readonly":true,"type":[[["number"]]],"meta":{"line":234,"file":"Webhook.js","path":"src/structures"}},{"name":"createdAt","description":"The time the webhook was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":243,"file":"Webhook.js","path":"src/structures"}},{"name":"url","description":"The url of this webhook","readonly":true,"type":[[["string"]]],"meta":{"line":252,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","examples":["// Send a basic message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nwebhook.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nwebhook.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nwebhook.send('This is an embed', {\n  embeds: [{\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   }],\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Object",")>"]]],"meta":{"line":140,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Sends a raw slack message with this webhook.","examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":185,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edits the webhook.","params":[{"name":"options","description":"Options","type":[[["Object"]]]},{"name":"options.name","description":"New name for this webhook","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.avatar","description":"New avatar for this webhook","optional":true,"type":[[["BufferResolvable"]]]},{"name":"options.channel","description":"New channel for this webhook","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for editing this webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":205,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Deletes the webhook.","params":[{"name":"reason","description":"Reason for deleting this webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":226,"file":"Webhook.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the webhook's avatar.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":261,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":13,"file":"Webhook.js","path":"src/structures"}},{"name":"ActivityFlags","description":"Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"ActivityFlags","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric activity flags. All available properties:\n* `INSTANCE`\n* `JOIN`\n* `SPECTATE`\n* `JOIN_REQUEST`\n* `SYNC`\n* `PLAY`","see":["{@link https://discordapp.com/developers/docs/topics/gateway#activity-object-activity-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":29,"file":"ActivityFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":9,"file":"ActivityFlags.js","path":"src/util"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"BitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric bitfield flags.\n<info>Defined in extension classes</info>","scope":"static","abstract":true,"type":[[["Object"]]],"meta":{"line":160,"file":"BitField.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":145,"file":"BitField.js","path":"src/util"}}],"meta":{"line":12,"file":"BitField.js","path":"src/util"}},{"name":"DataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them.","access":"private","methods":[{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code.","scope":"static","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":32,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveImage","description":"Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.","scope":"static","params":[{"name":"image","description":"The image to be resolved","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[["Promise","<?"],["string",">"]]],"meta":{"line":44,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image.","scope":"static","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":65,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveFile","description":"Resolves a BufferResolvable to a Buffer or a Stream.","scope":"static","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"async":true,"returns":[[["Promise","<("],["Buffer","|"],["Stream",")>"]]],"meta":{"line":88,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveFileAsBuffer","description":"Resolves a BufferResolvable to a Buffer.","scope":"static","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"async":true,"returns":[[["Promise","<"],["Buffer",">"]]],"meta":{"line":117,"file":"DataResolver.js","path":"src/util"}}],"meta":{"line":16,"file":"DataResolver.js","path":"src/util"}},{"name":"Intents","description":"Data structure that makes it easy to calculate intents.","extends":[[["BitField"]]],"construct":{"name":"Intents","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["IntentsResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric websocket intents. All available properties:\n* `GUILDS`\n* `GUILD_MEMBERS`\n* `GUILD_BANS`\n* `GUILD_EMOJIS`\n* `GUILD_INTEGRATIONS`\n* `GUILD_WEBHOOKS`\n* `GUILD_INVITES`\n* `GUILD_VOICE_STATES`\n* `GUILD_PRESENCES`\n* `GUILD_MESSAGES`\n* `GUILD_MESSAGE_REACTIONS`\n* `GUILD_MESSAGE_TYPING`\n* `DIRECT_MESSAGES`\n* `DIRECT_MESSAGE_REACTIONS`\n* `DIRECT_MESSAGE_TYPING`","see":["{@link https://discordapp.com/developers/docs/topics/gateway#list-of-intents}"],"scope":"static","type":[[["Object"]]],"meta":{"line":46,"file":"Intents.js","path":"src/util"}},{"name":"PRIVILEGED","description":"Bitfield representing all privileged intents","see":["{@link https://discordapp.com/developers/docs/topics/gateway#privileged-intents}"],"scope":"static","type":[[["number"]]],"meta":{"line":69,"file":"Intents.js","path":"src/util"}},{"name":"ALL","description":"Bitfield representing all intents combined","scope":"static","type":[[["number"]]],"meta":{"line":75,"file":"Intents.js","path":"src/util"}},{"name":"NON_PRIVILEGED","description":"Bitfield representing all non-privileged intents","scope":"static","type":[[["number"]]],"meta":{"line":81,"file":"Intents.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":8,"file":"Intents.js","path":"src/util"}},{"name":"LimitedCollection","description":"A Collection which holds a max amount of entries. The first key is deleted if the Collection has\nreached max size.","extends":[[["Collection"]]],"access":"private","construct":{"name":"LimitedCollection","params":[{"name":"maxSize","description":"The maximum size of the Collection","optional":true,"default":0,"type":[[["number"]]]},{"name":"iterable","description":"Optional entries passed to the Map constructor.","optional":true,"default":null,"type":[[["Iterable"]]]}]},"props":[{"name":"maxSize","description":"The max size of the Collection.","type":[[["number"]]],"meta":{"line":20,"file":"LimitedCollection.js","path":"src/util"}}],"meta":{"line":14,"file":"LimitedCollection.js","path":"src/util"}},{"name":"MessageFlags","description":"Data structure that makes it easy to interact with an {@link Message#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"MessageFlags","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric message flags. All available properties:\n* `CROSSPOSTED`\n* `IS_CROSSPOST`\n* `SUPPRESS_EMBEDS`\n* `SOURCE_MESSAGE_DELETED`\n* `URGENT`","see":["{@link https://discordapp.com/developers/docs/resources/channel#message-object-message-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":28,"file":"MessageFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":9,"file":"MessageFlags.js","path":"src/util"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\npermissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\nthat override their default permissions.","extends":[[["BitField"]]],"construct":{"name":"Permissions","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["PermissionResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric permission flags. All available properties:\n* `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n* `CREATE_INSTANT_INVITE` (create invitations to the guild)\n* `KICK_MEMBERS`\n* `BAN_MEMBERS`\n* `MANAGE_CHANNELS` (edit and reorder channels)\n* `MANAGE_GUILD` (edit the guild information, region, etc.)\n* `ADD_REACTIONS` (add new reactions to messages)\n* `VIEW_AUDIT_LOG`\n* `PRIORITY_SPEAKER`\n* `STREAM`\n* `VIEW_CHANNEL`\n* `SEND_MESSAGES`\n* `SEND_TTS_MESSAGES`\n* `MANAGE_MESSAGES` (delete messages and reactions)\n* `EMBED_LINKS` (links posted will have a preview embedded)\n* `ATTACH_FILES`\n* `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n* `MENTION_EVERYONE`\n* `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n* `VIEW_GUILD_INSIGHTS`\n* `CONNECT` (connect to a voice channel)\n* `SPEAK` (speak in a voice channel)\n* `MUTE_MEMBERS` (mute members across all voice channels)\n* `DEAFEN_MEMBERS` (deafen members across all voice channels)\n* `MOVE_MEMBERS` (move members between voice channels)\n* `USE_VAD` (use voice activity detection)\n* `CHANGE_NICKNAME`\n* `MANAGE_NICKNAMES` (change other members' nicknames)\n* `MANAGE_ROLES`\n* `MANAGE_WEBHOOKS`\n* `MANAGE_EMOJIS`","see":["{@link https://discordapp.com/developers/docs/topics/permissions}"],"scope":"static","type":[[["Object"]]],"meta":{"line":85,"file":"Permissions.js","path":"src/util"}},{"name":"ALL","description":"Bitfield representing every permission combined","scope":"static","type":[[["number"]]],"meta":{"line":123,"file":"Permissions.js","path":"src/util"}},{"name":"DEFAULT","description":"Bitfield representing the default permissions for users","scope":"static","type":[[["number"]]],"meta":{"line":129,"file":"Permissions.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a permission, or any of multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"Permissions.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a permission, or multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"Permissions.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":11,"file":"Permissions.js","path":"src/util"}},{"name":"SnowflakeUtil","description":"A container for useful snowflake-related methods.","methods":[{"name":"generate","description":"Generates a Discord snowflake.\n<info>This hardcodes the worker ID as 1 and the process ID as 0.</info>","scope":"static","params":[{"name":"timestamp","description":"Timestamp or date of the snowflake to generate","optional":true,"default":"Date.now()","type":[[["number"]],[["Date"]]]}],"returns":{"types":[[["Snowflake"]]],"description":"The generated snowflake"},"meta":{"line":35,"file":"Snowflake.js","path":"src/util"}},{"name":"deconstruct","description":"Deconstructs a Discord snowflake.","scope":"static","params":[{"name":"snowflake","description":"Snowflake to deconstruct","type":[[["Snowflake"]]]}],"returns":{"types":[[["DeconstructedSnowflake"]]],"description":"Deconstructed snowflake"},"meta":{"line":66,"file":"Snowflake.js","path":"src/util"}}],"meta":{"line":13,"file":"Snowflake.js","path":"src/util"}},{"name":"Speaking","description":"Data structure that makes it easy to interact with a {@link VoiceConnection#speaking}\nand {@link guildMemberSpeaking} event bitfields.","extends":[[["BitField"]]],"construct":{"name":"Speaking","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric speaking flags. All available properties:\n* `SPEAKING`\n* `SOUNDSHARE`\n* `PRIORITY_SPEAKING`","see":["{@link https://discordapp.com/developers/docs/topics/voice-connections#speaking}"],"scope":"static","type":[[["Object"]]],"meta":{"line":27,"file":"Speaking.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":10,"file":"Speaking.js","path":"src/util"}},{"name":"Structures","description":"Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.","methods":[{"name":"get","description":"Retrieves a structure class.","scope":"static","params":[{"name":"structure","description":"Name of the structure to retrieve","type":[[["string"]]]}],"returns":[[["function"]]],"meta":{"line":37,"file":"Structures.js","path":"src/util"}},{"name":"extend","description":"Extends a structure.\n<warn> Make sure to extend all structures before instantiating your client.\nExtending after doing so may not work as expected. </warn>","scope":"static","examples":["const { Structures } = require('discord.js');\n\nStructures.extend('Guild', Guild => {\n  class CoolGuild extends Guild {\n    constructor(client, data) {\n      super(client, data);\n      this.cool = true;\n    }\n  }\n\n  return CoolGuild;\n});"],"params":[{"name":"structure","description":"Name of the structure class to extend","type":[[["ExtendableStructure"]]]},{"name":"extender","description":"Function that takes the base class to extend as its only parameter and returns the\nextended class/prototype","type":[[["function"]]]}],"returns":{"types":[[["function"]]],"description":"Extended class/prototype returned from the extender"},"meta":{"line":64,"file":"Structures.js","path":"src/util"}}],"meta":{"line":28,"file":"Structures.js","path":"src/util"}},{"name":"SystemChannelFlags","description":"Data structure that makes it easy to interact with a {@link Guild#systemChannelFlags} bitfield.\n<info>Note that all event message types are enabled by default,\nand by setting their corresponding flags you are disabling them</info>","extends":[[["BitField"]]],"construct":{"name":"SystemChannelFlags","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["SystemChannelFlagsResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric system channel flags. All available properties:\n* `WELCOME_MESSAGE_DISABLED`\n* `BOOST_MESSAGE_DISABLED`","scope":"static","type":[[["Object"]]],"meta":{"line":35,"file":"SystemChannelFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":11,"file":"SystemChannelFlags.js","path":"src/util"}},{"name":"UserFlags","description":"Data structure that makes it easy to interact with a {@link User#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"UserFlags","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric user flags. All available properties:\n* `DISCORD_EMPLOYEE`\n* `DISCORD_PARTNER`\n* `HYPESQUAD_EVENTS`\n* `BUGHUNTER_LEVEL_1`\n* `HOUSE_BRAVERY`\n* `HOUSE_BRILLIANCE`\n* `HOUSE_BALANCE`\n* `EARLY_SUPPORTER`\n* `TEAM_USER`\n* `SYSTEM`\n* `BUGHUNTER_LEVEL_2`\n* `VERIFIED_BOT`\n* `VERIFIED_DEVELOPER`","see":["{@link https://discordapp.com/developers/docs/resources/user#user-object-user-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":35,"file":"UserFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":8,"file":"UserFlags.js","path":"src/util"}},{"name":"Util","description":"Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.","methods":[{"name":"flatten","description":"Flatten an object. Any properties that are collections will get converted to an array of keys.","scope":"static","params":[{"name":"obj","description":"The object to flatten.","type":[[["Object"]]]},{"name":"props","description":"Specific properties to include/exclude.","optional":true,"variable":true,"type":[[["Object","<"],["string",", ("],["boolean","|"],["string",")>"]]]}],"returns":[[["Object"]]],"meta":{"line":24,"file":"Util.js","path":"src/util"}},{"name":"splitMessage","description":"Splits a string into multiple chunks at a designated character that do not exceed a specific length.","scope":"static","params":[{"name":"text","description":"Content to split","type":[[["StringResolvable"]]]},{"name":"options","description":"Options controlling the behavior of the split","optional":true,"type":[[["SplitOptions"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":65,"file":"Util.js","path":"src/util"}},{"name":"escapeMarkdown","description":"Escapes any Discord-flavour markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]},{"name":"options","description":"What types of markdown to escape","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.codeBlock","description":"Whether to escape code blocks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.inlineCode","description":"Whether to escape inline code or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.bold","description":"Whether to escape bolds or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.italic","description":"Whether to escape italics or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.underline","description":"Whether to escape underlines or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.strikethrough","description":"Whether to escape strikethroughs or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.spoiler","description":"Whether to escape spoilers or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.codeBlockContent","description":"Whether to escape text inside code blocks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.inlineCodeContent","description":"Whether to escape text inside inline code or not","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":97,"file":"Util.js","path":"src/util"}},{"name":"escapeCodeBlock","description":"Escapes code block markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":159,"file":"Util.js","path":"src/util"}},{"name":"escapeInlineCode","description":"Escapes inline code markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":168,"file":"Util.js","path":"src/util"}},{"name":"escapeItalic","description":"Escapes italic markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":177,"file":"Util.js","path":"src/util"}},{"name":"escapeBold","description":"Escapes bold markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":195,"file":"Util.js","path":"src/util"}},{"name":"escapeUnderline","description":"Escapes underline markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":208,"file":"Util.js","path":"src/util"}},{"name":"escapeStrikethrough","description":"Escapes strikethrough markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":221,"file":"Util.js","path":"src/util"}},{"name":"escapeSpoiler","description":"Escapes spoiler markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":230,"file":"Util.js","path":"src/util"}},{"name":"fetchRecommendedShards","description":"Gets the recommended shard count from Discord.","scope":"static","params":[{"name":"token","description":"Discord auth token","type":[[["string"]]]},{"name":"guildsPerShard","description":"Number of guilds per shard","optional":true,"default":1000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The recommended number of shards"},"meta":{"line":240,"file":"Util.js","path":"src/util"}},{"name":"parseEmoji","description":"Parses emoji info out of a string. The string must be one of:\n* A UTF-8 emoji (no ID)\n* A URL-encoded UTF-8 emoji (no ID)\n* A Discord custom emoji (`<:name:id>` or `<a:name:id>`)","scope":"static","access":"private","params":[{"name":"text","description":"Emoji string to parse","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"description":"Object with `animated`, `name`, and `id` properties"},"meta":{"line":262,"file":"Util.js","path":"src/util"}},{"name":"cloneObject","description":"Shallow-copies an object with its class/prototype intact.","scope":"static","access":"private","params":[{"name":"obj","description":"Object to clone","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":276,"file":"Util.js","path":"src/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":287,"file":"Util.js","path":"src/util"}},{"name":"convertToBuffer","description":"Converts an ArrayBuffer or string to a Buffer.","scope":"static","access":"private","params":[{"name":"ab","description":"ArrayBuffer to convert","type":[[["ArrayBuffer"]],[["string"]]]}],"returns":[[["Buffer"]]],"meta":{"line":306,"file":"Util.js","path":"src/util"}},{"name":"str2ab","description":"Converts a string to an ArrayBuffer.","scope":"static","access":"private","params":[{"name":"str","description":"String to convert","type":[[["string"]]]}],"returns":[[["ArrayBuffer"]]],"meta":{"line":317,"file":"Util.js","path":"src/util"}},{"name":"makeError","description":"Makes an Error from a plain info object.","scope":"static","access":"private","params":[{"name":"obj","description":"Error info","type":[[["Object"]]]},{"name":"obj.name","description":"Error type","type":[[["string"]]]},{"name":"obj.message","description":"Message for the error","type":[[["string"]]]},{"name":"obj.stack","description":"Stack for the error","type":[[["string"]]]}],"returns":[[["Error"]]],"meta":{"line":333,"file":"Util.js","path":"src/util"}},{"name":"makePlainError","description":"Makes a plain error info object from an Error.","scope":"static","access":"private","params":[{"name":"err","description":"Error to get info from","type":[[["Error"]]]}],"returns":[[["Object"]]],"meta":{"line":346,"file":"Util.js","path":"src/util"}},{"name":"moveElementInArray","description":"Moves an element in an array *in place*.","scope":"static","access":"private","params":[{"name":"array","description":"Array to modify","type":[[["Array","<"],["*",">"]]]},{"name":"element","description":"Element to move","type":[["*"]]},{"name":"newIndex","description":"Index or offset to move the element to","type":[[["number"]]]},{"name":"offset","description":"Move the element by an offset amount rather than to a set index","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["number"]]],"meta":{"line":363,"file":"Util.js","path":"src/util"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string.","scope":"static","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":386,"file":"Util.js","path":"src/util"}},{"name":"resolveColor","description":"Resolves a ColorResolvable into a color number.","scope":"static","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"A color"},"meta":{"line":432,"file":"Util.js","path":"src/util"}},{"name":"discordSort","description":"Sorts by Discord's position and ID.","scope":"static","params":[{"name":"collection","description":"Collection of objects to sort","type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":452,"file":"Util.js","path":"src/util"}},{"name":"setPosition","description":"Sets the position of a Channel or Role.","scope":"static","access":"private","params":[{"name":"item","description":"Object to set the position of","type":[[["Channel"]],[["Role"]]]},{"name":"position","description":"New position for the object","type":[[["number"]]]},{"name":"relative","description":"Whether `position` is relative to its current position","type":[[["boolean"]]]},{"name":"sorted","description":"A collection of the objects sorted properly","type":[[["Collection","<"],["string",", ("],["Channel","|"],["Role",")>"]]]},{"name":"route","description":"Route to call PATCH on","type":[[["APIRouter"]]]},{"name":"reason","description":"Reason for the change","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["Object",">>"]]],"description":"Updated item list, with `id` and `position` properties"},"meta":{"line":472,"file":"Util.js","path":"src/util"}},{"name":"basename","description":"Alternative to Node's `path.basename`, removing query string after the extension if it exists.","scope":"static","access":"private","params":[{"name":"path","description":"Path to get the basename of","type":[[["string"]]]},{"name":"ext","description":"File extension to remove","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Basename of the path"},"meta":{"line":486,"file":"Util.js","path":"src/util"}},{"name":"idToBinary","description":"Transforms a snowflake from a decimal string to a bit string.","scope":"static","access":"private","params":[{"name":"num","description":"Snowflake to be transformed","type":[[["Snowflake"]]]}],"returns":[[["string"]]],"meta":{"line":497,"file":"Util.js","path":"src/util"}},{"name":"binaryToID","description":"Transforms a snowflake from a bit string to a decimal string.","scope":"static","access":"private","params":[{"name":"num","description":"Bit string to be transformed","type":[[["string"]]]}],"returns":[[["Snowflake"]]],"meta":{"line":518,"file":"Util.js","path":"src/util"}},{"name":"removeMentions","description":"Breaks user, role and everyone/here mentions by adding a zero width space after every @ character","scope":"static","params":[{"name":"str","description":"The string to sanitize","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":547,"file":"Util.js","path":"src/util"}},{"name":"cleanContent","description":"The content to have all mentions replaced by the equivalent text.","scope":"static","params":[{"name":"str","description":"The string to be converted","type":[[["string"]]]},{"name":"message","description":"The message object to reference","type":[[["Message"]]]}],"returns":[[["string"]]],"meta":{"line":557,"file":"Util.js","path":"src/util"}},{"name":"cleanCodeBlockContent","description":"The content to put in a codeblock with all codeblock fences replaced by the equivalent backticks.","scope":"static","params":[{"name":"text","description":"The string to be converted","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":604,"file":"Util.js","path":"src/util"}},{"name":"delayFor","description":"Creates a Promise that resolves after a specified duration.","scope":"static","access":"private","params":[{"name":"ms","description":"How long to wait before resolving (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":614,"file":"Util.js","path":"src/util"}}],"meta":{"line":14,"file":"Util.js","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"ReceiveStreamOptions","description":"Options passed to `VoiceReceiver#createStream`.","type":[[["Object"]]],"props":[{"name":"mode","description":"The mode for audio output. This defaults to opus, meaning discord.js won't decode\nthe packets for you. You can set this to 'pcm' so that the stream's output will be 16-bit little-endian stereo\naudio","optional":true,"default":"'opus'","type":[[["string"]]]},{"name":"end","description":"When the stream should be destroyed. If `silence`, this will be when the user\nstops talking. Otherwise, if `manual`, this should be handled by you.","optional":true,"default":"'silence'","type":[[["string"]]]}],"meta":{"line":28,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"type","description":"The type of stream.","optional":true,"default":"'unknown'","type":[[["StreamType"]]]},{"name":"seek","description":"The time to seek to, will be ignored when playing `ogg/opus` or `webm/opus` streams","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at. Set this to false to disable volume transforms for\nthis stream to improve performance.","optional":true,"default":1,"type":[[["number"]],[["boolean"]]]},{"name":"plp","description":"Expected packet loss percentage","optional":true,"type":[[["number"]]]},{"name":"fec","description":"Enabled forward error correction","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate (quality) of the audio in kbps.\nIf set to 'auto', the voice channel's bitrate will be used","optional":true,"default":96,"type":[[["number"]],[["string"]]]},{"name":"highWaterMark","description":"The maximum number of opus packets to make and store before they are\nactually needed. See https://nodejs.org/en/docs/guides/backpressuring-in-streams/. Setting this value to\n1 means that changes in volume will be more instant.","optional":true,"default":12,"type":[[["number"]]]}],"meta":{"line":7,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"StreamType","description":"An option passed as part of `StreamOptions` specifying the type of the stream.\n* `unknown`: The default type, streams/input will be passed through to ffmpeg before encoding.\nWill play most streams.\n* `converted`: Play a stream of 16bit signed stereo PCM data, skipping ffmpeg.\n* `opus`: Play a stream of opus packets, skipping ffmpeg. You lose the ability to alter volume.\n* `ogg/opus`: Play an ogg file with the opus encoding, skipping ffmpeg. You lose the ability to alter volume.\n* `webm/opus`: Play a webm file with opus audio, skipping ffmpeg. You lose the ability to alter volume.","type":[[["string"]]],"meta":{"line":23,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"ChannelResolvable","description":"채널 객체로 리졸브 가능한 데이터. 가능한 데이터:\n* 채널 객체\n* Snowflake","type":[[["Channel"]],[["Snowflake"]]],"meta":{"line":48,"file":"ChannelManager.js","path":"src/managers"}},{"name":"GuildChannelResolvable","description":"길드 채널 객체로 리졸브 가능한 데이터. 가능한 데이터:\n* 길드 채널 객체\n* Snowflake","type":[[["GuildChannel"]],[["Snowflake"]]],"meta":{"line":36,"file":"GuildChannelManager.js","path":"src/managers"}},{"name":"EmojiResolvable","description":"길드 이모지 객체로 리졸브 가능한 데이터. 가능한 데이터:\n* 커스텀 이모지 ID\n* 길드 이모지 객체\n* 리액션 이모지 객체","type":[[["Snowflake"]],[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":77,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"EmojiIdentifierResolvable","description":"이모지 식별자로 리졸브 가능한 데이터. 가능한 데이터:\n* 이모지의 유니코드 표현\n* EmojiResolvable","type":[[["string"]],[["EmojiResolvable"]]],"meta":{"line":105,"file":"GuildEmojiManager.js","path":"src/managers"}},{"name":"GuildResolvable","description":"길드 객체로 리졸브 가능한 데이터. 가능한 데이터:\n* 길드 객체\n* 길드 채널 객체\n* 길드 이모지 객체\n* 역할 객체\n* Snowflake\n* 초대 객체","type":[[["Guild"]],[["GuildChannel"]],[["GuildMember"]],[["GuildEmoji"]],[["Role"]],[["Snowflake"]],[["Invite"]]],"meta":{"line":35,"file":"GuildManager.js","path":"src/managers"}},{"name":"PartialRoleData","description":"역할의 partial 데이터.","type":[[["Object"]]],"props":[{"name":"id","description":"채널의 권한을 설정하기 위해 쓰일 역할의 ID\n(이것은 placeholder이며 이후 API의 의해서 값이 바뀝니다.)","optional":true,"type":[[["number"]]]},{"name":"name","description":"역할의 이름","optional":true,"type":[[["string"]]]},{"name":"color","description":"역할의 색깔 (Base10 숫자 또는 HEX 코드)","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"역할의 호이스팅 여부","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"역할의 위치(순서)","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"역할의 권한","optional":true,"type":[[["PermissionResolvable"]],[["number"]]]},{"name":"mentionable","description":"역할의 언급 가능 여부","optional":true,"type":[[["boolean"]]]}],"meta":{"line":46,"file":"GuildManager.js","path":"src/managers"}},{"name":"PartialOverwriteData","description":"덮어씌울 partial 데이터.","type":[[["Object"]]],"props":[{"name":"id","description":"덮어씌울 역할ID 도는 유저ID","type":[[["number"]],[["Snowflake"]]]},{"name":"type","description":"덮어씌울 타입","optional":true,"type":[[["string"]]]},{"name":"allow","description":"허용할 권한","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"거부할 권한","optional":true,"type":[[["PermissionResolvable"]]]}],"meta":{"line":59,"file":"GuildManager.js","path":"src/managers"}},{"name":"PartialChannelData","description":"채널의 partial 데이터.","type":[[["Object"]]],"props":[{"name":"id","description":"부모(카테고리)를 설정하기 위한 채널 ID\n(이것은 placeholder이며 이후 API의 의해서 값이 바뀝니다.)","optional":true,"type":[[["number"]]]},{"name":"parentID","description":"채널의 부모(카테고리) 채널 ID","optional":true,"type":[[["number"]]]},{"name":"type","description":"채널의 타입(종류)","optional":true,"type":[[["string"]]]},{"name":"name","description":"채널의 이름","type":[[["string"]]]},{"name":"topic","description":"텍스트 채널의 주제(토픽)","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"채널의 NSFW 여부","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"보이스 채널의 비트레이트","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"채널의 유저 제한","optional":true,"type":[[["number"]]]},{"name":"permissionOverwrites","description":"덮어씌운 권한 데이터","optional":true,"type":[[["PartialOverwriteData"]]]},{"name":"rateLimitPerUser","description":"각 유저의 초당 레이트리밋(슬로우모드)","optional":true,"type":[[["number"]]]}],"meta":{"line":68,"file":"GuildManager.js","path":"src/managers"}},{"name":"GuildMemberResolvable","description":"서버 유저 객체로 리졸브 가능한 데이터. 가능한 데이터:\n* 서버 유저 객체\n* 리졸브 가능한 유저 객체","type":[[["GuildMember"]],[["UserResolvable"]]],"meta":{"line":33,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"FetchMemberOptions","description":"길드에서 한 서버 유저를 불러올때 사용할 옵션.","type":[[["Object"]]],"props":[{"name":"user","description":"불러올 유저의 데이터","type":[[["UserResolvable"]]]},{"name":"cache","description":"불러올 유저의 캐싱 여부","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":65,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"FetchMembersOptions","description":"길드에서 여러 서버 유저를 불러올때 사용할 옵션.","type":[[["Object"]]],"props":[{"name":"user","description":"불러올 유저(들)의 데이터","type":[[["UserResolvable"]],[["Array","<"],["UserResolvable",">"]]]},{"name":"query","description":"비슷한 이름을 가진 서버 유저만 불러옵니다","nullable":true,"type":[[["string"]]]},{"name":"limit","description":"불러올 서버 유저의 제한 수","optional":true,"default":0,"type":[[["number"]]]},{"name":"withPresences","description":"Presence 데이터를 포함 여부","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"time","description":"불러오는 시간 제한","optional":true,"default":"120e3","type":[[["number"]]]}],"meta":{"line":72,"file":"GuildMemberManager.js","path":"src/managers"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["Snowflake"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":32,"file":"MessageManager.js","path":"src/managers"}},{"name":"MessageResolvable","description":"Data that can be resolved to a Message object. This can be:\n* A Message\n* A Snowflake","type":[[["Message"]],[["Snowflake"]]],"meta":{"line":89,"file":"MessageManager.js","path":"src/managers"}},{"name":"PresenceResolvable","description":"Data that can be resolved to a Presence object. This can be:\n* A Presence\n* A UserResolvable\n* A Snowflake","type":[[["Presence"]],[["UserResolvable"]],[["Snowflake"]]],"meta":{"line":26,"file":"PresenceManager.js","path":"src/managers"}},{"name":"MessageReactionResolvable","description":"Data that can be resolved to a MessageReaction object. This can be:\n* A MessageReaction\n* A Snowflake","type":[[["MessageReaction"]],[["Snowflake"]]],"meta":{"line":31,"file":"ReactionManager.js","path":"src/managers"}},{"name":"RoleResolvable","description":"Data that can be resolved to a Role object. This can be:\n* A Role\n* A Snowflake","type":[[["Role"]],[["Snowflake"]]],"meta":{"line":60,"file":"RoleManager.js","path":"src/managers"}},{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\n* A User object\n* A Snowflake\n* A Message object (resolves to the message author)\n* A GuildMember object","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]]],"meta":{"line":23,"file":"UserManager.js","path":"src/managers"}},{"name":"ShardingManagerMode","description":"The mode to spawn shards with for a {@link ShardingManager}: either \"process\" to use child processes, or\n\"worker\" to use workers. The \"worker\" mode relies on the experimental\n[Worker threads](https://nodejs.org/api/worker_threads.html) functionality that is present in Node v10.5.0 or\nnewer. Node must be started with the `--experimental-worker` flag to expose it.","type":[[["Object"]]],"meta":{"line":21,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"MessageTarget","description":"A target for a message.","type":[[["TextChannel"]],[["DMChannel"]],[["User"]],[["GuildMember"]],[["Webhook"]],[["WebhookClient"]]],"meta":{"line":371,"file":"APIMessage.js","path":"src/structures"}},{"name":"MessageAdditions","description":"Additional items that can be sent with a message.","type":[[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<("],["MessageEmbed","|"],["MessageAttachment",")>"]]],"meta":{"line":376,"file":"APIMessage.js","path":"src/structures"}},{"name":"ClientAsset","description":"Asset data.","type":[[["Object"]]],"props":[{"name":"id","description":"The asset ID","type":[[["Snowflake"]]]},{"name":"name","description":"The asset name","type":[[["string"]]]},{"name":"type","description":"The asset type","type":[[["string"]]]}],"meta":{"line":114,"file":"ClientApplication.js","path":"src/structures"}},{"name":"PresenceData","description":"Data resembling a raw Discord presence.","type":[[["Object"]]],"props":[{"name":"status","description":"Status of the user","optional":true,"type":[[["PresenceStatusData"]]]},{"name":"afk","description":"Whether the user is AFK","optional":true,"type":[[["boolean"]]]},{"name":"activity","description":"Activity the user is playing","optional":true,"type":[[["Object"]]]},{"name":"activity.application","description":"An application object or application id","optional":true,"type":[[["Object"]],[["string"]]]},{"name":"activity.application.id","description":"The id of the application","optional":true,"type":[[["string"]]]},{"name":"activity.name","description":"Name of the activity","optional":true,"type":[[["string"]]]},{"name":"activity.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"activity.url","description":"Stream url","optional":true,"type":[[["string"]]]},{"name":"shardID","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":91,"file":"ClientUser.js","path":"src/structures"}},{"name":"PresenceStatusData","description":"A user's status. Must be one of:\n* `online`\n* `idle`\n* `invisible`\n* `dnd` (do not disturb)","type":[[["string"]]],"meta":{"line":119,"file":"ClientUser.js","path":"src/structures"}},{"name":"ActivityOptions","description":"Options for setting an activity","type":[[["Object"]]],"props":[{"name":"url","description":"Twitch stream URL","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"shardID","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":143,"file":"ClientUser.js","path":"src/structures"}},{"name":"Features","description":"An array of enabled guild features, here are the possible values:\n* ANIMATED_ICON\n* BANNER\n* COMMERCE\n* DISCOVERABLE\n* FEATURABLE\n* INVITE_SPLASH\n* NEWS\n* PARTNERED\n* PUBLIC\n* PUBLIC_DISABLED\n* VANITY_URL\n* VERIFIED\n* VIP_REGIONS\n* WELCOME_SCREEN_ENABLED","type":[[["string"]]],"meta":{"line":155,"file":"Guild.js","path":"src/structures"}},{"name":"PremiumTier","description":"The type of premium tier:\n* 0: NONE\n* 1: TIER_1\n* 2: TIER_2\n* 3: TIER_3","type":[[["number"]]],"meta":{"line":210,"file":"Guild.js","path":"src/structures"}},{"name":"BanInfo","description":"An object containing information about a guild member's ban.","type":[[["Object"]]],"props":[{"name":"user","description":"User that was banned","type":[[["User"]]]},{"name":"reason","description":"Reason the user was banned","nullable":true,"type":[[["string"]]]}],"meta":{"line":603,"file":"Guild.js","path":"src/structures"}},{"name":"IntegrationData","description":"The data for creating an integration.","type":[[["Object"]]],"props":[{"name":"id","description":"The integration id","type":[[["string"]]]},{"name":"type","description":"The integration type","type":[[["string"]]]}],"meta":{"line":669,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEmbedData","description":"The Guild Embed object","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the embed is enabled","type":[[["boolean"]]]},{"name":"channel","description":"The embed channel","nullable":true,"type":[[["GuildChannel"]]]}],"meta":{"line":786,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEditData","description":"The data for editing a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","optional":true,"type":[[["string"]]]},{"name":"region","description":"The region of the guild","optional":true,"type":[[["string"]]]},{"name":"verificationLevel","description":"The verification level of the guild","optional":true,"type":[[["VerificationLevel"]],[["number"]]]},{"name":"explicitContentFilter","description":"The level of the explicit content filter","optional":true,"type":[[["ExplicitContentFilterLevel"]],[["number"]]]},{"name":"afkChannel","description":"The AFK channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"systemChannel","description":"The system channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"afkTimeout","description":"The AFK timeout of the guild","optional":true,"type":[[["number"]]]},{"name":"icon","description":"The icon of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"owner","description":"The owner of the guild","optional":true,"type":[[["GuildMemberResolvable"]]]},{"name":"splash","description":"The splash screen of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"banner","description":"The banner of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"defaultMessageNotifications","description":"The default message notifications","optional":true,"type":[[["DefaultMessageNotifications"]],[["number"]]]},{"name":"systemChannelFlags","description":"The system channel flags of the guild","optional":true,"type":[[["SystemChannelFlagsResolvable"]]]}],"meta":{"line":881,"file":"Guild.js","path":"src/structures"}},{"name":"ChannelPosition","description":"The data needed for updating a channel's position.","type":[[["Object"]]],"props":[{"name":"channel","description":"Channel to update","type":[[["ChannelResolvable"]]]},{"name":"position","description":"New position for the channel","type":[[["number"]]]}],"meta":{"line":1136,"file":"Guild.js","path":"src/structures"}},{"name":"GuildRolePosition","description":"The data needed for updating a guild role's position","type":[[["Object"]]],"props":[{"name":"role","description":"The ID of the role","type":[[["RoleResolveable"]]]},{"name":"position","description":"The position to update","type":[[["number"]]]}],"meta":{"line":1170,"file":"Guild.js","path":"src/structures"}},{"name":"AuditLogTargetType","description":"The target type of an entry, e.g. `GUILD`. Here are the available types:\n* GUILD\n* CHANNEL\n* USER\n* ROLE\n* INVITE\n* WEBHOOK\n* EMOJI\n* MESSAGE\n* INTEGRATION","type":[[["string"]]],"meta":{"line":10,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogAction","description":"The action of an entry. Here are the available actions:\n* ALL: null\n* GUILD_UPDATE: 1\n* CHANNEL_CREATE: 10\n* CHANNEL_UPDATE: 11\n* CHANNEL_DELETE: 12\n* CHANNEL_OVERWRITE_CREATE: 13\n* CHANNEL_OVERWRITE_UPDATE: 14\n* CHANNEL_OVERWRITE_DELETE: 15\n* MEMBER_KICK: 20\n* MEMBER_PRUNE: 21\n* MEMBER_BAN_ADD: 22\n* MEMBER_BAN_REMOVE: 23\n* MEMBER_UPDATE: 24\n* MEMBER_ROLE_UPDATE: 25\n* MEMBER_MOVE: 26\n* MEMBER_DISCONNECT: 27\n* BOT_ADD: 28,\n* ROLE_CREATE: 30\n* ROLE_UPDATE: 31\n* ROLE_DELETE: 32\n* INVITE_CREATE: 40\n* INVITE_UPDATE: 41\n* INVITE_DELETE: 42\n* WEBHOOK_CREATE: 50\n* WEBHOOK_UPDATE: 51\n* WEBHOOK_DELETE: 52\n* EMOJI_CREATE: 60\n* EMOJI_UPDATE: 61\n* EMOJI_DELETE: 62\n* MESSAGE_DELETE: 72\n* MESSAGE_BULK_DELETE: 73\n* MESSAGE_PIN: 74\n* MESSAGE_UNPIN: 75\n* INTEGRATION_CREATE: 80\n* INTEGRATION_UPDATE: 81\n* INTEGRATION_DELETE: 82","type":[[["number"]],[["string"]]],"meta":{"line":43,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogEntryTarget","description":"The target of an entry. It can be one of:\n* A guild\n* A user\n* A role\n* An emoji\n* An invite\n* A webhook\n* An integration\n* An object with an id key if target was deleted\n* An object where the keys represent either the new value or the old value","type":[[["Object"]],[["Guild"]],[["User"]],[["Role"]],[["GuildEmoji"]],[["Invite"]],[["Webhook"]],[["Integration"]]],"meta":{"line":178,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogActionType","description":"The action type of an entry, e.g. `CREATE`. Here are the available types:\n* CREATE\n* DELETE\n* UPDATE\n* ALL","type":[[["string"]]],"meta":{"line":210,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogChange","description":"An entry in the audit log representing a specific change.","type":[[["object"]]],"props":[{"name":"key","description":"The property that was changed, e.g. `nick` for nickname changes","type":[[["string"]]]},{"name":"old","description":"The old value of the change, e.g. for nicknames, the old nickname","optional":true,"type":[["*"]]},{"name":"new","description":"The new value of the change, e.g. for nicknames, the new nickname","optional":true,"type":[["*"]]}],"meta":{"line":327,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"ChannelData","description":"The data for a guild channel.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the channel","optional":true,"type":[[["string"]]]},{"name":"position","description":"The position of the channel","optional":true,"type":[[["number"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the voice channel","optional":true,"type":[[["number"]]]},{"name":"parentID","description":"The parent ID of the channel","optional":true,"type":[[["Snowflake"]]]},{"name":"lockPermissions","description":"Lock the permissions of the channel to what the parent's permissions are","optional":true,"type":[[["boolean"]]]},{"name":"permissionOverwrites","description":"Permission overwrites for the channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"rateLimitPerUser","description":"The ratelimit per user for the channel in seconds","optional":true,"type":[[["number"]]]}],"meta":{"line":292,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmojiEditData","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]},{"name":"roles","description":"Roles to restrict emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"meta":{"line":73,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMemberEditData","description":"The data for editing a guild member.","type":[[["Object"]]],"props":[{"name":"nick","description":"The nickname to set for the member","optional":true,"type":[[["string"]]]},{"name":"roles","description":"The roles or role IDs to apply","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether or not the member should be muted","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"type":[[["boolean"]]]},{"name":"channel","description":"Channel to move member to (if they are connected to voice), or `null`\nif you want to kick them from voice","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]}],"meta":{"line":271,"file":"GuildMember.js","path":"src/structures"}},{"name":"IntegrationAccount","description":"The information account for an integration","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the account","type":[[["string"]]]},{"name":"name","description":"The name of the account","type":[[["string"]]]}],"meta":{"line":5,"file":"Integration.js","path":"src/structures"}},{"name":"IntegrationEditData","description":"The data for editing an integration.","type":[[["Object"]]],"props":[{"name":"expireBehavior","description":"The new behaviour of expiring subscribers","optional":true,"type":[[["number"]]]},{"name":"expireGracePeriod","description":"The new grace period before expiring subscribers","optional":true,"type":[[["number"]]]}],"meta":{"line":112,"file":"Integration.js","path":"src/structures"}},{"name":"CollectorFilter","description":"Filter to be applied to the collector.","type":[[["function"]]],"params":[{"name":"args","description":"Any arguments received by the listener","variable":true,"type":[["*"]]},{"name":"collection","description":"The items collected by this collector","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":7,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"CollectorOptions","description":"Options to be applied to the collector.","type":[[["Object"]]],"props":[{"name":"time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]},{"name":"dispose","description":"Whether to dispose data when it's deleted","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":15,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"MessageOptions","description":"Options provided when sending or editing a message.","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embed","description":"An embed for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["MessageEmbed"]],[["Object"]]]},{"name":"allowedMentions","description":"Which mentions should be parsed from the message content","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"disableMentions","description":"Whether or not all mentions or\neveryone/here mentions should be sanitized to prevent unexpected mentions","optional":true,"default":"this.client.options.disableMentions","type":[[["DisableMentionType"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["BufferResolvable",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]},{"name":"reply","description":"User to reply to (prefixes the message with a mention, except in DMs)","optional":true,"type":[[["UserResolvable"]]]}],"meta":{"line":53,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"MessageMentionOptions","description":"Options provided to control parsing of mentions by Discord","type":[[["Object"]]],"props":[{"name":"parse","description":"Types of mentions to be parsed","optional":true,"type":[[["Array","<"],["MessageMentionTypes",">"]]]},{"name":"users","description":"Snowflakes of Users to be parsed as mentions","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]},{"name":"roles","description":"Snowflakes of Roles to be parsed as mentions","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":71,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"MessageMentionTypes","description":"Types of mentions to enable in MessageMentionOptions.\n- `roles`\n- `users`\n- `everyone`","type":[[["string"]]],"meta":{"line":79,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"DisableMentionType","description":"The type of mentions to disable.\n- `none`\n- `all`\n- `everyone`","type":[[["string"]]],"meta":{"line":87,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"FileOptions","type":[[["Object"]]],"props":[{"name":"attachment","description":"File to attach","type":[[["BufferResolvable"]]]},{"name":"name","description":"Filename of the attachment","optional":true,"default":"'file.jpg'","type":[[["string"]]]}],"meta":{"line":95,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"SplitOptions","description":"Options for splitting a message.","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":2000,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":101,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["MessageCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":280,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"TargetUser","description":"The type of the target user:\n* 1: STREAM","type":[[["number"]]],"meta":{"line":79,"file":"Invite.js","path":"src/structures"}},{"name":"MessageReference","description":"Reference data sent in a crossposted message.","type":[[["Object"]]],"props":[{"name":"channelID","description":"ID of the channel the message was crossposted from","type":[[["string"]]]},{"name":"guildID","description":"ID of the guild the message was crossposted from","nullable":true,"type":[[["string"]]]},{"name":"messageID","description":"ID of the message that was crossposted","nullable":true,"type":[[["string"]]]}],"meta":{"line":185,"file":"Message.js","path":"src/structures"}},{"name":"AwaitReactionsOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["ReactionCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":324,"file":"Message.js","path":"src/structures"}},{"name":"MessageEditOptions","description":"Options that can be passed into editMessage.","type":[[["Object"]]],"props":[{"name":"content","description":"Content to be edited","optional":true,"type":[[["string"]]]},{"name":"embed","description":"An embed to be added/edited","optional":true,"type":[[["Object"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"allowedMentions","description":"Which mentions should be parsed from the message content","optional":true,"type":[[["MessageMentionOptions"]]]}],"meta":{"line":399,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum amount of messages to collect","type":[[["number"]]]},{"name":"maxProcessed","description":"The maximum amount of messages to process","type":[[["number"]]]}],"meta":{"line":6,"file":"MessageCollector.js","path":"src/structures"}},{"name":"EmbedField","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this field","type":[[["string"]]]},{"name":"value","description":"The value of this field","type":[[["string"]]]},{"name":"inline","description":"If this field will be displayed inline","type":[[["boolean"]]]}],"meta":{"line":64,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedThumbnail","type":[[["Object"]]],"props":[{"name":"url","description":"URL for this thumbnail","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this thumbnail","type":[[["string"]]]},{"name":"height","description":"Height of this thumbnail","type":[[["number"]]]},{"name":"width","description":"Width of this thumbnail","type":[[["number"]]]}],"meta":{"line":80,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedImage","type":[[["Object"]]],"props":[{"name":"url","description":"URL for this image","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this image","type":[[["string"]]]},{"name":"height","description":"Height of this image","type":[[["number"]]]},{"name":"width","description":"Width of this image","type":[[["number"]]]}],"meta":{"line":101,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedVideo","type":[[["Object"]]],"props":[{"name":"url","description":"URL of this video","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this video","type":[[["string"]]]},{"name":"height","description":"Height of this video","type":[[["number"]]]},{"name":"width","description":"Width of this video","type":[[["number"]]]}],"meta":{"line":122,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedAuthor","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this author","type":[[["string"]]]},{"name":"url","description":"URL of this author","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this author","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this author","type":[[["string"]]]}],"meta":{"line":144,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedProvider","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this provider","type":[[["string"]]]},{"name":"url","description":"URL of this provider","type":[[["string"]]]}],"meta":{"line":165,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedFooter","type":[[["Object"]]],"props":[{"name":"text","description":"The text of this footer","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this footer","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this footer","type":[[["string"]]]}],"meta":{"line":182,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"EmbedFieldData","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of this field","type":[[["StringResolvable"]]]},{"name":"inline","description":"If this field will be displayed inline","optional":true,"type":[[["boolean"]]]}],"meta":{"line":429,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"CrosspostedChannel","description":"Crossposted channel data.","type":[[["Object"]]],"props":[{"name":"channelID","description":"ID of the mentioned channel","type":[[["string"]]]},{"name":"guildID","description":"ID of the guild that has the channel","type":[[["string"]]]},{"name":"type","description":"Type of the channel","type":[[["string"]]]},{"name":"name","description":"The name of the channel","type":[[["string"]]]}],"meta":{"line":95,"file":"MessageMentions.js","path":"src/structures"}},{"name":"OverwriteType","description":"The type of a permission overwrite. It can be one of:\n* member\n* role","type":[[["string"]]],"meta":{"line":31,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"PermissionOverwriteOptions","description":"An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n```js\n{\n 'SEND_MESSAGES': true,\n 'EMBED_LINKS': null,\n 'ATTACH_FILES': false,\n}\n```","type":[[["Object"]]],"meta":{"line":95,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"ResolvedOverwriteOptions","type":[[["object"]]],"props":[{"name":"allow","description":"The allowed permissions","type":[[["Permissions"]]]},{"name":"deny","description":"The denied permissions","type":[[["Permissions"]]]}],"meta":{"line":107,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"RawOverwriteData","description":"The raw data for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the overwrite","type":[[["Snowflake"]]]},{"name":"allow","description":"The permissions to allow","type":[[["number"]]]},{"name":"deny","description":"The permissions to deny","type":[[["number"]]]},{"name":"type","description":"The type of this OverwriteData","type":[[["OverwriteType"]]]}],"meta":{"line":141,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"OverwriteResolvable","description":"Data that can be resolved into {@link RawOverwriteData}","type":[[["PermissionOverwrites"]],[["OverwriteData"]]],"meta":{"line":150,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"OverwriteData","description":"Data that can be used for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"Member or role this overwrite is for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]},{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"type","description":"The type of this OverwriteData","optional":true,"type":[[["OverwriteType"]]]}],"meta":{"line":155,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"MessageActivity","description":"Activity sent in a message.","type":[[["Object"]]],"props":[{"name":"partyID","description":"Id of the party represented in activity","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of activity sent","optional":true,"type":[[["number"]]]}],"meta":{"line":8,"file":"Presence.js","path":"src/structures"}},{"name":"PresenceStatus","description":"The status of this presence:\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`offline`** - user is offline or invisible\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":15,"file":"Presence.js","path":"src/structures"}},{"name":"ClientPresenceStatus","description":"The status of this presence:\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":24,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum total amount of reactions to collect","type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","type":[[["number"]]]}],"meta":{"line":7,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"RoleData","description":"The data for a role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"mentionable","description":"Whether or not the role should be mentionable","optional":true,"type":[[["boolean"]]]}],"meta":{"line":157,"file":"Role.js","path":"src/structures"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into send.","type":[[["Object"]]],"props":[{"name":"username","description":"Username override for the message","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatarURL","description":"Avatar URL override for the message","optional":true,"type":[[["string"]]]},{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embeds","description":"An array of embeds for the message","optional":true,"type":[[["Array","<"],["Object",">"]]]},{"name":"allowedMentions","description":"Which mentions should be parsed from the message content\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"disableMentions","description":"Whether or not all mentions or\neveryone/here mentions should be sanitized to prevent unexpected mentions","optional":true,"default":"this.client.options.disableMentions","type":[[["DisableMentionType"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":79,"file":"Webhook.js","path":"src/structures"}},{"name":"BitFieldResolvable","description":"Data that can be resolved to give a bitfield. This can be:\n* A string (see {@link BitField.FLAGS})\n* A bit number\n* An instance of BitField\n* An Array of BitFieldResolvable","type":[[["string"]],[["number"]],[["BitField"]],[["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":131,"file":"BitField.js","path":"src/util"}},{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"shards","description":"ID of the shard to run, or an array of shard IDs. If not specified,\nthe client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\nrecommended amount of shards from Discord and spawn that amount","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]],[["string"]]]},{"name":"shardCount","description":"The total amount of shards used by all processes of this bot\n(e.g. recommended shard count, shard count of the ShardingManager)","optional":true,"default":1,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\n(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\nindefinitely)","optional":true,"default":200,"type":[[["number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\nsweepable (in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\nthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\nupon joining a guild (should be avoided whenever possible)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableMentions","description":"Default value for {@link MessageOptions#disableMentions}","optional":true,"default":"'none'","type":[[["DisableMentionType"]]]},{"name":"allowedMentions","description":"Default value for {@link MessageOptions#allowedMentions}","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"partials","description":"Structures allowed to be partial. This means events can be emitted even when\nthey're missing all the data for a particular structure. See the \"Partials\" topic listed in the sidebar for some\nimportant usage information, as partials require you to put checks in place when handling data.","optional":true,"type":[[["Array","<"],["PartialType",">"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\ncorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"restTimeOffset","description":"Extra time in millseconds to wait before continuing to make REST\nrequests (higher values will reduce rate-limiting errors on bad connections)","optional":true,"default":500,"type":[[["number"]]]},{"name":"restRequestTimeout","description":"Time to wait before cancelling a REST request, in milliseconds","optional":true,"default":15000,"type":[[["number"]]]},{"name":"restSweepInterval","description":"How frequently to delete inactive request buckets, in seconds\n(or 0 for never)","optional":true,"default":60,"type":[[["number"]]]},{"name":"retryLimit","description":"How many times to retry on 5XX errors (Infinity for indefinite amount of retries)","optional":true,"default":1,"type":[[["number"]]]},{"name":"presence","description":"Presence data to use upon login","optional":true,"type":[[["PresenceData"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]}],"meta":{"line":7,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"intents","description":"Intents to enable for this connection","optional":true,"type":[[["IntentsResolvable"]]]}],"meta":{"line":56,"file":"Constants.js","path":"src/util"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"API version to use","optional":true,"default":7,"type":[[["number"]]]},{"name":"api","description":"Base url of the API","optional":true,"default":"'https://discordapp.com/api'","type":[[["string"]]]},{"name":"cdn","description":"Base url of the CDN","optional":true,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"invite","description":"Base url of invites","optional":true,"default":"'https://discord.gg'","type":[[["string"]]]}],"meta":{"line":73,"file":"Constants.js","path":"src/util"}},{"name":"ImageURLOptions","description":"Options for Image URLs.","type":[[["Object"]]],"props":[{"name":"format","description":"One of `webp`, `png`, `jpg`, `jpeg`, `gif`. If no format is provided,\ndefaults to `webp`.","optional":true,"type":[[["string"]]]},{"name":"dynamic","description":"If true, the format will dynamically change to `gif` for\nanimated avatars; the default is false.","optional":true,"type":[[["boolean"]]]},{"name":"size","description":"One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`","optional":true,"type":[[["number"]]]}],"meta":{"line":111,"file":"Constants.js","path":"src/util"}},{"name":"Status","description":"The current status of the client. Here are the available statuses:\n* READY: 0\n* CONNECTING: 1\n* RECONNECTING: 2\n* IDLE: 3\n* NEARLY: 4\n* DISCONNECTED: 5\n* WAITING_FOR_GUILDS: 6\n* IDENTIFYING: 7\n* RESUMING: 8","type":[[["number"]]],"meta":{"line":155,"file":"Constants.js","path":"src/util"}},{"name":"VoiceStatus","description":"The current status of a voice connection. Here are the available statuses:\n* CONNECTED: 0\n* CONNECTING: 1\n* AUTHENTICATING: 2\n* RECONNECTING: 3\n* DISCONNECTED: 4","type":[[["number"]]],"meta":{"line":180,"file":"Constants.js","path":"src/util"}},{"name":"PartialType","description":"The type of Structure allowed to be a partial:\n* USER\n* CHANNEL (only affects DMChannels)\n* GUILD_MEMBER\n* MESSAGE\n* REACTION\n<warn>Partials require you to put checks in place when handling data, read the Partials topic listed in the\nsidebar for more information.</warn>","type":[[["string"]]],"meta":{"line":291,"file":"Constants.js","path":"src/util"}},{"name":"WSEventType","description":"The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n* READY\n* RESUMED\n* GUILD_CREATE\n* GUILD_DELETE\n* GUILD_UPDATE\n* INVITE_CREATE\n* INVITE_DELETE\n* GUILD_MEMBER_ADD\n* GUILD_MEMBER_REMOVE\n* GUILD_MEMBER_UPDATE\n* GUILD_MEMBERS_CHUNK\n* GUILD_INTEGRATIONS_UPDATE\n* GUILD_ROLE_CREATE\n* GUILD_ROLE_DELETE\n* GUILD_ROLE_UPDATE\n* GUILD_BAN_ADD\n* GUILD_BAN_REMOVE\n* GUILD_EMOJIS_UPDATE\n* CHANNEL_CREATE\n* CHANNEL_DELETE\n* CHANNEL_UPDATE\n* CHANNEL_PINS_UPDATE\n* MESSAGE_CREATE\n* MESSAGE_DELETE\n* MESSAGE_UPDATE\n* MESSAGE_DELETE_BULK\n* MESSAGE_REACTION_ADD\n* MESSAGE_REACTION_REMOVE\n* MESSAGE_REACTION_REMOVE_ALL\n* MESSAGE_REACTION_REMOVE_EMOJI\n* USER_UPDATE\n* PRESENCE_UPDATE\n* TYPING_START\n* VOICE_STATE_UPDATE\n* VOICE_SERVER_UPDATE\n* WEBHOOKS_UPDATE","type":[[["string"]]],"meta":{"line":304,"file":"Constants.js","path":"src/util"}},{"name":"MessageType","description":"The type of a message, e.g. `DEFAULT`. Here are the available types:\n* DEFAULT\n* RECIPIENT_ADD\n* RECIPIENT_REMOVE\n* CALL\n* CHANNEL_NAME_CHANGE\n* CHANNEL_ICON_CHANGE\n* PINS_ADD\n* GUILD_MEMBER_JOIN\n* USER_PREMIUM_GUILD_SUBSCRIPTION\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n* CHANNEL_FOLLOW_ADD\n* GUILD_DISCOVERY_DISQUALIFIED\n* GUILD_DISCOVERY_REQUALIFIED","type":[[["string"]]],"meta":{"line":383,"file":"Constants.js","path":"src/util"}},{"name":"ActivityType","description":"<info>Bots cannot set a `CUSTOM_STATUS`, it is only for custom statuses received from users</info>\nThe type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n* PLAYING\n* STREAMING\n* LISTENING\n* WATCHING\n* CUSTOM_STATUS","type":[[["string"]]],"meta":{"line":422,"file":"Constants.js","path":"src/util"}},{"name":"ExplicitContentFilterLevel","description":"The value set for the explicit content filter levels for a guild:\n* DISABLED\n* MEMBERS_WITHOUT_ROLES\n* ALL_MEMBERS","type":[[["string"]]],"meta":{"line":481,"file":"Constants.js","path":"src/util"}},{"name":"VerificationLevel","description":"The value set for the verification levels for a guild:\n* NONE\n* LOW\n* MEDIUM\n* HIGH\n* VERY_HIGH","type":[[["string"]]],"meta":{"line":490,"file":"Constants.js","path":"src/util"}},{"name":"APIError","description":"An error encountered while performing an API request. Here are the potential errors:\n* UNKNOWN_ACCOUNT\n* UNKNOWN_APPLICATION\n* UNKNOWN_CHANNEL\n* UNKNOWN_GUILD\n* UNKNOWN_INTEGRATION\n* UNKNOWN_INVITE\n* UNKNOWN_MEMBER\n* UNKNOWN_MESSAGE\n* UNKNOWN_OVERWRITE\n* UNKNOWN_PROVIDER\n* UNKNOWN_ROLE\n* UNKNOWN_TOKEN\n* UNKNOWN_USER\n* UNKNOWN_EMOJI\n* UNKNOWN_WEBHOOK\n* BOT_PROHIBITED_ENDPOINT\n* BOT_ONLY_ENDPOINT\n* MAXIMUM_GUILDS\n* MAXIMUM_FRIENDS\n* MAXIMUM_PINS\n* MAXIMUM_ROLES\n* MAXIMUM_REACTIONS\n* MAXIMUM_CHANNELS\n* MAXIMUM_INVITES\n* UNAUTHORIZED\n* USER_BANNED\n* MISSING_ACCESS\n* INVALID_ACCOUNT_TYPE\n* CANNOT_EXECUTE_ON_DM\n* EMBED_DISABLED\n* CANNOT_EDIT_MESSAGE_BY_OTHER\n* CANNOT_SEND_EMPTY_MESSAGE\n* CANNOT_MESSAGE_USER\n* CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n* CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n* OAUTH2_APPLICATION_BOT_ABSENT\n* MAXIMUM_OAUTH2_APPLICATIONS\n* INVALID_OAUTH_STATE\n* MISSING_PERMISSIONS\n* INVALID_AUTHENTICATION_TOKEN\n* NOTE_TOO_LONG\n* INVALID_BULK_DELETE_QUANTITY\n* CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n* INVALID_OR_TAKEN_INVITE_CODE\n* CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n* INVALID_OAUTH_TOKEN\n* BULK_DELETE_MESSAGE_TOO_OLD\n* INVALID_FORM_BODY\n* INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n* INVALID_API_VERSION\n* REACTION_BLOCKED\n* RESOURCE_OVERLOADED","type":[[["string"]]],"meta":{"line":501,"file":"Constants.js","path":"src/util"}},{"name":"DefaultMessageNotifications","description":"The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n* ALL\n* MENTIONS","type":[[["string"]]],"meta":{"line":612,"file":"Constants.js","path":"src/util"}},{"name":"MembershipStates","description":"The value set for a team members's membership state:\n* INVITED\n* ACCEPTED","type":[[["string"]]],"meta":{"line":620,"file":"Constants.js","path":"src/util"}},{"name":"WebhookTypes","description":"The value set for a webhook's type:\n* Incoming\n* Channel Follower","type":[[["string"]]],"meta":{"line":633,"file":"Constants.js","path":"src/util"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\n* An invite code\n* An invite URL","type":[[["string"]]],"meta":{"line":20,"file":"DataResolver.js","path":"src/util"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\n* A Buffer\n* A base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":53,"file":"DataResolver.js","path":"src/util"}},{"name":"BufferResolvable","description":"Data that can be resolved to give a Buffer. This can be:\n* A Buffer\n* The path to a local file\n* A URL","type":[[["string"]],[["Buffer"]]],"meta":{"line":70,"file":"DataResolver.js","path":"src/util"}},{"name":"IntentsResolvable","description":"Data that can be resolved to give a permission number. This can be:\n* A string (see {@link Intents.FLAGS})\n* An intents flag\n* An instance of Intents\n* An array of IntentsResolvable","type":[[["string"]],[["number"]],[["Intents"]],[["Array","<"],["IntentsResolvable",">"]]],"meta":{"line":17,"file":"Intents.js","path":"src/util"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\n* A string (see {@link Permissions.FLAGS})\n* A permission number\n* An instance of Permissions\n* An Array of PermissionResolvable","type":[[["string"]],[["number"]],[["Permissions"]],[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":19,"file":"Permissions.js","path":"src/util"}},{"name":"Snowflake","description":"A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n```\nIf we have a snowflake '266241948824764416' we can represent it as binary:\n\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n      number of ms since Discord epoch       worker  pid    increment\n```","type":[[["string"]]],"meta":{"line":17,"file":"Snowflake.js","path":"src/util"}},{"name":"DeconstructedSnowflake","description":"A deconstructed snowflake.","type":[[["Object"]]],"props":[{"name":"timestamp","description":"Timestamp the snowflake was created","type":[[["number"]]]},{"name":"date","description":"Date the snowflake was created","type":[[["Date"]]]},{"name":"workerID","description":"Worker ID in the snowflake","type":[[["number"]]]},{"name":"processID","description":"Process ID in the snowflake","type":[[["number"]]]},{"name":"increment","description":"Increment in the snowflake","type":[[["number"]]]},{"name":"binary","description":"Binary representation of the snowflake","type":[[["string"]]]}],"meta":{"line":50,"file":"Snowflake.js","path":"src/util"}},{"name":"ExtendableStructure","description":"An extendable structure:\n* **`GuildEmoji`**\n* **`DMChannel`**\n* **`TextChannel`**\n* **`VoiceChannel`**\n* **`CategoryChannel`**\n* **`NewsChannel`**\n* **`StoreChannel`**\n* **`GuildMember`**\n* **`Guild`**\n* **`Message`**\n* **`MessageReaction`**\n* **`Presence`**\n* **`ClientPresence`**\n* **`VoiceState`**\n* **`Role`**\n* **`User`**","type":[[["string"]]],"meta":{"line":3,"file":"Structures.js","path":"src/util"}},{"name":"SystemChannelFlagsResolvable","description":"Data that can be resolved to give a sytem channel flag bitfield. This can be:\n* A string (see {@link SystemChannelFlags.FLAGS})\n* A sytem channel flag\n* An instance of SystemChannelFlags\n* An Array of SystemChannelFlagsResolvable","type":[[["string"]],[["number"]],[["SystemChannelFlags"]],[["Array","<"],["SystemChannelFlagsResolvable",">"]]],"meta":{"line":20,"file":"SystemChannelFlags.js","path":"src/util"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\n* A string\n* An array (joined with a new line delimiter to give a string)\n* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":373,"file":"Util.js","path":"src/util"}},{"name":"ColorResolvable","description":"Can be a number, hex string, an RGB array like:\n```js\n[255, 0, 255] // purple\n```\nor one of the following strings:\n- `DEFAULT`\n- `WHITE`\n- `AQUA`\n- `GREEN`\n- `BLUE`\n- `YELLOW`\n- `PURPLE`\n- `LUMINOUS_VIVID_PINK`\n- `GOLD`\n- `ORANGE`\n- `RED`\n- `GREY`\n- `DARKER_GREY`\n- `NAVY`\n- `DARK_AQUA`\n- `DARK_GREEN`\n- `DARK_BLUE`\n- `DARK_PURPLE`\n- `DARK_VIVID_PINK`\n- `DARK_GOLD`\n- `DARK_ORANGE`\n- `DARK_RED`\n- `DARK_GREY`\n- `LIGHT_GREY`\n- `DARK_NAVY`\n- `RANDOM`","type":[[["string"]],[["number"]],[["Array","<"],["number",">"]]],"meta":{"line":392,"file":"Util.js","path":"src/util"}}],"externals":[{"name":"WritableStream","see":["{@link https://nodejs.org/api/stream.html#stream_class_stream_writable}"],"meta":{"line":15,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"Inflate","see":["{@link https://www.npmjs.com/package/zlib-sync}"],"meta":{"line":106,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"CloseEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}"],"meta":{"line":314,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ErrorEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent}"],"meta":{"line":319,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"MessageEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}"],"meta":{"line":324,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/collection/master/class/Collection}"],"meta":{"line":14,"file":"Collection.js","path":"src/util"}},{"name":"Stream","see":["{@link https://nodejs.org/api/stream.html}"],"meta":{"line":78,"file":"DataResolver.js","path":"src/util"}}]}